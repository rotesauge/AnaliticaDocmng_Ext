//ДокументОбъект =  Источник.Ссылка;
//Попытка
//	НЗ = РегистрыСведений.pcru_ЗадачиПоДокументам.СоздатьНаборЗаписей();
//	НЗ.Отбор.Документ.Установить(ДокументОбъект.Ссылка, Истина);
//	НЗ.Прочитать();
//Исключение
//	Возврат;
//КонецПопытки; 
////
//Запрос = Новый Запрос;
//Запрос.Текст = "ВЫБРАТЬ
//|	аДокументооборотСсылкиПроцессов.БизнесПроцесс
//|ИЗ
//|	РегистрСведений.аДокументооборотСсылкиПроцессов КАК аДокументооборотСсылкиПроцессов
//|ГДЕ
//|	аДокументооборотСсылкиПроцессов.Объект = &Объект
//|	И НЕ аДокументооборотСсылкиПроцессов.БизнесПроцесс.Завершен";
//Запрос.УстановитьПараметр("Объект",Источник.Ссылка );
//Выборка = Запрос.Выполнить().Выбрать();
//НужноЧистить = Истина;
//Пока Выборка.Следующий() Цикл
//	НужноЧистить = Ложь;
//КонецЦикла;
////
//Если НужноЧистить Тогда
//	НЗ.Очистить();
//КонецЕсли;
////
//Если НЗ.Количество() = 0 Тогда
//	НЗ.Очистить();
//	//	
//	МассивПользователей = pcru_РаботаСДокументами.ПолучитьМассивПользователей(Источник.Ссылка);
//	Для каждого СтрокаТЧ Из МассивПользователей Цикл
//		СтрТЗ                    = НЗ.Добавить();
//		СтрТЗ.Исполнитель        = СтрокаТЧ;
//		СтрТЗ.Документ           = Источник.Ссылка;
//		СтрТЗ.ПереадресованоДругому = Ложь;
//		СтрТЗ.Согласовано        = "Согласование не запущено";
//		СтрТЗ.ТекстовыйРезультат = "Согласование не запущено";
//	КонецЦикла; 
//Иначе 	
//	Для каждого СтрТЗ Из НЗ Цикл
//		//	СтрТЗ.Сумма              = ДокументОбъект.СуммаДокумента;
//		//Если ДокументОбъект.КонтрагентыДоговоры.Количество() > 0  Тогда
//		//	СтрТЗ.ДоговорКонтрагента = ДокументОбъект.КонтрагентыДоговоры[0].ДоговорКонтрагента;
//		//	СтрТЗ.Контрагент         = ДокументОбъект.КонтрагентыДоговоры[0].Контрагент;
//		//КонецЕсли; 
//		//Если ДокументОбъект.ОрганизацииПодразделения.Количество() > 0  Тогда
//		//	СтрТЗ.Подразделение      = ДокументОбъект.ОрганизацииПодразделения[0].Подразделение;
//		//КонецЕсли; 
//	КонецЦикла; 
//КонецЕсли;
//НЗ.Записать(ИСТИНА);
&После("ПриЗаписи")
Процедура Pcru_ПриЗаписи(Отказ)
	ВерсионированиеОбъектов.ПриСозданииВерсииОбъекта(ЭтотОбъект);
	#Область Документы
	pcru_РаботаСДокументами.pcru_ОбновитьЗадачи(ЭтотОбъект.Ссылка);
	#КонецОбласти
	Если ЭтотОбъект.ВидДокумента.Наименование = "Входящий" Тогда
		КоличествоСтрокТЧКомпетенцияОтделов = ЭтотОбъект.ПроизвольнаяТаблица.Количество();
		Пока КоличествоСтрокТЧКомпетенцияОтделов > 0  Цикл
			СтрокаПТ =  ЭтотОбъект.ПроизвольнаяТаблица[КоличествоСтрокТЧКомпетенцияОтделов - 1];
			Если ЗначениеЗаполнено(СтрокаПТ.КолонкаСсылка1)  Тогда
				Если ОтделДляУдаленияИзСписка(СтрокаПТ.КолонкаСсылка1) Тогда
					ЭтотОбъект.ПроизвольнаяТаблица.Удалить(КоличествоСтрокТЧКомпетенцияОтделов - 1);
				КонецЕсли; 
			КонецЕсли;
			КоличествоСтрокТЧКомпетенцияОтделов = КоличествоСтрокТЧКомпетенцияОтделов - 1;	
		КонецЦикла; 
	КонецЕсли; 
	
	//+asevryugin@PCRU.LOCAL, 2020-09-24 02:55:57
	Если ЭтотОбъект.ВидДокумента.Наименование = "Заявка на оплату" Тогда
		СуммаПоСтрокам = 0;
		Для каждого СтрокаРаспределения Из ЭтотОбъект.пкру_РаспределениеЗатрат Цикл
			НеПроверятьТипЗатрат = Ложь;
			Если не  ЭтотОбъект.ДополнительныеСвойства.Свойство("НеПроверятьТипЗатрат",НеПроверятьТипЗатрат) Тогда
    			НеПроверятьТипЗатрат = Ложь;
			КонецЕсли;
			Если Не НеПроверятьТипЗатрат Тогда
				Если Не ЗначениеЗаполнено(СтрокаРаспределения.ТипЗатрат) Тогда
					Отказ = Истина;
					Сообщить("В строке №" +СтрокаРаспределения.НомерСтроки+" не зпполнен тип затрат!");
					Возврат;
				КонецЕсли; 
			КонецЕсли; 
			СуммаПоСтрокам = СуммаПоСтрокам + СтрокаРаспределения.Сумма;
		КонецЦикла; 
		Если не ЗначениеЗаполнено(ЭтотОбъект.PCRU_ИдентификаторДиадок)  Тогда
			Если СуммаПоСтрокам <>  ЭтотОбъект.СуммаДокумента Тогда
				Отказ = Истина;
				Сообщить("Сумма в распределении затрат "+СуммаПоСтрокам + " Не соответствует сумме документа "+ЭтотОбъект.СуммаДокумента);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//+/asevryugin@PCRU.LOCAL, 2020-09-24 02:55:57
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОтделДляУдаленияИзСписка(Отдел)
	Если Отдел.Наименование = "FD" Тогда
		Возврат Истина;		 
	КонецЕсли; 
	
	Если Отдел.Наименование = "CEO" Тогда
		Возврат Истина;		 
	КонецЕсли; 
	Если Отдел.Наименование = "IC&LSD" Тогда
		Возврат Истина;		 
	КонецЕсли; 
	Возврат Ложь;	
КонецФункции // ОтделДляУдаленияИзСписка()

&После("ПередЗаписью")
Процедура Pcru_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	pcru_БизнесПроцессы.ПолучитьПользователейДокумента(ЭтотОбъект);
КонецПроцедуры

&После("ПриКопировании")
Процедура Pcru_ПриКопировании(ОбъектКопирования)	
	ЭтотОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
КонецПроцедуры

