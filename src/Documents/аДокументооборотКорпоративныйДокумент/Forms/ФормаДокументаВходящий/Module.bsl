&НаКлиенте
Перем СостояниеОбъекта;

&НаКлиенте
Перем ФормаНастроенаПоВиду;

&НаКлиенте
Перем СтруктураНомера; //используется при работе с номером документа

&НаКлиенте
Перем ИсточникПоляHTML; //признак готовности поля предпросмотра html

&НаКлиенте
Перем ИдетПроцессАктивизацииСтроки;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//{Режим открытия окна
	#Если ВебКлиент Тогда
		ЭтоВебКлиент=Истина;
	#Иначе
		ЭтоВебКлиент=Ложь;
	#КонецЕсли
	
	НайденныйРежимОткрытияОкна=аДООбщееСерверПС.ПолучитьРежимОткрытияФормы(ЭтаФорма.ИмяФормы, , ЭтоВебКлиент);
	Если НайденныйРежимОткрытияОкна<>Неопределено Тогда
		ЭтаФорма.РежимОткрытияОкна=НайденныйРежимОткрытияОкна;
	КонецЕсли;
	//}
	
	РольЕсть_аФормированиеПечатныхФорм=РольПользователяДоступна("аФормированиеПечатныхФорм");
	РольЕсть_аДокументыПодпись=РольПользователяДоступна("аДокументыПодпись");
	РольЕсть_аДокументыРедактирование=ПравоДоступа("Редактирование", Метаданные.Документы.аДокументооборотКорпоративныйДокумент);	
	
	Если НЕ аДОУправлениеДоступомПС.ДоступныРолиПроцессов() Тогда
		Элементы.ГруппаСписокКорпоративныхПроцессов.Видимость=Ложь;		
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Задачи.аДокументооборотЗадача) Тогда
		Элементы.ГруппаСписокКорпоративныхЗадач.Видимость=Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РежимФормыБылИзмененВРучную=Ложь;
	
	//номер можно менять всегда кроме случаев, когда документ еще новый и установлена соответствующая константа
	
	ПрисваиватьНомерПриСоздании=Константы.аДокументооборотПрисваиватьНомерПриСозданииДокумента.Получить();
	РегистрироватьПриСоздании=Константы.аДокументооборотРегистрироватьДокументАвтоматически.Получить();
	РегистрироватьДокументАвтором=Константы.аДокументооборотРегистрироватьДокументАвтором.Получить();
	ПроверятьУникальностьНомеровКорпоративныхДокументов=Константы.аДокументооборотПроверятьУникальностьНомеровКорпоративныхДокументов.Получить();
	
	ОткрыватьФайлыДокументовДляПросмотра = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиПользователя",
	"ОткрыватьФайлыДокументовДляПросмотра",
	Ложь);
	
	ЭтоНовый=Параметры.Ключ.Пустая();
	
	Если ПрисваиватьНомерПриСоздании И РегистрироватьПриСоздании Тогда
		МоментРегистрации="ПриСоздании";
	ИначеЕсли НЕ ПрисваиватьНомерПриСоздании И РегистрироватьПриСоздании Тогда
		МоментРегистрации="ПриПервойЗаписи";
	Иначе
		МоментРегистрации="НеРегистрировать";
	КонецЕсли;
	
	МожноПрисваиватьНомерДокумента=НЕ Параметры.Ключ.Пустая() ИЛИ Константы.аДокументооборотПрисваиватьНомерПриСозданииДокумента.Получить();
	ТекущийПользователь=аДООбщееКлиентСерверПС.ТекущийПользователь();
	
	ФлагИспользоватьПредпросмотр=аДООбщееСервер.ЗагрузитьНастройкуПользователя("Документ", "ИспользоватьПредпросмотр");			
	ФлагПоказыватьДопРеквизитыВВидеСписка=аДООбщееСервер.ЗагрузитьНастройкуПользователя("Документ", "ПоказыватьДопРеквизитыВВидеСписка");
	
	ФлагПоказыватьСписокКорпоративныхЗадач=аДООбщееСервер.ЗагрузитьНастройкуПользователя("Документ", "ФлагПоказыватьСписокКорпоративныхЗадач");
	ФлагПоказыватьСписокКорпоративныхПроцессов=аДООбщееСервер.ЗагрузитьНастройкуПользователя("Документ", "ФлагПоказыватьСписокКорпоративныхПроцессов");
	
	ФлагПредпросмотрРазмерКартинкиЧислоЗначение=аДООбщееСервер.ЗагрузитьНастройкуПользователя("Документ", "ФлагПредпросмотрРазмерКартинкиЧисло");
	Если ФлагПредпросмотрРазмерКартинкиЧислоЗначение=Неопределено Тогда
		ФлагПредпросмотрРазмерКартинкиЧисло=0;
	Иначе
		ФлагПредпросмотрРазмерКартинкиЧисло=ФлагПредпросмотрРазмерКартинкиЧислоЗначение;
	КонецЕсли;
	
	ФлагНеОткрыватьКарточкуПослеСозданияФайла=аДООбщееСервер.ЗагрузитьНастройкуПользователя("НастройкиОткрытияФайлов", "НеОткрыватьКарточкуПослеСозданияФайла");
	
	ВключенПростойРежим=Ложь;	
	
	ШрифтПользователя=аДООбщееСервер.ПолучитьШрифтПользователя();
	Элементы.ФорматированныйТекстСодержания.Шрифт=ШрифтПользователя;
	
	ВидДокумента=Объект.ВидДокумента;
	
	РазрешитьИзменениеСпискаПолучателейПодписанногоДокумента=(Константы.аДокументооборотРазрешитьИзменениеСпискаПолучателейПодписанногоДокумента.Получить() И ТекущийПользователь=ВидДокумента.РедакторСписковСотрудниковПодписанныхДокументов);
	
	ЭтоНовый=Параметры.Ключ.Пустая();
	
	Если ЭтоНовый ИЛИ (Параметры.Свойство("ЗаполнитьКакНовый") И Параметры.ЗаполнитьКакНовый) Тогда
		
		НачальноеЗаполнениеДокумента();
		
		Элементы.СвязиСОбъектами.Доступность=Ложь;
		ФайлыНазваниеОсновнойКоманды="Добавить";
		ДокументПодписан=Ложь;
		
		Если НЕ ЗначениеЗаполнено(ВидДокумента) Тогда
			Объект.ВидДокумента=Справочники.аДокументооборотВидыДокументов.НайтиПоНаименованию("Входящий");
			ВидДокумента=Объект.ВидДокумента;
		КонецЕсли;
		
		Если Параметры.Свойство("ЗаполнитьКакНовый") И Параметры.ЗаполнитьКакНовый Тогда
			УстановитьНомерДокументаСервером();
		КонецЕсли;
		
		ШаблонДокумента=Неопределено;
		Если Параметры.Свойство("ШаблонДокумента") И ЗначениеЗаполнено(Параметры.ШаблонДокумента) Тогда
			ШаблонДокумента=Параметры.ШаблонДокумента;
		КонецЕсли;
		
		Если Параметры.Свойство("Проект") И ЗначениеЗаполнено(Параметры.Проект) Тогда
			НоваяСтрока=Объект.Проекты.Добавить();
			НоваяСтрока.Проект=Параметры.Проект;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ШаблонДокумента) Тогда
			ШаблонДокумента=ВидДокумента.ШаблонЗаполненияДокумента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ШаблонДокумента) Тогда
			ЗаполнитьДокументПоШаблону(ШаблонДокумента);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			Объект.ОткрыватьВПростомРежиме=ВидДокумента.ПростойРежимУстанавливатьДляНовых;			
		КонецЕсли;
		
		БылНовым=Истина; //для записи информации в систему сообщений
		
		Если НЕ РегистрироватьПриСоздании Тогда
			Объект.РегистрационныйНомер="";
			Объект.ДатаРегистрации=Дата("00010101");
			Объект.СотрудникРегистратор=Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		
		Если Параметры.Свойство("ЗначениеКопирования") И НЕ МожноПрисваиватьНомерДокумента Тогда
			//удалим скопированные номера, так как номер будет присовен только после записи документа
			Объект.РегистрационныйНомер="";
			Объект.Номер="";
		КонецЕсли;
		
		Если Параметры.Свойство("ДокументОснование") Тогда
			Если ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
				Объект.ДокументОснование=Параметры.ДокументОснование;
				
				ВидДокументаОснования=СокрЛП(Объект.ДокументОснование.ВидДокумента);
				Объект.Комментарий="Введено "+СокрЛП(ТекущаяДата())+" на основании "+ВидДокументаОснования+" "+СокрЛП(Объект.ДокументОснование);
			КонецЕсли;			
		КонецЕсли;
		
		//установим тип хранения файлов по умолчанию, он будет использоваться при создании новых файлов
		ТипХраненияФайловДокумента=?(Константы.ХранитьФайлыВТомахНаДиске.Получить(), Перечисления.ТипыХраненияФайлов.ВТомахНаДиске,  Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе);
		
		Если НЕ ЗначениеЗаполнено(СостояниеДокументаТекущее) Тогда
			СостояниеДокументаТекущее=Справочники.аДокументооборотСостояниеДокументов.Новый;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВажностьДокумента) Тогда
			Объект.ВажностьДокумента=Справочники.аДокументооборотВажностьОбъекта.Средняя;
		КонецЕсли;
		
		ЗаполнитьОсновныеРеквизитыПоТабличнымЧастям();
		
		
		Если Объект.ОрганизацииПодразделения.Количество() = 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПодразделенияСотрудники.Ссылка
			|ИЗ
			|	Справочник.Подразделения.Сотрудники КАК ПодразделенияСотрудники
			|ГДЕ
			|	ПодразделенияСотрудники.Пользователь = &Пользователь";
			
			Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Нстрока =   Объект.ОрганизацииПодразделения.Добавить();
				Нстрока.Подразделение = Выборка.Ссылка;
				
			КонецЦикла;
			
			
			
		КонецЕсли; 
		
	Иначе //не новый
		
		//установим заголовок по виду документа
		ЭтаФорма.АвтоЗаголовок=Ложь;
		ЭтаФорма.Заголовок=СокрЛП(ВидДокумента)+" "+СокрЛП(Объект.Номер)+" от "+СокрЛП(Объект.Дата);
		
		Если аДОРаботаСДокументами.ДействуетЗапретРедактирования(Объект.Ссылка, ТекущийПользователь) Тогда
			УстановитьЗапретРедактированияФормы();
		Иначе
			КоличествоПодписей=аДОРаботаСДокументами.ПолучитьКоличествоПодписейОбъекта(Объект.Ссылка);
			ДокументПодписан=(КоличествоПодписей>0);
			Если ДокументПодписан Тогда
				УстановитьЗапретРедактированияФормы();
			КонецЕсли;
		КонецЕсли;
		
		Элементы.СвязиСОбъектами.Доступность=Истина;
		ФайлыНазваниеОсновнойКоманды="Открыть файл";
		Если ПустаяСтрока(Объект.СодержаниеДокумента) И Объект.СсылкиНаФайлы.Количество()>0 Тогда
			Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.Файлы;
			
		Иначе
			Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.Содержание;
			
		КонецЕсли;
		
		ВключенПростойРежим=(Объект.ОткрыватьВПростомРежиме ИЛИ ВидДокумента.ПростойРежимИспользоватьДляВсехСуществующих);
		
		Если ЗначениеЗаполнено(Объект.ТипХраненияФайлов) Тогда
			ТипХраненияФайловДокумента=Объект.ТипХраненияФайлов;			
		Иначе
			//тип хранения не был указан в файле (возможно старый документ)
			//попробуем определить на основе добавленных в него файлов
			//если файлов нет, возмем значение из константы
			Если Объект.СсылкиНаФайлы.Количество()>0 Тогда
				ТипХраненияФайловДокумента=Объект.СсылкиНаФайлы[0].Файл.ТекущаяВерсия.ТипХраненияФайла;
			Иначе
				//ТипХраненияФайловДокумента=Константы.ТипХраненияФайлов.Получить();
				ТипХраненияФайловДокумента=?(Константы.ХранитьФайлыВТомахНаДиске.Получить(), Перечисления.ТипыХраненияФайлов.ВТомахНаДиске,  Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе);
				
			КонецЕсли;
		КонецЕсли;
		
		СостояниеДокументаТекущее=аДОРаботаСДокументами.ПрочитатьСостояниеДокумента(Объект.Ссылка);
		
		Если не ЗначениеЗаполнено(СостояниеДокументаТекущее)  Тогда
			СостояниеДокументаТекущее =  Справочники.аДокументооборотСостояниеДокументов.Новый;
			аДОРаботаСДокументами.ЗаписатьСостояниеДокумента(Объект.Ссылка, Справочники.аДокументооборотСостояниеДокументов.Новый);
		КонецЕсли; 
		
	КонецЕсли;
	
	//общий код для новых и не новых
	
	Если аДООбщееСерверПС.ЭтоРольПолныеПрава() Тогда
		ЭтоРежимОтладки=аДООбщееСервер.ЭтоРежимОтладки(ТекущийПользователь);
	КонецЕсли;
	
	ОсновнойШаблонПечати=Константы.аДокументооборотШаблонПечатиДокумента.Получить();
	
	Если РольЕсть_аФормированиеПечатныхФорм Тогда
		Если ЗначениеЗаполнено(ОсновнойШаблонПечати) Тогда
			Элементы.ФормаОбщаяКомандааДОПечатьКорпоративногоДокумента.Заголовок=СокрЛП(Константы.аДокументооборотШаблонПечатиДокумента.Получить());
		КонецЕсли;
	КонецЕсли;
	
	СписокПользователей=аДОПривилегированныеОперации.ПолучитьСписокПользователейОткрывшихОбъект(Объект.Ссылка, ТекущийПользователь);
	
	//вызовем обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);	
	
	//обработаем дополнительные параметры (могут применяться для новых и старых документов)
	Если Параметры.Свойство("ОбновитьСсылкиНаФайлы") И Параметры.ОбновитьСсылкиНаФайлы Тогда
		ОбновитьСсылкиНаФайлы();
	КонецЕсли;
	
	Если НЕ Константы.аДокументооборотРегистрироватьДокументАвтоматически.Получить() Тогда
		Элементы.РегистрационныйНомер.ОтображениеПредупрежденияПриРедактировании=ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		Элементы.ДатаРегистрации.ОтображениеПредупрежденияПриРедактировании=ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		Элементы.СотрудникРегистратор.ОтображениеПредупрежденияПриРедактировании=ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		Элементы.ДатаРегистрации.АвтоОтметкаНезаполненного=Ложь;
		Элементы.РегистрационныйНомер.АвтоОтметкаНезаполненного=Ложь;
	КонецЕсли;
	
	//сформируем названия сложных реквизитов
	НоменклатураДел=ПолучитьПолноеНаименование(Объект.НоменклатураДел);
	МестоХранения=ПолучитьПолноеНаименование(Объект.МестоХранения);
	Попытка
		КорпоративнаяПапка=ПолучитьПолноеНаименование(Объект.КорпоративнаяПапка);
	Исключение
		аДООбщееСервер.СообщитьОбОшибке(НСтр("ru='Корпоративная папка. '; en='Corporate folder. ';")+ОписаниеОшибки());  
		Отказ=Истина;
		Возврат;
	КонецПопытки;
	
	ДатаВремяОткрытияФормы=ТекущаяДата();
	
	УстановитьОтображениеСодержания(); //установим обычное или html-содержание
	
	УстановитьЗаголовокФайлы(); //укажем количество файлов в заголовке
	
	ВышестоящиеОбъекты.Параметры.УстановитьЗначениеПараметра("ТекущийДокумент", Объект.Ссылка);			
	НижестоящиеОбъекты.Параметры.УстановитьЗначениеПараметра("ТекущийДокумент", Объект.Ссылка);			
	
	Элементы.ГруппаТипХраненияФайлов.Видимость=аДООбщееСерверПС.ЭтоРольПолныеПрава();
	
	УстановитьОформлениеЭлементов();
	
	Если ВключенПростойРежим Тогда
		ТипРазмещенияДополнительныхРеквизитов=ВидДокумента.ТипРазмещенияДополнительныхРеквизитов;
		ТипРазмещенияПроизвольнойТаблицы=ВидДокумента.ТипРазмещенияПроизвольнойТаблицы; //0 - на отдельной закладке, 1 - Вместе с содержанием документа
		ПрочитатьДополнительныеРеквизиты();
		УстановитьКнопкуФайлОсновноеДействие(ФайлыНазваниеОсновнойКоманды);
		
		УстановитьПростойРежимФормы();
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			НастроитьФормуПоВидуДокумента(ВидДокумента);
		КонецЕсли;
		
		//далее будет открытие в обычном режиме, поэтому выйдем из процедуры здесь
		
		Возврат;
		
	КонецЕсли;
	
	//открытие в обычном режиме
	
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		НастроитьФормуПоВидуДокумента(ВидДокумента);
	КонецЕсли;
	
	УстановитьКнопкуФайлОсновноеДействие(ФайлыНазваниеОсновнойКоманды);
	
	ЗаполнитьМенюДоступныхВидовБизнесПроцессов();
	
	УстановитьОтображениеДействийПослеОкончанияСрока();
	
	Элементы.ВидДокумента.КнопкаОткрытия =аДООбщееСерверПС.ЭтоРольПолныеПрава();
	Элементы.ВидДокумента.КнопкаВыбора =аДООбщееСерверПС.ЭтоРольПолныеПрава();
	Элементы.ВидДокумента.КнопкаВыпадающегоСписка =аДООбщееСерверПС.ЭтоРольПолныеПрава();
	
	Если аДООбщееСерверПС.ЭтоРольПолныеПрава() Тогда
		Элементы.СотрудникРегистратор.ТолькоПросмотр=Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Отказ=ВыполнитьОбработчикПриСоздании();
	КонецЕсли;
	
	УстановитьПараметровСписков();
	
	Если Объект.КонтрагентыДоговоры.Количество() > 0 Тогда
		ЭтотОбъект.pcru_Контрагент	    = Объект.КонтрагентыДоговоры[0].Контрагент;
	КонецЕсли;
	
	Если Объект.ОрганизацииПодразделения.Количество() > 0 Тогда
		ЭтотОбъект.PCRU_Подразделение	=  Объект.ОрганизацииПодразделения[0].Подразделение;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Pcru_РазрешениеНаРедактированиеСрезПоследних.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.Pcru_РазрешениеНаРедактирование.СрезПоследних КАК Pcru_РазрешениеНаРедактированиеСрезПоследних
	|ГДЕ
	|	Pcru_РазрешениеНаРедактированиеСрезПоследних.Пользователь = &Пользователь
	|	И Pcru_РазрешениеНаРедактированиеСрезПоследних.Документ = &Документ
	|	И РАЗНОСТЬДАТ(Pcru_РазрешениеНаРедактированиеСрезПоследних.Период, &ТД, МИНУТА) < 15";
	Запрос.УстановитьПараметр("Документ", ЭтотОбъект.Объект.Ссылка);
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТД",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭтотОбъект.Доступность = Истина;
		ЭтотОбъект.ТолькоПросмотр = Ложь;
		
		Для Каждого Элемент Из Элементы Цикл
			Попытка
				Элемент.Доступность = Истина;
				Элемент.ТолькоПросмотр = Ложь;
			Исключение
			КонецПопытки; 
		КонецЦикла;
		Элементы.pcru_Контрагент.Доступность = Ложь;	
		//  Элементы.СуммаДокумента.Доступность = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьОбработчикПриСоздании();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсходныйТекстФункции=ВидДокумента.ТекстФункцииПриСоздании;
	
	ТекстФункции=аДОКорпоративныеПроцессы.СформироватьТекстПроцедурыОбработки(ИсходныйТекстФункции);
	
	Отказ=Ложь;
	
	Если НЕ ПустаяСтрока(ТекстФункции) Тогда
		
		//подготовим аргументы программной функции
		ДокументОбъект=Объект;
		
		ПрефиксДополнительногоРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
		СтуктураРезультата=аДОРаботаСДокументами.ПодготовитьИВыполнитьПрограммнуюФункцию(Объект, ТекстФункции, ЭтаФорма, ПрефиксДополнительногоРеквизита);
		
		Если СтуктураРезультата=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения обработки ""ПриСоздании"" в документе вида ""';en='Runtime error handling ""'")+СокрЛП(ВидДокумента)+"""."+ОписаниеОшибки());
			Возврат Истина;
		КонецЕсли;
		
		Если СтуктураРезультата.Свойство("РезультатВыполнения") Тогда
			Возврат СтуктураРезультата.Отказ;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ВыполнитьОбработчикПередЗаписью(Отказ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсходныйТекстФункции=ВидДокумента.ТекстФункцииПередЗаписью;
	
	ТекстФункции=аДОКорпоративныеПроцессы.СформироватьТекстПроцедурыОбработки(ИсходныйТекстФункции);
	
	Если НЕ ПустаяСтрока(ТекстФункции) Тогда
		
		//подготовим аргументы программной функции
		ДокументОбъект=Объект;
		
		ПрефиксДополнительногоРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
		СтуктураРезультата=аДОРаботаСДокументами.ПодготовитьИВыполнитьПрограммнуюФункцию(Объект, ТекстФункции, ЭтаФорма, ПрефиксДополнительногоРеквизита);
		
		Если СтуктураРезультата=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения обработки ""ПередЗаписью"" в документе вида ""';en='Runtime error handling ""'")+СокрЛП(ВидДокумента)+"""."+ОписаниеОшибки());
			Возврат;
		КонецЕсли;
		
		Если СтуктураРезультата.Свойство("РезультатВыполнения") Тогда
			Отказ=СтуктураРезультата.Отказ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОсновныеРеквизитыПоТабличнымЧастям()
	
	Если Объект.ОрганизацииПодразделения.Количество()>0 Тогда
		Объект.ОсновнаяОрганизация=Объект.ОрганизацииПодразделения[0].Организация;
		Объект.ОсновноеПодразделение=Объект.ОрганизацииПодразделения[0].Подразделение;
	КонецЕсли;
	
	Если Объект.КонтрагентыДоговоры.Количество()>0 Тогда
		Объект.ОсновнойКонтрагент=Объект.КонтрагентыДоговоры[0].Контрагент;
	КонецЕсли;
	
	Если Объект.Проекты.Количество()>0 Тогда
		Объект.ОсновнойПроект=Объект.Проекты[0].Проект;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисутствуютПолучателиПриИзменении(Элемент)
	
	Если Объект.СписокПолучателей.Количество()>0 И НЕ Объект.ПрисутствуютПолучатели Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ПрисутствуютПолучателиПриИзмененииЗавершение", ЭтотОбъект), НСтр("en='The recipient list will be cleared. Do you want to continue?';ru='Внимание! Список получателей будет очищен! Продолжить?'"), РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ПрисутствуютПолучателиПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ПрисутствуютПолучателиПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Объект.ПрисутствуютПолучатели=Истина;	
		Возврат;
	КонецЕсли;
	Объект.СписокПолучателей.Очистить();
	
	ПрисутствуютПолучателиПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисутствуютПолучателиПриИзмененииФрагмент()
	
	Элементы.СписокПолучателей1.Видимость=Объект.ПрисутствуютПолучатели;
	
КонецПроцедуры

Процедура УстановитьЗаголовокФайлы()
	Элементы.Файлы.Заголовок=НСтр("en='Files (';ru='Файлы ('")+Формат(Объект.СсылкиНаФайлы.Количество(), "ЧН=; ЧГ=")+")";
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПользователи(Команда)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.Сотрудники); 
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИзмениласьПерваяСтрока=Ложь;
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("Пользователь", ЭлементМассива)).Количество()>0 Тогда
			Продолжить; //сотрудник уже в списке
		КонецЕсли;
		НоваяСтрока=Объект.Сотрудники.Добавить();
		НоваяСтрока.Пользователь=ЭлементМассива;
		
		Если НоваяСтрока.НомерСтроки=1 Тогда
			ИзмениласьПерваяСтрока=Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзмениласьПерваяСтрока Тогда
		СохранитьЦифрыНомера=Истина;
		ИзменитьНомерДокумента("[КС]", СохранитьЦифрыНомера);
	КонецЕсли;	
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКаталоги(Команда)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.аДокументооборотВиртуальныеКаталогиОбъектов.ФормаВыбора", ПараметрыФормы, Элементы.ВиртуальныеКаталоги); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКонтрагенты(Команда)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, Элементы.КонтрагентыДоговоры); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОрганизации(Команда)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.Организации.ФормаВыбора", ПараметрыФормы, Элементы.ОрганизацииПодразделения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПроекты(Команда)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыФормы, Элементы.Проекты); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПодразделенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИзмениласьПерваяСтрока=Ложь;
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		Если Объект.ОрганизацииПодразделения.НайтиСтроки(Новый Структура("Организация", ЭлементМассива)).Количество()>0 Тогда
			Продолжить; //сотрудник уже в списке
		КонецЕсли;
		НоваяСтрока=Объект.ОрганизацииПодразделения.Добавить();
		НоваяСтрока.Организация=ЭлементМассива;
		
		Если НоваяСтрока.НомерСтроки=1 Тогда
			ИзмениласьПерваяСтрока=Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзмениласьПерваяСтрока Тогда
		СтрокаНомера=Объект.ОрганизацииПодразделения[0];
		Если ЗначениеЗаполнено(СтрокаНомера.Организация) Тогда
			ИзменитьНомерДокумента("[КО]");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаНомера.Подразделение) Тогда
			ИзменитьНомерДокумента("[КП]");
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИзмениласьПерваяСтрока=Ложь;
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		Если Объект.Проекты.НайтиСтроки(Новый Структура("Проект", ЭлементМассива)).Количество()>0 Тогда
			Продолжить; //сотрудник уже в списке
		КонецЕсли;
		НоваяСтрока=Объект.Проекты.Добавить();
		НоваяСтрока.Проект=ЭлементМассива;
		
		Если НоваяСтрока.НомерСтроки=1 Тогда
			ИзмениласьПерваяСтрока=Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзмениласьПерваяСтрока Тогда
		СохранитьЦифрыНомера=Истина;
		ИзменитьНомерДокумента("[ПР]", СохранитьЦифрыНомера);
		
	КонецЕсли;
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыДоговорыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		Если Объект.КонтрагентыДоговоры.НайтиСтроки(Новый Структура("Контрагент", ЭлементМассива)).Количество()>0 Тогда
			Продолжить; //сотрудник уже в списке
		КонецЕсли;
		НоваяСтрока=Объект.КонтрагентыДоговоры.Добавить();
		НоваяСтрока.Контрагент=ЭлементМассива;
		НоваяСтрока.ДоговорКонтрагента=ПолучитьОсновнойДоговорКонтрагента(НоваяСтрока.Контрагент);
	КонецЦикла;
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудниковРабочейГруппой(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСотрудниковРабочейГруппойЗавершение", ЭтотОбъект), НСтр("en='Do you want to fill by workgroup?';ru='Заполнить рабочей группой?'"), РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудниковРабочейГруппойЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, РежимВыбора", Истина, Истина);
	ВыбранноеЗначение = Неопределено;
	
	ОткрытьФорму("Справочник.аДокументооборотРабочиеГруппы.ФормаВыбора", ПараметрыФормы,Объект.Сотрудники,,,, Новый ОписаниеОповещения("ЗаполнитьСотрудниковРабочейГруппойЗавершениеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудниковРабочейГруппойЗавершениеЗавершение(Результат, ДополнительныеПараметры1) Экспорт
	
	ВыбранноеЗначение=Результат;
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//заполним по рабочей группе
	ЗаполнитьСотрудниковПоРабочейГруппеСервером(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСотрудниковПоРабочейГруппеСервером(СсылкаНаРабочуюГруппу)
	Для Каждого ЭлементГруппы Из СсылкаНаРабочуюГруппу.Сотрудники Цикл
		
		ИсполнительСтрокиИсходный=ЭлементГруппы.ТочкаАдресации;
		
		Если НЕ аДООбщееСерверПС.ЭтоИсполнительПроцесса(ИсполнительСтрокиИсходный) Тогда
			//исполнителя получим из ролевой адресации	
			ИсполнительСтроки=аДОЗадачиПроцессов.ПолучитьИсполнителяПоРолиИОсновнойАдресации(ИсполнительСтрокиИсходный);
		Иначе
			ИсполнительСтроки=ИсполнительСтрокиИсходный;
		КонецЕсли;
		
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("Пользователь", ИсполнительСтроки)).Количество()>0 Тогда
			Продолжить; //пользователь уже присуствтует в табличной части
			
		КонецЕсли;
		
		НоваяСтрока=Объект.Сотрудники.Добавить();
		НоваяСтрока.Пользователь=ИсполнительСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавить(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ФайлыДобавитьЗавершение", ЭтотОбъект), НСтр("en='Please save the document first. Save it now?';ru='Сначала запишите документ. Записать сейчас?'"), РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ФайлыДобавитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
		
	Иначе
		Попытка
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		Исключение
			аДООбщееКлиент.СообщитьОбОшибке(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ФайлыДобавитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавитьФрагмент()
	
	Перем ПараметрыВыполнения, ФормаВариантаСозданияФайла;
	
	УстановитьКнопкуФайлОсновноеДействие("Добавить");
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыВыполнения.Вставить("ФормаВладелец", ЭтаФорма);
	ПараметрыВыполнения.Вставить("РежимСоздания", 2); //из файла (1 - по шаблону, 3 - со сканера)
	ПараметрыВыполнения.Вставить("ОткрыватьКарточкуПослеСоздания", НЕ ФлагНеОткрыватьКарточкуПослеСозданияФайла);
	
	ФормаВариантаСозданияФайла = РаботаСФайламиСлужебныйКлиентПовтИсп.ФормаВыбораВариантаСозданияНовогоФайла();
	
	ПараметрыВыполнения.Вставить("Форма", ФормаВариантаСозданияФайла);
	
	УстановитьОповещениеФормы(ФормаВариантаСозданияФайла , Новый ОписаниеОповещения("ФайлДобавитьВДокументВыбраннымРежимом", ЭтотОбъект, ПараметрыВыполнения));
	
	ФормаВариантаСозданияФайла.Открыть();
	
КонецПроцедуры

// Устанавливает обработчик закрытия формы, полученной при помощи ПолучитьФорму().
&НаКлиенте
Процедура УстановитьОповещениеФормы(Форма, Обработчик) Экспорт
	
	Если Обработчик <> Неопределено Тогда
		// Установка обработчика закрытия формы.
		Форма.ОписаниеОповещенияОЗакрытии = Обработчик;
		// Форма, возвращающая значение, должна:
		Если Форма.ВладелецФормы = Неопределено Тогда
			// Без установленного владельца - блокировать весь интерфейс.
			Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		Иначе
			// С установленным владельцем - блокировать окно владельца или весь интерфейс.
			Если Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый Тогда
				Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДобавитьВДокументВыбраннымРежимом(Результат, ПараметрыВыполнения) Экспорт 
	
	Если ПараметрыВыполнения.Свойство("Форма") Тогда
		ФлагНеОткрыватьКарточкуПослеСозданияФайлаВФормеВыбора = НЕ ПараметрыВыполнения.Форма.ОткрыватьКарточкуПослеСоздания;
		ПараметрыВыполнения.Форма=Неопределено;
	Иначе
		ФлагНеОткрыватьКарточкуПослеСозданияФайлаВФормеВыбора = НЕ ПараметрыВыполнения.ОткрыватьКарточкуПослеСоздания;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", ФлагНеОткрыватьКарточкуПослеСозданияФайлаВФормеВыбора); //добавлено для совместимости с БСП
	Если ФлагНеОткрыватьКарточкуПослеСозданияФайла <> ФлагНеОткрыватьКарточкуПослеСозданияФайлаВФормеВыбора Тогда
		//пользователь изменил флажок
		ФлагНеОткрыватьКарточкуПослеСозданияФайла=ФлагНеОткрыватьКарточкуПослеСозданияФайлаВФормеВыбора;
		аДООбщееСервер.СохранитьНастройкуПользователя("НастройкиОткрытияФайлов", "НеОткрыватьКарточкуПослеСозданияФайла", ФлагНеОткрыватьКарточкуПослеСозданияФайла);
		
	КонецЕсли;
	
	Если Результат<>КодВозвратаДиалога.Отмена Тогда
		Модифицированность=Истина;
		РежимСоздания=Результат;
		Если РежимСоздания=1 Тогда 
			//добавим ссылку на шаблон выбрав его из справочника
			ПараметрыФормы = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Истина, Ложь);
			ФормаВыбораШаблона = ПолучитьФорму("Справочник.Файлы.Форма.аФормаСпискаШаблонов", ПараметрыФормы);
			ФормаВыбораШаблона.Заголовок = "Выбор шаблона";
			
			ПараметрыВыполнения=Новый Структура;
			УстановитьОповещениеФормы(ФормаВыбораШаблона, Новый ОписаниеОповещения("ВыборШаблонаФайлаЗавершение", ЭтотОбъект, ПараметрыВыполнения));
			ФормаВыбораШаблона.Открыть();
			Возврат;
			
		ИначеЕсли РежимСоздания=2 Тогда 
			//добавление обычного файла
			ОбработчикРезультатаДобавленияСДиска=Новый ОписаниеОповещения("ФайлДобавитьПослеДобавленияФайлаСДиска", ЭтотОбъект, ПараметрыВыполнения);
			РаботаСФайламиКлиент.ДобавитьФайл(ОбработчикРезультатаДобавленияСДиска, ПараметрыВыполнения.ВладелецФайла, ПараметрыВыполнения.ФормаВладелец, РежимСоздания, ФлагНеОткрыватьКарточкуПослеСозданияФайла);
			
		ИначеЕсли РежимСоздания = 3 Тогда // Считать со сканера
			ПараметрыВыполнения.Вставить("ОбработчикРезультата", Новый ОписаниеОповещения("ФайлДобавитьПослеДобавленияФайлаСДиска", ЭтотОбъект, ПараметрыВыполнения)); 
			РаботаСФайламиСлужебныйКлиент.ДобавитьСоСканера(ПараметрыВыполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборШаблонаФайлаЗавершение(ВыбранныйШаблон, ПараметрыВыполнения) Экспорт 
	Если ВыбранныйШаблон=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлВТабличнуюЧасть(ВыбранныйШаблон);
	УстановитьЗаголовокФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДобавитьПослеДобавленияФайлаСДиска(Модуль, ПараметрыВыполнения) Экспорт 
	
	Состояние("Обновление списка файлов...");
	ПодключитьОбработчикОжидания("ОбновитьФайлыОтложенно", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФайлыОтложенно() Экспорт
	ФайлыОбновить(Неопределено);
	УстановитьЗаголовокФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	Если Объект.ВидДокумента=ФормаНастроенаПоВиду Тогда
		//выбор не изменился
		Возврат;
	КонецЕсли;
	
	ВидДокумента=Объект.ВидДокумента;
	
	НастроитьФормуПоВидуДокумента(ВидДокумента);
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Отказ=ВыполнитьОбработчикПриСоздании();
		Если Отказ=Истина Тогда
			ПоказатьПредупреждение(Неопределено, "Отказано в создании данного вида документа",, аОбщееКлиентПС.ЗаголовокДиалога());
			Объект.ВидДокумента=Неопределено;
			ВидДокумента=Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МенюФайлыНастройкаВключена Тогда
		СсылкиНаФайлыПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
	Если МожноПрисваиватьНомерДокумента Тогда
		ИзменитьНомерДокумента("[ВД]");
		
	КонецЕсли;
	
	ЗаполнитьМенюДоступныхВидовБизнесПроцессов();
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ЭтаФорма.АвтоЗаголовок=Ложь;
		ЭтаФорма.Заголовок=СокрЛП(ВидДокумента)+" "+СокрЛП(Объект.Номер)+" от "+СокрЛП(Объект.Дата);
		
		ШаблонВидаДокумента=аДООбщееСервер.ПолучитьЗначениеРеквизитаОбъекта(ВидДокумента, "ШаблонЗаполненияДокумента");
		ЗаполнениеПоШаблону=ЗначениеЗаполнено(ШаблонВидаДокумента);
		
		Если Параметры.Ключ.Пустая() Тогда
			Если НЕ ЗаполнениеПоШаблону Тогда
				СостояниеДляНового=ПолучитьСостояниеДляНовогоДокумента();
				Если СостояниеДокументаТекущее<>СостояниеДляНового Тогда
					СостояниеДокументаТекущее=СостояниеДляНового;
				КонецЕсли;
			КонецЕсли;
			
			Если ИспользоватьФорматированныйТекст(ВидДокумента) Тогда
				Объект.ТипОтображенияСодержания=1;
				
			Иначе
				Объект.ТипОтображенияСодержания=0;
				
			КонецЕсли;
			
			УстановитьОтображениеСодержания();
			
		КонецЕсли;
		
		Если ЗаполнениеПоШаблону Тогда
			ИзменятьВидДокумента=Ложь;
			ЗаполнитьДокументПоШаблону(ШаблонВидаДокумента, ИзменятьВидДокумента);
			ДействияПослеОкончанияСрокаПриИзменении(Неопределено);
			
		Иначе		
			КорпоративнаяПапкаПоУмолчанию=ПолучитьКорпоративнуюПапкуПоУмолчанию(ВидДокумента);
			
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(КорпоративнаяПапкаПоУмолчанию) Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ВидДокументаПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("КорпоративнаяПапкаПоУмолчанию", КорпоративнаяПапкаПоУмолчанию)), НСтр("en='Do you want to change the corporate directory to ""';ru='Изменить корпоративную папку на ""'")+СокрЛП(КорпоративнаяПапкаПоУмолчанию)+"""?", РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КорпоративнаяПапкаПоУмолчанию = ДополнительныеПараметры.КорпоративнаяПапкаПоУмолчанию;
	
	
	Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
		Объект.КорпоративнаяПапка=КорпоративнаяПапкаПоУмолчанию;
		КорпоративнаяПапка=ПолучитьПолноеНаименование(Объект.КорпоративнаяПапка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИспользоватьФорматированныйТекст(ВидДокумента)
	Возврат ВидДокумента.ИспользоватьФорматированныйТекстВНовыхДокументах;
	
КонецФункции

&НаСервере
Функция ПолучитьКорпоративнуюПапкуПоУмолчанию(ВидДокумент)
	Возврат ВидДокумент.КорпоративнаяПапкаПоУмолчанию;
	
КонецФункции

// Процедура меняет номер документ, если в параметре указана Истина, то цифровой номер документа сохраняется
// изменяется только формат номера (префикс, суффикс и т.д.)
&НаКлиенте
Процедура ИзменитьНомерДокумента(ТегИзменения, СохранитьЦифрыНомера=Ложь)
	
	Если Параметры.Ключ.Пустая() Тогда
		Если МожноПрисваиватьНомерДокумента Тогда
			УстановитьНомерДокумента();
		Иначе
			Возврат;
			
		КонецЕсли;
		
	Иначе
		//определим строку всех тегов которые могут использоваться в этом документе при текущих
		//значенние вида документа и организации (превой в списке)
		СтрокаТегов=ПолучитьСтрокуВсехТеговНумераторовДокумента();
		
		//далее определим есть ли в этих нумераторах изменившееся значение
		//если да, то зададим вопрос об изменении номера
		//иначе просто установим новый номер без вопроса
		
		Если ТегИзменения="[КО]" Тогда
			//используется дополнительный тег организации
			Если Найти(СтрокаТегов, ТегИзменения)>0 ИЛИ Найти(СтрокаТегов, "[ПФ]")>0 ИЛИ Найти(СтрокаТегов, "[КП]")>0 Тогда
				ТребуетсяИзменениеНомера=Истина;
			Иначе
				ТребуетсяИзменениеНомера=Ложь;
			КонецЕсли;
			
		ИначеЕсли ТегИзменения="[ПР]" Тогда
			//используется дополнительный тег проекта
			//Если Найти(СтрокаТегов, ТегИзменения)=0 И Найти(СтрокаТегов, "[КП]")=0 Тогда
			Если Найти(СтрокаТегов, ТегИзменения)>0 Тогда
				ТребуетсяИзменениеНомера=Истина;
			Иначе
				ТребуетсяИзменениеНомера=Ложь;
			КонецЕсли;
			
		Иначе			
			//обычный одинарный тег
			//проверим, есть ли у строке текущего номера нужный префикс и, 
			//соответственно, потребуется ли изменение номера
			ТребуетсяИзменениеНомера=(Найти(СтрокаТегов, ТегИзменения)>0);
			
		КонецЕсли;
		
		Если ТребуетсяИзменениеНомера Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьНомерДокументаЗавершение", ЭтотОбъект), НСтр("en='Do you want to change the number of the document according to the selected parameters of the document?';ru='Изменить номер документа согласно выбранных параметров документа?'"), РежимДиалогаВопрос.ДаНет, , ,НСтр("ru='СЭД ""Документообороот Проф""';en='EDS ''Dokumentooboroot Prof ""'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
		УстановитьНомерДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоВидуДокумента(ВидДокумента)
	
	ТипРазмещенияДополнительныхРеквизитов=ВидДокумента.ТипРазмещенияДополнительныхРеквизитов;
	ТипРазмещенияПроизвольнойТаблицы=ВидДокумента.ТипРазмещенияПроизвольнойТаблицы;
	
	//сначала восстановим старый вид документа по СписокИзмененныхЭлементовФормы
	Для Каждого ИзмененныйЭлемент Из СписокИзмененныхЭлементовФормы Цикл
		ЭлементФормы=Элементы[ИзмененныйЭлемент.Значение];
		ЭлементФормы.Видимость=ИзмененныйЭлемент.Пометка;
		Попытка
			ЭлементФормы.Заголовок=СокрЛП(ИзмененныйЭлемент.Представление);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	//получим список настраевыемых элементов вида
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	аДокументооборотНастройкаВидовДокументов.ВидДокумента,
	|	аДокументооборотНастройкаВидовДокументов.ИмяЭлемента,
	|	аДокументооборотНастройкаВидовДокументов.ВидЭлемента,
	|	аДокументооборотНастройкаВидовДокументов.Видимость,
	|	аДокументооборотНастройкаВидовДокументов.ОтображаемоеНаименование,
	|	аДокументооборотНастройкаВидовДокументов.Обязательный
	|ИЗ
	|	РегистрСведений.аДокументооборотНастройкаВидовДокументов КАК аДокументооборотНастройкаВидовДокументов
	|ГДЕ               	
	|	аДокументооборотНастройкаВидовДокументов.ВидДокумента = &ВидДокумента");
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокИзмененныхЭлементовФормы.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		ИмяЭлемента=СокрЛП(Выборка.ИмяЭлемента);
		
		ОтображаемоеНаименование=Выборка.ОтображаемоеНаименование;
		ИмяЭлемента=СокрЛП(Выборка.ИмяЭлемента);
		ИмяЭлемента=СтрЗаменить(ИмяЭлемента, ".", "");
		
		Если Элементы.Найти(ИмяЭлемента)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы=Элементы[ИмяЭлемента];
		
		//зафиксируем данные
		СписокИзмененныхЭлементовФормы.Добавить(ИмяЭлемента, ЭлементФормы.Заголовок, ЭлементФормы.Видимость);		
		
		ЗаголовокЭлемента=СокрЛП(ОтображаемоеНаименование);
		
		Если ЗаголовокЭлемента<>"<авто>" И ЗаголовокЭлемента<>"" Тогда //установим новый заголовок
			ЭлементФормы.Заголовок=ЗаголовокЭлемента;
			
		КонецЕсли;
		
		ЭлементФормы.Видимость=Выборка.Видимость;
		
	КонецЦикла; //по элементам вида документа
	
	//контроль по обязательности реквизитов выполняется в процедуре ОбработкаПроверкиЗаполнения
	
	Элементы.СтраницаПроизвольнаяТаблица.Видимость=ВидДокумента.ИспользоватьПроизвольнуюТаблицу;
	
	Элементы.СтраницаДополнительныеРеквизиты.Видимость=ВидДокумента.ИспользоватьДополнительныеРеквизиты И (ТипРазмещенияДополнительныхРеквизитов=0);
	Элементы.ДополнительныеРеквизитыЗакладкиСодержание.Видимость=ВидДокумента.ИспользоватьДополнительныеРеквизиты И (ТипРазмещенияДополнительныхРеквизитов=1);
	
	Элементы.СтраницаПроизвольнаяТаблица.Видимость=ВидДокумента.ИспользоватьПроизвольнуюТаблицу И (ТипРазмещенияПроизвольнойТаблицы=0);
	Элементы.ПроизвольнаяТаблицаЗакладкиСодержание.Видимость=ВидДокумента.ИспользоватьПроизвольнуюТаблицу И (ТипРазмещенияПроизвольнойТаблицы=1);
	
	Элементы.СтраницаСодержание.Видимость=ВидДокумента.ИспользоватьТекстовоеСодержание;
	Элементы.Файлы.Видимость=ВидДокумента.ИспользоватьФайлы;
	
	КоличествоОтображаемыхСтраниц=0;
	КоличествоОтображаемыхСтраниц=КоличествоОтображаемыхСтраниц+?(Элементы.СтраницаДополнительныеРеквизиты.Видимость, 1, 0);
	КоличествоОтображаемыхСтраниц=КоличествоОтображаемыхСтраниц+?(Элементы.СтраницаПроизвольнаяТаблица.Видимость, 1, 0);
	КоличествоОтображаемыхСтраниц=КоличествоОтображаемыхСтраниц+?(Элементы.СтраницаСодержание.Видимость, 1, 0);
	
	Если КоличествоОтображаемыхСтраниц<2 Тогда
		Элементы.ГруппаСодержание.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
		
	Иначе
		Элементы.ГруппаСодержание.ОтображениеСтраниц=ОтображениеСтраницФормы.ЗакладкиСнизу;
		
	КонецЕсли;
	
	Если ВидДокумента.ИспользоватьПроизвольнуюТаблицу Тогда
		
		УстановитьОформлениеПроизвольнойТаблицы();
		
		Если ТипРазмещенияПроизвольнойТаблицы=0 Тогда
			//отдельная закладка
			Элементы.СтраницаПроизвольнаяТаблица.Заголовок=ВидДокумента.НаименованиеЗакладкиПроизвольнаяТаблица;
		Иначе
			//вместе с содержанием
			Элементы.ПроизвольнаяТаблицаЗакладкиСодержание.Заголовок=ВидДокумента.НаименованиеЗакладкиПроизвольнаяТаблица;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидДокумента.ИспользоватьДополнительныеРеквизиты Тогда
		ПрочитатьДополнительныеРеквизиты();
		Если ТипРазмещенияДополнительныхРеквизитов=0 Тогда
			//отдельная закладка
			Элементы.СтраницаДополнительныеРеквизиты.Заголовок=ВидДокумента.НаименованиеЗакладкиДополнительныхРеквизитов;
		Иначе
			//вместе с содержанием
			Элементы.ДополнительныеРеквизитыЗакладкиСодержание.Заголовок=ВидДокумента.НаименованиеЗакладкиДополнительныхРеквизитов;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ОсновнойШаблонПечати=аДООбщееСервер.ПолучитьБланкКорпоративногоДокумента(ЭтаФорма);
	
	Если ЗначениеЗаполнено(ОсновнойШаблонПечати) И РольЕсть_аФормированиеПечатныхФорм Тогда
		Элементы.ФормаОбщаяКомандааДОПечатьКорпоративногоДокумента.Заголовок=СокрЛП(ОсновнойШаблонПечати);
	КонецЕсли;
	
	Если Элементы.Файлы.Видимость И ВидДокумента.НастройкаВидимостиМенюФайлыВключена И НЕ (ВидДокумента.НастройкаВидимостиМенюФайлыОтключитьНастройкуДляПолныхПрав И аДООбщееСерверПС.ЭтоРольПолныеПрава()) Тогда
		МенюФайлыНастройкаВключена=Истина;
		НастроитьМенюФайлы();
	Иначе
		МенюФайлыНастройкаВключена=Ложь;
		Если НастройкаПунктовМенюПроизводилась Тогда
			НастроитьМенюФайлы(,Истина);
		КонецЕсли;
		
		ПунктМенюПредпросмотрВиден=Истина; //виден по умолчанию, да же есть настройка не производилась
		
	КонецЕсли;
	
	Элементы.СсылкиНаФайлыСтатус.Видимость=ВидДокумента.ПоказыватьКолонкуСтатусФайла;
	
	Если НЕ РежимФормыБылИзмененВРучную И (Параметры.Ключ.Пустая() И ВидДокумента.ПростойРежимУстанавливатьДляНовых) Тогда
		//в настройке вида включен простой режим для новых документов, это новый документ и вручную еще режим не переключали
		ВключенПростойРежим=Истина;
		УстановитьПростойРежимФормы();
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОформлениеПроизвольнойТаблицы()
	
	Если ТипРазмещенияПроизвольнойТаблицы=0 Тогда 
		//отдельная закладка
		ТаблицаЭлементФормы=Элементы.ПроизвольнаяТаблица;
		ДополнениеИмениКолонки="";
		ИмяКолонкиСсылки="КолонкаСсылка";
	Иначе
		//вместе с содержанием
		ТаблицаЭлементФормы=Элементы.СодержаниеПроизвольнаяТаблица;
		ДополнениеИмениКолонки="Содержание";
		ИмяКолонкиСсылки="СодержаниеКолонкаСсылка";
		
	КонецЕсли;
	
	Для Каждого ЭлементТаблицы Из ВидДокумента.ПроизвольнаяТаблица Цикл
		ИмяКолонки=ДополнениеИмениКолонки+СокрЛП(ЭлементТаблицы.ИмяКолонки);
		
		ТаблицаЭлементФормы.ПодчиненныеЭлементы[ИмяКолонки].Видимость=ЭлементТаблицы.Используется;
		ТаблицаЭлементФормы.ПодчиненныеЭлементы[ИмяКолонки].Заголовок=ЭлементТаблицы.ОтображаемоеЗначение;
		
		Если ЭлементТаблицы.ТипФормула Тогда
			ТаблицаЭлементФормы.ПодчиненныеЭлементы[ИмяКолонки].ТолькоПросмотр=Истина;
			ТаблицаЭлементФормы.ПодчиненныеЭлементы[ИмяКолонки].ЦветТекста=WebЦвета.ТемноЗеленый;
		Иначе
			ТаблицаЭлементФормы.ПодчиненныеЭлементы[ИмяКолонки].ТолькоПросмотр=Ложь;
			ТаблицаЭлементФормы.ПодчиненныеЭлементы[ИмяКолонки].ЦветТекста=ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли;
		
		Если Найти(ИмяКолонки, ИмяКолонкиСсылки)>0 И ЗначениеЗаполнено(ЭлементТаблицы.ТипДанныхТаблицы) Тогда
			
			Если ЭлементТаблицы.ТипФормула Тогда
				Если Найти(ИмяКолонки, "КолонкаЧисло")>0 Тогда
					НазваниеТипа="Число";
					
				ИначеЕсли Найти(ИмяКолонки, "КолонкаСтрока")>0 Тогда
					НазваниеТипа="Строка";
					
				Иначе
					НазваниеТипа="Строка";
					
				КонецЕсли;
				
				
			Иначе
				//установим тип значения
				НазваниеТипа=ЭлементТаблицы.ТипДанныхТаблицы.ПолноеНаименование;
				НазваниеТипа=СтрЗаменить(НазваниеТипа, "Документ.", "ДокументСсылка.");
				НазваниеТипа=СтрЗаменить(НазваниеТипа, "Справочник.", "СправочникСсылка.");
			КонецЕсли;
			
		КонецЕсли;		
		
		Попытка
			ОграничениеТипаРеквизита=Новый ОписаниеТипов(НазваниеТипа);
			ТаблицаЭлементФормы.ПодчиненныеЭлементы[ИмяКолонки].ОграничениеТипа=ОграничениеТипаРеквизита;
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЦикла;
	
	ТаблицаЭлементФормы.Обновить();
	
КонецПроцедуры

Функция ПолучитьПрефиксДополнительногоРеквизита()
	
	Если ТипРазмещенияДополнительныхРеквизитов=0 Тогда
		Возврат "ДополнительныйРеквизитСтраница_";
	Иначе
		Возврат "ДополнительныйРеквизитСодержание_";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПрочитатьДополнительныеРеквизиты()
	
	//проверим, все ли дополнительные реквизиты вида присутствуют в списке реквизитов документа
	ОбновитьСписокДополнительныхРеквизитовДокумента(ВидДокумента);
	
	//прочитаем дополнительные реквизиты из табличной части документа и
	//создадим в группе ГруппаДополнительныеРеквизиты поля ввода дополнительных реквизитов
	
	//создадим массив дополнительных реквизитов
	МассивДобавляемыхРеквизитов=Новый Массив;
	МассивУдаляемыхРеквизитов=Новый Массив;
	
	Для Каждого ЭлементСписка Из СписокДополнительныхРеквизитов Цикл
		УдаляемыйРеквизит=ЭлементСписка.Значение;
		МассивУдаляемыхРеквизитов.Добавить(УдаляемыйРеквизит);
		
		ЭлементРеквизитаФормы=Элементы.Найти(УдаляемыйРеквизит);
		//удалим элемент формы
		Если ЭлементРеквизитаФормы<>Неопределено Тогда
			Элементы.Удалить(ЭлементРеквизитаФормы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокДополнительныхРеквизитов.Очистить();
	
	ПрефиксРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
	
	СписокНаименованийДобавленныхРеквизитов=Новый СписокЗначений;
	
	ДопРеквизитыВидаДокумента=ВидДокумента.ДополнительныеРеквизиты;
	
	ИспользоватьИностранныеНаименования=аДООбщееСервер.ИспользоватьИностранныеНаименованияВФормахПроцессов();
	
	Для Каждого СтрокаТаблицы Из Объект.ДополнительныеРеквизиты Цикл
		ДополнительныйРеквизит=СтрокаТаблицы.ДополнительныйРеквизит;
		Если ДополнительныйРеквизит.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		//проверим, есть ли этот реквизит в выбранном виде документа
		Если ДопРеквизитыВидаДокумента.Найти(ДополнительныйРеквизит, "ДополнительныйРеквизит")=Неопределено Тогда
			//в виде документа нет этого доп. реквизита (возможно он остался в документе при переключении вида документа)
			Продолжить;
			
		КонецЕсли;	
		
		ЗначениеРеквизита=СтрокаТаблицы.ЗначениеРеквизита;
		
		ИмяРеквизита=ПрефиксРеквизита+ДополнительныйРеквизит.ИмяРеквизитаДляФункций;
		ЭлементРеквизитаФормы=Элементы.Найти(ИмяРеквизита);
		Если ЭлементРеквизитаФормы=Неопределено Тогда
			//реквизита еще нет
			//НаименованиеТипаРеквизита=аДОКорпоративныеПроцессы.ПолучитьНаименованиеТипаРеквизита(ДополнительныйРеквизит);
			ТипРеквизита=аДОКорпоративныеПроцессы.ПолучитьОписаниеТипаРеквизитаПроцесса(ДополнительныйРеквизит);
			
			//сформируем наименование реквизита
			Если ПустаяСтрока(ДополнительныйРеквизит.НаименованиеВФорме) Тогда
				НаименованиеРеквизита=СокрЛП(ДополнительныйРеквизит.Наименование);
			Иначе
				//НаименованиеРеквизита=ДополнительныйРеквизит.НаименованиеВФорме;
				НаименованиеРеквизита=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(ДополнительныйРеквизит.НаименованиеВФормеИностранное), ДополнительныйРеквизит.НаименованиеВФормеИностранное, ДополнительныйРеквизит.НаименованиеВФорме);
			КонецЕсли;
			
			Попытка
				Если НЕ СписокНаименованийДобавленныхРеквизитов.НайтиПоЗначению(ИмяРеквизита)=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СписокНаименованийДобавленныхРеквизитов.Добавить(ИмяРеквизита);
				
				НовыйРеквизитФормы=Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , НаименованиеРеквизита, Истина);
				Если МассивДобавляемыхРеквизитов.Найти(НовыйРеквизитФормы)=Неопределено Тогда
					МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизитФормы);
					СписокДополнительныхРеквизитов.Добавить(НовыйРеквизитФормы.Имя);
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		Иначе
			ЭлементРеквизитаФормы.Видимость=Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	//добавим реквизиты в список реквизитов
	Попытка
		ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	//создадим реквизиты на форме и установим привязки реквизитов
	Если ТипРазмещенияДополнительныхРеквизитов=0 Тогда
		//отдельная закладка
		РодительскийЭлемент = Элементы.ГруппаДополнительныеРеквизиты;
		
	Иначе
		РодительскийЭлемент = Элементы.ГруппаДополнительныеРеквизитыЗакладки;
		
	КонецЕсли;
	
	ПрефиксРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
	
	Для Каждого СтрокаТаблицы Из Объект.ДополнительныеРеквизиты Цикл
		ДополнительныйРеквизит=СтрокаТаблицы.ДополнительныйРеквизит;
		Если ДополнительныйРеквизит.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		//проверим, есть ли этот реквизит в выбранном виде документа
		Если ДопРеквизитыВидаДокумента.Найти(ДополнительныйРеквизит, "ДополнительныйРеквизит")=Неопределено Тогда
			//в виде документа нет этого доп. реквизита (возможно он остался в документе при переключении вида документа)
			Продолжить;
			
		КонецЕсли;	
		
		ЗначениеРеквизита=СтрокаТаблицы.ЗначениеРеквизита;
		
		ИмяРеквизита=ПрефиксРеквизита+ДополнительныйРеквизит.ИмяРеквизитаДляФункций;
		НазваниеТипаРеквизита=аДОКорпоративныеПроцессы.ПолучитьНаименованиеТипаРеквизита(ДополнительныйРеквизит);
		
		Если НЕ Элементы.Найти(ИмяРеквизита)=Неопределено Тогда
			//такой реквизит уже существует
			Продолжить;
		КонецЕсли;
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), РодительскийЭлемент);
		
		НаименованиеТипаРеквизита=аДОКорпоративныеПроцессы.ПолучитьНаименованиеТипаРеквизита(ДополнительныйРеквизит);
		
		Если ДополнительныйРеквизит.ТипРеквизита=Справочники.аДокументооборотСписокМетаданных.Булево Тогда
			//флажок
			Элемент.Вид=ВидПоляФормы.ПолеВвода;
			Элемент.ВыбиратьТип=Ложь;
			
		Иначе	
			//поле ввода
			Элемент.Вид=ВидПоляФормы.ПолеВвода;
			Элемент.ВыбиратьТип=Ложь;
			Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Лево;	
			Элемент.АвтоМаксимальнаяШирина=Ложь;
			
			Если ДополнительныйРеквизит.ТипРеквизита.РеквизитДлина>80
				И ДополнительныйРеквизит.ТипРеквизита.Родитель=Справочники.аДокументооборотСписокМетаданных.Строки 
				Тогда
				Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Верх;
				Элемент.МногострочныйРежим=Истина;
				
			Иначе
				Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Лево;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент.Вид=ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным=ИмяРеквизита; //привяжем в реквизиту
		Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Лево;
		
		Если ДополнительныйРеквизит.ТипРеквизита.Родитель=Справочники.аДокументооборотСписокМетаданных.Числа 
			ИЛИ ДополнительныйРеквизит.ТипРеквизита=Справочники.аДокументооборотСписокМетаданных.Дата 
			Тогда
			Элемент.КнопкаРегулирования=Истина;
			Элемент.РастягиватьПоГоризонтали=Ложь;
			
		КонецЕсли;
		
		Если НаименованиеТипаРеквизита="Дата" Тогда
			Элемент.КнопкаВыбора=Истина;
			Элемент.РастягиватьПоГоризонтали=Ложь;
			
		КонецЕсли;
		
		Если ДополнительныйРеквизит.Системный Тогда
			Элемент.Видимость=Ложь;
		Иначе
			
			Если ДополнительныйРеквизит.ТипРеквизита.Родитель=Справочники.аДокументооборотСписокМетаданных.Числа Тогда
				Элемент.Ширина=16;
				
			ИначеЕсли ДополнительныйРеквизит.ТипРеквизита=Справочники.аДокументооборотСписокМетаданных.Дата Тогда
				Элемент.Ширина=16;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//подключим необходимые обработчики
		
		Если НаименованиеТипаРеквизита="СправочникСсылка.аДокументооборотСсылкиНаВнешниеОбъекты" Тогда
			Элемент.УстановитьДействие("Открытие", "Подключаемый_ОткрытьВнешнююСсылкуДополнительногоРеквизита");
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораВнешнейСсылкиДополнительногоРеквизита");
			
		ИначеЕсли НаименованиеТипаРеквизита="СправочникСсылка.ЗначенияСвойствОбъектов" Тогда
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораЗначенияСвойстваОбъекта");
			Элемент.УстановитьДействие("АвтоПодбор", "Подключаемый_ЗначениеПоУмолчаниюАвтоПодборСвойстваОбъекта");
			Элемент.УстановитьДействие("ОкончаниеВводаТекста", "Подключаемый_ЗначениеПоУмолчаниюОкончаниеВводаТекстаСвойстваОбъекта");
			
		ИначеЕсли НаименованиеТипаРеквизита="СправочникСсылка.Файлы" Тогда
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораФайлы");
			Элемент.КнопкаСоздания=Ложь;
			Элемент.ИсторияВыбораПриВводе=ИсторияВыбораПриВводе.НеИспользовать;
		КонецЕсли;
		
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_РеквизитПриИзменении");
		
		Если НазваниеТипаРеквизита="Дата" ИЛИ НазваниеТипаРеквизита="Число" Тогда
			Элемент.КнопкаРегулирования=Истина;
		Иначе
			Элемент.КнопкаРегулирования=Неопределено;
		КонецЕсли;
		
		Если НазваниеТипаРеквизита="Дата" Тогда
			Элемент.КнопкаВыбора=Истина;
		Иначе
			Элемент.КнопкаВыбора=Неопределено;
		КонецЕсли;
		
		//установим значение реквизиту
		ЭтаФорма[ИмяРеквизита]=ЗначениеРеквизита;
		
	КонецЦикла;
	
КонецПроцедуры




&НаКлиенте
Процедура Подключаемый_ЗначениеПоУмолчаниюАвтоПодборСвойстваОбъекта(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;
	
	ПрефиксРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
	ИмяРеквизита=СтрЗаменить(Элемент.Имя, ПрефиксРеквизита, "");
	
	ДополнительныйРеквизит=НайтиРеквизитДокументаПоИмени(ИмяРеквизита);
	Если ДополнительныйРеквизит=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	НайденноеЗначение=аДООбщееСервер.ПолучитьЗначениеРеквизитаСвойствПоНаименованию(ДополнительныйРеквизит, Текст); 
	
	Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
		ДанныеВыбора=НайденноеЗначение;
		ЭтаФорма[Элемент.Имя]=НайденноеЗначение;     
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеПоУмолчаниюОкончаниеВводаТекстаСвойстваОбъекта(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ПрефиксРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
	ИмяРеквизита=СтрЗаменить(Элемент.Имя, ПрефиксРеквизита, "");
	
	ДополнительныйРеквизит=НайтиРеквизитДокументаПоИмени(ИмяРеквизита);
	Если ДополнительныйРеквизит=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	НайденноеЗначение=аДООбщееСервер.ПолучитьЗначениеРеквизитаСвойствПоНаименованию(ДополнительныйРеквизит, Текст); 
	Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
		ДанныеВыбора=НайденноеЗначение;
		ЭтаФорма[Элемент.Имя]=НайденноеЗначение;
		
	Иначе
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
КонецПроцедуры

//Процедура подключается к элементу реквизита процесса на событие "Открытие"
&НаКлиенте
Процедура Подключаемый_ОткрытьВнешнююСсылкуДополнительногоРеквизита(Элемент, СтандартнаяОбработка)
	ЗначениеСсылки=ЭтаФорма[Элемент.Имя];
	Если ЗначениеСсылки=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;
	
	//откроем значение внешнего объекта
	//откроем внешний объект
	
	СтруктураСсылки=аДОРаботаСВнешнимиБазами.ПолучитьСтруктуруВнешнейСсылки(ЗначениеСсылки);
	
	Если СтруктураСсылки.ЭтоСсылкаНаОбъект Тогда
		//ссылка на объект
		
		НаименованиеВидаОбъекта=СокрЛП(СтруктураСсылки.ВидМетаданных);
		Если НаименованиеВидаОбъекта<>"Документы" И НаименованиеВидаОбъекта<>"Справочники" Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("en='You can open a document or a directory reference only.';ru='Внимание! Можно открыть только ссылку на документ или справочник.'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());
			Возврат;
			
		КонецЕсли;
		
		аДОРаботаСВнешнимиБазами.ОткрытьВнешнююСсылку(СтруктураСсылки, СтруктураСсылки.НомерКод, СтруктураСсылки.ДатаАктуальности);
		
	Иначе
		//ссылка на список объектов
		СтруктураОбъекта=аДООбщееСервер.ПолучитьСтруктуруВнешнегоОбъекта(СтруктураСсылки.ВнешниеМетаданные);
		аДОРаботаСВнешнимиБазами.ОткрытьВнешнийОбъект(СтруктураОбъекта, СтруктураСсылки.ВнешниеМетаданные);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиРеквизитДокументаПоИмени(ИмяРеквизита)
	Для Каждого СтрокаДопРеквизита Из Объект.ДополнительныеРеквизиты Цикл
		Если СтрокаДопРеквизита.ДополнительныйРеквизит.ИмяРеквизитаДляФункций=ИмяРеквизита Тогда
			Возврат СтрокаДопРеквизита.ДополнительныйРеквизит;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_НачалоВыбораЗначенияСвойстваОбъекта(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ПрефиксРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
	ИмяРеквизита=СтрЗаменить(Элемент.Имя, ПрефиксРеквизита, "");
	
	ДополнительныйРеквизит=НайтиРеквизитДокументаПоИмени(ИмяРеквизита);
	Если ДополнительныйРеквизит=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	//откроем форму с установленным отбором
	ПараметрыОтбора=Новый Структура("Владелец", ПолучитьСвязьРеквизитаСПВХ(ДополнительныйРеквизит));
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ВыбранноеЗначение = Неопределено;
	
	ОткрытьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Подключаемый_НачалоВыбораЗначенияСвойстваОбъектаЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбораЗначенияСвойстваОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[Элемент.Имя]=Результат;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСвязьРеквизитаСПВХ(РеквизитПроцесса)
	Возврат РеквизитПроцесса.ТипРеквизита.СвязьСПВХ;
	
КонецФункции

Функция СоздатьИмяДополнительногоРеквизитаРеквизита(ДополнительныйРеквизит)
	
	НаименованиеДопРеквизита=СтрЗаменить(ДополнительныйРеквизит.Наименование, " ", "_пр_");
	НаименованиеДопРеквизита=СтрЗаменить(НаименованиеДопРеквизита, ",", "_");
	НаименованиеДопРеквизита=СтрЗаменить(НаименованиеДопРеквизита, ".", "_");
	НаименованиеДопРеквизита=СтрЗаменить(НаименованиеДопРеквизита, "/", "_");
	НаименованиеДопРеквизита=СтрЗаменить(НаименованиеДопРеквизита, "\", "_");
	НаименованиеДопРеквизита=СтрЗаменить(НаименованиеДопРеквизита, "(", "_");
	НаименованиеДопРеквизита=СтрЗаменить(НаименованиеДопРеквизита, ")", "_");	
	НаименованиеДопРеквизита=СтрЗаменить(НаименованиеДопРеквизита, ":", "_");
	
	ПрефиксРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
	
	ИмяРеквизита=ПрефиксРеквизита+НРег(НаименованиеДопРеквизита);
	
	Возврат ИмяРеквизита;
	
КонецФункции

Процедура ЗарегистрироватьДокумент()
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда
		Объект.ДатаРегистрации=ТекущаяДата();
	КонецЕсли;
	
	Если Объект.СотрудникРегистратор.Пустая() Тогда
		Если РегистрироватьДокументАвтором Тогда
			Объект.СотрудникРегистратор=Объект.Автор;
		Иначе
			Объект.СотрудникРегистратор=ТекущийПользователь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда
		Объект.РегистрационныйНомер=Объект.Номер;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура НачальноеЗаполнениеДокумента()
	Если Объект.Автор.Пустая() Тогда
		Объект.Автор=ТекущийПользователь;
	КонецЕсли;
	
	Если МоментРегистрации="ПриСоздании" Тогда
		ЗарегистрироватьДокумент();
	КонецЕсли;
	
	Если Объект.КорпоративнаяПапка.Пустая() Тогда
		//проверим, указана ли корпоративная папка в виде документа
		Если ЗначениеЗаполнено(ВидДокумента) И ЗначениеЗаполнено(ВидДокумента.КорпоративнаяПапкаПоУмолчанию) Тогда
			Объект.КорпоративнаяПапка=ВидДокумента.КорпоративнаяПапкаПоУмолчанию;
		Иначе
			Объект.КорпоративнаяПапка=Справочники.аДокументооборотКорпоративныеПапки.Компания;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.МестоРегистрации.Пустая() Тогда
		//установим подразделение сотрудника регистратора
		Если ЗначениеЗаполнено(Объект.СотрудникРегистратор) Тогда
			СписокПодразделенийСотрудника=аДООбщееСервер.ПолучитьСписокПодразделенийСотрудника(Объект.СотрудникРегистратор);
			Если СписокПодразделенийСотрудника.Количество()>0 Тогда
				Объект.МестоРегистрации=СписокПодразделенийСотрудника[0].Значение;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если Объект.ГрифДоступа.Пустая() Тогда
		Объект.ГрифДоступа=Справочники.аДокументооборотГрифыДоступа.Стандартный;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидДокумента") Тогда
		//вид документа передается в отдельном параметре вручную
		Объект.ВидДокумента=Параметры.ВидДокумента;
		ВидДокумента=Объект.ВидДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидДокумента) И 
		(Параметры.Ключ.Пустая() И ЗначениеЗаполнено(ВидДокумента.СостояниеДляНовыхДокументов) И ВидДокумента.СостояниеДляНовыхДокументов<>СостояниеДокументаТекущее) 
		Тогда
		СостояниеДокументаТекущее=ВидДокумента.СостояниеДляНовыхДокументов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидДокумента) И ВидДокумента.ИспользоватьФорматированныйТекстВНовыхДокументах Тогда
		Объект.ТипОтображенияСодержания=1;
		УстановитьОтображениеСодержания();
		
	КонецЕсли;
	
	//проверим и очистим реквизиты, у которых есть связь с документом основанием
	Для Каждого СтрокаТЧ Из Объект.ДополнительныеРеквизиты Цикл
		ЗначениеРеквизита=СтрокаТЧ.ЗначениеРеквизита;
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеРеквизита)<>Тип("СправочникСсылка.Файлы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеРеквизита.ВладелецФайла<>Объект.Ссылка Тогда
			СтрокаТЧ.ЗначениеРеквизита=Справочники.Файлы.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКопиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНомерДокумента()
	
	СтруктураНомера=аДОРаботаСДокументами.СформироватьНомерДокумента(Объект, Ложь); //НомерЧисло, СтрокаНомера, ВидДокументаНумератора, ОрганизацияНумератора
	ОбновитьТаблицуНомера(СтруктураНомера);
	
	ИспользуемыйНумератор=СтруктураНомера.ФорматНумератора;
	
	Если СокрЛП(Объект.Номер)<>СокрЛП(СтруктураНомера.СтрокаНомера) Тогда
		Объект.Номер=СтруктураНомера.СтрокаНомера;
		НомерБылИзменен=Истина;
	КонецЕсли;
	
	Если (ПрисваиватьНомерПриСоздании И РегистрироватьПриСоздании) ИЛИ НЕ Параметры.Ключ.Пустая() Тогда
		//регистрировать при создании или документ уже был записан
		Объект.РегистрационныйНомер=СтруктураНомера.СтрокаНомера;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьНомерДокументаСервером(СохранитьЦифрыНомера=Ложь)
	
	СтруктураНомера=аДОРаботаСДокументами.СформироватьНомерДокумента(Объект, СохранитьЦифрыНомера); //НомерЧисло, СтрокаНомера, ВидДокументаНумератора, ОрганизацияНумератора
	ОбновитьТаблицуНомера(СтруктураНомера);
	
	ИспользуемыйНумератор=СтруктураНомера.ФорматНумератора;
	
	Если СокрЛП(Объект.Номер)<>СокрЛП(СтруктураНомера.СтрокаНомера) Тогда
		Объект.Номер=СтруктураНомера.СтрокаНомера;
		НомерБылИзменен=Истина;
	КонецЕсли;
	
	Объект.Номер=СтруктураНомера.СтрокаНомера;
	
	Возврат СтруктураНомера;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ВидДокументаЗаписан" И Параметр=ВидДокумента Тогда
		
		НастроитьФормуПоВидуДокумента(ВидДокумента);
		
		ЗаполнитьМенюДоступныхВидовБизнесПроцессов();
		
	ИначеЕсли ИмяСобытия="ЗаписанФайл" И Параметр.Владелец=Объект.Ссылка Тогда
		Если НЕ ЕстьВСпискеФайлов(Параметр.Файл) Тогда
			ОбновитьСсылкиНаФайлы();
		КонецЕсли;
		Элементы.СсылкиНаФайлы.Обновить();
		УстановитьЗаголовокФайлы();
		СсылкиНаФайлыПриАктивизацииСтроки(Неопределено);
		
	ИначеЕсли ИмяСобытия="СписокДокументовПодписан" Тогда
		//проверим нет ли нашего документа в списке параметров
		СписокОбъектов=Параметр;
		Если СписокОбъектов.НайтиПоЗначению(Объект.Ссылка)<>Неопределено Тогда
			//нашли документ в списке
			ЭтоПодпись=аДООбщееСервер.ПолучитьЗначениеРеквизитаОбъекта(Источник, "ПодписьДокументов");
			Если ЭтоПодпись Тогда
				УстановитьЗапретРедактированияФормы();
				ДокументПодписан=Истина;
				Состояние(НСтр("en='The document was signed ...';ru='Документ подписан...'"));
				
			Иначе
				УстановитьЗапретРедактированияФормы(Ложь);
				ДокументПодписан=Ложь;
				Состояние(НСтр("en='The document was unsigned ...';ru='Подпись снята...'"));
			КонецЕсли;		
			
			УстановитьОформлениеЭлементов();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия="ЗадачаИзменена" Тогда
		ОбновитьСписокЗадачСервером();
		Элементы.СписокЗадач.Обновить();
		
	ИначеЕсли ИмяСобытия="ИзменениеЗадачиКБП" Тогда
		ОбновитьСписокЗадачСервером();
		Элементы.СписокЗадач.Обновить();
		
	ИначеЕсли ИмяСобытия="аДокументооборотЗадача" Тогда
		ОбновитьСписокКорпоративныхЗадачСервером();
		//Элементы.СписокКорпоративныхЗадач.Обновить();
		
	ИначеЕсли ИмяСобытия="КорпоративныйБизнесПроцесс" И НЕ Параметры.Ключ.Пустая() Тогда
		//на всякий случай проверим не изменлось ли состояние нашего открытого документа
		СостояниеДокументаТекущееНовое=аДОРаботаСДокументами.ПрочитатьСостояниеДокумента(Объект.Ссылка);
		Если СостояниеДокументаТекущее<>СостояниеДокументаТекущееНовое Тогда
			СостояниеДокументаТекущее=СостояниеДокументаТекущееНовое;
			Состояние(НСтр("en='Status was set to ""';ru='Установлено состояние ""'")+СокрЛП(СостояниеДокументаТекущее)+НСтр("ru='""';"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьВСпискеФайлов(СсылкаНаФайл)
	Если Объект.СсылкиНаФайлы.НайтиСтроки(Новый Структура("Файл", СсылкаНаФайл)).Количество()>0 Тогда
		Возврат Истина; //ссылка есть в документе
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФайлыПредпросмотр(Команда)
	
	ФлагИспользоватьПредпросмотр=НЕ ФлагИспользоватьПредпросмотр;
	УстановитьПредпросмотр();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрыть(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ФайлыОткрытьЗавершение", ЭтотОбъект), НСтр("en='System needs to save the document. Save now?';ru='Для продолжения необходимо записать документ! Записать сейчас?'"), РежимДиалогаВопрос.ДаНет, 60,,НСтр("ru='► Корпоративный документооборот';en='► Corporate workflow'"));
		Возврат;
		
	КонецЕсли;
	
	//ФайлыОткрытьОкончаниеФрагмент();
	СтрокаФайла=Элементы.СсылкиНаФайлы.ТекущиеДанные;
	
	Если СтрокаФайла=Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='File was not specified for opening.';ru='Не указан файл документа для открытия.'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляОткрытия(СтрокаФайла.Файл, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	РаботаСФайламиКлиент.Открыть(ДанныеФайла);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	ФайлыОткрытьОкончаниеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьОкончаниеФрагмент()
	
	Перем СтрокаФайла;
	
	УстановитьКнопкуФайлОсновноеДействие("Открыть файл");
	
	СтрокаФайла=Элементы.СсылкиНаФайлы.ТекущиеДанные;
	
	Если СтрокаФайла=Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='File was not specified for opening.';ru='Не указан файл документа для открытия.'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	Если ДокументПодписан Тогда
		ОткрыватьФайлыДокументовДляПросмотра=Истина;
	КонецЕсли;
	
	Если ОткрыватьФайлыДокументовДляПросмотра Тогда
		//откроем для просмотра
		ОткрытьФайлДокумента(СтрокаФайла.Файл, Истина);
		Состояние("Файл открыт только для просмотра");
	Иначе
		Если РольЕсть_аДокументыРедактирование Тогда
			ОткрытьФайлДокумента(СтрокаФайла.Файл);
		Иначе
			ОткрытьФайлДокумента(СтрокаФайла.Файл, Истина);
			Состояние("Файл открыт только для просмотра");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьКнопкиЗакрытия();
	
	ТекущийФайлРедактирует=ПолучитьРедактирующегоФайл(СтрокаФайла.Файл);
	
КонецПроцедуры

Процедура УстановитьВидимостьКнопкиЗакрытия();
	КоличествоЗанятыхФайлов = РаботаСФайламиСлужебныйВызовСервера.ПолучитьКоличествоЗанятыхФайлов(Объект.Ссылка, ТекущийПользователь);
	
	ВидимостьКнопки=(КоличествоЗанятыхФайлов >0);
	
	Элементы.ФайлыДокументаФайлыЗакончитьРедактирование.Видимость=ВидимостьКнопки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДокумента(ВыбраннаяСтрока, ДляПросмотра=Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ДляПросмотра Тогда
		КакОткрывать = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
		
		Если КакОткрывать = "ОткрыватьКарточку" Тогда
			ПоказатьЗначение(Неопределено, ВыбраннаяСтрока);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ВыбраннаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	
	Если ДанныеФайла=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДляПросмотра Тогда
		Если НЕ ДанныеФайла.ЗаполнятьДанными Тогда
			//открытие обычного файла
			РаботаСФайламиКлиент.Открыть(ДанныеФайла);
		Иначе
			ПечатьКорпоративныхДокументов(Объект.Ссылка,  ВыбраннаяСтрока);		
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		//файл не занят для редактирования
		
		Если ДанныеФайла.ЗаполнятьДанными Тогда
			//это шаблон файла
			ПараметрыОткрытия=Новый Структура;
			ПараметрыОткрытия.Вставить("ДанныеФайла", ДанныеФайла);
			ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьФайлДокументаЗавершениеВопросаОШаблоне", ЭтотОбъект, ПараметрыОткрытия), НСтр("en='File will be created by the template. Do you want to continue?';ru='Файл будет сформирован на основании шаблона. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена,,,аОбщееКлиентПС.ЗаголовокДиалога());
			Возврат; //далее открываем если нужно в обработчике оповещения	
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытиеФайлаИзДокумента(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДокументаЗавершениеВопросаОШаблоне(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументПодписан Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла=Ложь;
	Иначе
		СпрашиватьРежимРедактированияПриОткрытииФайла = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().СпрашиватьРежимРедактированияПриОткрытииФайла;
	КонецЕсли;
	
	ДанныеФайла=ДополнительныеПараметры.ДанныеФайла;
	
	//если это не шаблон и пользователь может выбирать режим - откроем диалог выбора
	Если НЕ ДанныеФайла.ЗаполнятьДанными И СпрашиватьРежимРедактированияПриОткрытииФайла Тогда
		
		ПараметрыФормы=Новый Структура("ПоШаблону", ДанныеФайла.ЗаполнятьДанными);
		
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораРежимаОткрытия", ПараметрыФормы,,,,, 
		Новый ОписаниеОповещения("Оповещение_ЗакрытиеФормыОткрытьФайлДокументаЗавершениеВопросаОШаблоне", ЭтотОбъект, ДанныеФайла));		
		
	КонецЕсли;
	
	ОткрытиеФайлаИзДокумента(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗакрытиеФормыОткрытьФайлДокументаЗавершениеВопросаОШаблоне(РезультатЗакрытия, ДанныеФайла) Экспорт
	
	Если РезультатЗакрытия=Неопределено ИЛИ ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	БольшеНеСпрашивать = РезультатЗакрытия.БольшеНеСпрашивать;
	Если БольшеНеСпрашивать = Истина Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", Ложь);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	КакОткрывать = РезультатЗакрытия.КакОткрывать;
	Если КакОткрывать = 1 Тогда
		РаботаСФайламиКлиент.РедактироватьФайл(ДанныеФайла);
		ОповеститьОбИзменении(ДанныеФайла.Ссылка);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_ОкончаниеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	УстановитьВидимостьКнопкиЗакрытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФайлаИзДокумента(ДанныеФайла)
	
	Если НЕ ДанныеФайла.ЗаполнятьДанными Тогда
		//открытие не шаблона, а обычного файла		
		Обработчик = Новый ОписаниеОповещения("Обработчик_ОкончаниеРедактированияФайла", ЭтотОбъект);
		РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Обработчик, ДанныеФайла.Ссылка, ЭтаФорма.УникальныйИдентификатор);
		
	Иначе
		Если ЭтаФорма.Модифицированность Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытиеФайлаИзДокументаВопросОЗаписиЗавершение", ЭтотОбъект, Новый Структура("ДанныеФайла", ДанныеФайла)), НСтр("en='System needs to save the document. Do you want to continue?';ru='Для продолжения необходимо записать документ! Продолжить?'"), РежимДиалогаВопрос.ДаНет, 60,,НСтр("ru='► Корпоративный документооборот';en='► Corporate workflow'"));
			Возврат;
			
		КонецЕсли;
		
		ОткрытиеФайлаИзДокументаФрагмент(ДанныеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФайлаИзДокументаВопросОЗаписиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Попытка
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ОткрытиеФайлаИзДокументаФрагмент(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФайлаИзДокументаФрагмент(Знач ДанныеФайла)
	
	ПечатьКорпоративныхДокументов(Объект.Ссылка, ДанныеФайла.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредпросмотр()
	
	Если ПунктМенюПредпросмотрВиден Тогда
		ВидимостьПредпросмотраСКартинкой=ФлагИспользоватьПредпросмотр;
		ВидимостьПредпросмотраБезКартинки=НЕ ФлагИспользоватьПредпросмотр;
	Иначе
		ВидимостьПредпросмотраСКартинкой=Ложь;
		ВидимостьПредпросмотраБезКартинки=Ложь;
		//ФлагИспользоватьПредпросмотр=Ложь;
	КонецЕсли;
	
	Элементы.ФайлыДокументаФайлыПредпросмотр.Видимость=ВидимостьПредпросмотраБезКартинки;
	Элементы.ФайлыДокументаФайлыПредпросмотрСКартинкой.Видимость=ВидимостьПредпросмотраСКартинкой;
	
	Элементы.СсылкиНаФайлыКонтекстноеМенюФайлыПредпросмотр.Видимость=ВидимостьПредпросмотраБезКартинки ;
	Элементы.СсылкиНаФайлыКонтекстноеМенюФайлыПредпросмотрСКартинкой.Видимость=ВидимостьПредпросмотраСКартинкой ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредпросмотрНаСервере()
	
	Если ПунктМенюПредпросмотрВиден Тогда
		ВидимостьПредпросмотраСКартинкой=ФлагИспользоватьПредпросмотр;
		ВидимостьПредпросмотраБезКартинки=НЕ ФлагИспользоватьПредпросмотр;
	Иначе
		ВидимостьПредпросмотраСКартинкой=Ложь;
		ВидимостьПредпросмотраБезКартинки=Ложь;      
		ФлагИспользоватьПредпросмотр=Ложь;
	КонецЕсли;
	
	Элементы.ФайлыДокументаФайлыПредпросмотр.Видимость=ВидимостьПредпросмотраБезКартинки;
	Элементы.ФайлыДокументаФайлыПредпросмотрСКартинкой.Видимость=ВидимостьПредпросмотраСКартинкой;
	
	Элементы.СсылкиНаФайлыКонтекстноеМенюФайлыПредпросмотр.Видимость=ВидимостьПредпросмотраБезКартинки ;
	Элементы.СсылкиНаФайлыКонтекстноеМенюФайлыПредпросмотрСКартинкой.Видимость=ВидимостьПредпросмотраСКартинкой ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.Предпросмотр.Видимость=Ложь;
		ФлагИспользоватьПредпросмотр=Ложь;
		Элементы.ФайлыДокументаФайлыПредпросмотр.Видимость=Ложь;
	#Иначе	
		//Элементы.Предпросмотр.Видимость=Истина;
		//Элементы.ФайлыДокументаФайлыПредпросмотр.Видимость=Истина;
	#КонецЕсли 
	
	//проверим, можно ли открывать документ в режиме для редактирования
	РежимТолькоПросмотр=Ложь;
	
	КоличествоПользователей=СписокПользователей.Количество();
	
	Если КоличествоПользователей>0 Тогда
		Если КоличествоПользователей=1 Тогда
			ПервыйПользователь=СписокПользователей[0].Значение;
			ОткрытДляРедактирования=НЕ СписокПользователей[0].Пометка;
			ТекстСообщения=НСтр("ru='Документ уже открыт пользователем '; en='Document already opened by ';")+аДОПривилегированныеОперации.ПолучитьПредставлениеЗначения(ПервыйПользователь)+НСтр("en='. Opened in a read only mode.';ru='. Открыт в режиме только для просмотра.';");
			
		Иначе
			СтрокаПользователей="";
			ОткрытДляРедактирования=Ложь;
			Для Каждого ЭлементСписка Из СписокПользователей Цикл
				СтрокаПользователей=СтрокаПользователей+?(СтрокаПользователей="", "", ", ")+аДОПривилегированныеОперации.ПолучитьПредставлениеЗначения(ЭлементСписка.Значение);
				ОткрытДляРедактирования=?(ОткрытДляРедактирования, ОткрытДляРедактирования, НЕ ЭлементСписка.Пометка);
			КонецЦикла;
			ТекстСообщения=НСтр("ru='Документ уже открыт пользователями '; en='Document already opened by ';")+СтрокаПользователей+НСтр("en='.';ru='.'")+Символы.ПС+НСтр("ru='Открыт в режиме только для просмотра.';en='Open in a read only mode.';");
			
		КонецЕсли; //количество пользователей
		
		Если ОткрытДляРедактирования Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			РежимТолькоПросмотр=Истина;
			УстановитьЗапретРедактированияФормы();				
			
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		Если МожноПрисваиватьНомерДокумента Тогда
			УстановитьНомерДокумента();
		Иначе
			
		КонецЕсли;
	КонецЕсли;
	
	Если ФлагИспользоватьПредпросмотр=Неопределено Тогда
		ФлагИспользоватьПредпросмотр=Истина;
	КонецЕсли;
	
	УстановитьПредпросмотр();
	
	ПолеHTMLГотовКФормированию=Истина;
	
	Если ФлагПоказыватьДопРеквизитыВВидеСписка=Неопределено Тогда
		ФлагПоказыватьДопРеквизитыВВидеСписка=Ложь;
	КонецЕсли;
	
	УстановитьОтображениеСпискаДопРеквизитов();
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		аДОПривилегированныеОперации.ЗафиксироватьОткрытиеОбъекта(Объект.Ссылка, РежимТолькоПросмотр);
	КонецЕсли;
	
	ОбновитьСсылкиНаФайлы();
	
	//	Записать();
КонецПроцедуры

Процедура УстановитьКнопкуФайлОсновноеДействие(НазваниеКоманды)
	
	Если НазваниеКоманды=Неопределено Тогда
		НазваниеКоманды="Добавить";
	КонецЕсли;
	
	Если НазваниеКоманды="Добавить" Тогда
		КомандаИсточник=Элементы.ФайлыДокументаФайлыДобавить;
		Элементы.ФайлыДокументаФайлыЗакончитьРедактирование.Видимость=Ложь;
		ВидимостьЭлемента=Элементы["ФайлыДокументаФайлыДобавить"].Видимость;
		
	ИначеЕсли НазваниеКоманды="Открыть файл" Тогда
		КомандаИсточник=Элементы.ФайлыДокументаФайлыОткрыть;
		УстановитьВидимостьКнопкиЗакрытия();
		ВидимостьЭлемента=Элементы["ФайлыДокументаФайлыОткрыть"].Видимость;
		
	ИначеЕсли НазваниеКоманды="Сканировать" Тогда
		КомандаИсточник=Элементы.ФайлыДокументаФайлыСканировать;
		Элементы.ФайлыДокументаФайлыЗакончитьРедактирование.Видимость=Ложь;
		ВидимостьЭлемента=Элементы["ФайлыДокументаФайлыСканировать"].Видимость;
		
	ИначеЕсли НазваниеКоманды="Удалить" Тогда
		КомандаИсточник=Элементы.ФайлыДокументаФайлыУдалить;
		Элементы.ФайлыДокументаФайлыЗакончитьРедактирование.Видимость=Ложь;
		ВидимостьЭлемента=Элементы["ФайлыДокументаФайлыУдалить"].Видимость;
		
	ИначеЕсли НазваниеКоманды="Открыть карточку" Тогда
		КомандаИсточник=Элементы.СсылкиНаФайлыФайлыКарточка;
		Элементы.ФайлыДокументаФайлыЗакончитьРедактирование.Видимость=Ложь;
		ВидимостьЭлемента=Элементы["СсылкиНаФайлыФайлыКарточка"].Видимость;
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Элементы.ФайлыФайлыОсновноеДействие.Видимость=ВидимостьЭлемента;
	Если ВидимостьЭлемента Тогда 
		Элементы.ФайлыФайлыОсновноеДействие.Заголовок=КомандаИсточник.Заголовок;
		Элементы.ФайлыФайлыОсновноеДействие.ИмяКоманды=КомандаИсточник.ИмяКоманды;
		Элементы.ФайлыДействие.Отображение=ОтображениеКнопки.Картинка;
	Иначе
		Элементы.ФайлыДействие.Отображение=ОтображениеКнопки.КартинкаИТекст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыУдалить(Команда)
	
	СтрокаФайла=Элементы.СсылкиНаФайлы.ТекущиеДанные;
	
	СсылкиНаФайлыУдалить(СтрокаФайла, Ложь);
	
	Модифицированность=Истина;
	
	УстановитьКнопкуФайлОсновноеДействие("Удалить");
	
	УстановитьЗаголовокФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСканировать(Команда)
	
	ДоступнаКомандаСканировать = РаботаСФайламиСлужебныйКлиент.ДоступнаКомандаСканировать();
	
	Если НЕ ДоступнаКомандаСканировать Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Внимание. Настройка сканера не выполнена. Настройка выполняется в подсистеме ""Мои настройки"" ';")+Символы.ПС+НСтр("en='in the user on the ""Working with Files.""';ru='в параметрах пользователя на закладке ""Работа с файлами"".'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ФайлыСканироватьЗавершение", ЭтотОбъект), НСтр("en='Please save the document first. Save it now?';ru='Сначала запишите документ. Записать сейчас?'"), РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ПродолжитьСканирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСканироватьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
		
	Иначе
		Попытка
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		Исключение
			аДООбщееКлиент.СообщитьОбОшибке(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ПродолжитьСканирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСканирование()
	
	УстановитьКнопкуФайлОсновноеДействие("Сканировать");
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыВыполнения.Вставить("ФормаВладелец", ЭтаФорма);
	ПараметрыВыполнения.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", ФлагНеОткрыватьКарточкуПослеСозданияФайла);
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", Новый ОписаниеОповещения("ФайлДобавитьПослеДобавленияФайлаСДиска", ЭтотОбъект, ПараметрыВыполнения)); 
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьСоСканера(ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если БылНовым Тогда
		//установим факт просмотра для новых, у существующих факт устанавливается при открытии
		ЗафиксироватьПросмотрДокумента();
		
		Оповестить("СозданДокумент");
		
	КонецЕсли;
	
	Если НомерБылИзменен Тогда
		УстановитьИЗаписатьНомерДокументаСервером();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьПросмотрДокумента()
	//СсылкаНаДокумент=ЭтаФорма.РеквизитФормыВЗначение("Объект");
	аДОПривилегированныеОперации.ЗафиксироватьПросмотрОбъекта(Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРедактирующегоФайл(СсылкаНаФайл)
	Возврат СсылкаНаФайл.Редактирует;
КонецФункции

&НаКлиенте
Процедура ФайлыЗакончитьРедактирование(Команда)
	
	//СтрокаФайла=Элементы.ФайлыДокумента;
	СтрокаФайла=Элементы.СсылкиНаФайлы;
	Если СтрокаФайла.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаФайл=СтрокаФайла.ТекущиеДанные.Файл;
	
	Если СтрокаФайла.ТекущиеДанные=Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Unknown file to open.';ru='Не указан файл документа для открытия.'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	ФайлРедактируетПользователь=ПолучитьРедактирующегоФайл(СсылкаНаФайл);
	
	ХранитьВерсииФайла=аДООбщееСервер.ПолучитьЗначениеРеквизитаОбъекта(СсылкаНаФайл, "ХранитьВерсии");
	РедактируетТекущийПользователь=(ФайлРедактируетПользователь=ТекущийПользователь);
	
	Обработчик = Новый ОписаниеОповещения("Обработчик_ОкончаниеРедактированияФайла", ЭтотОбъект);
	
	РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(
	Обработчик,
	СсылкаНаФайл,
	ЭтаФорма.УникальныйИдентификатор,
	ХранитьВерсииФайла,
	РедактируетТекущийПользователь,
	ФайлРедактируетПользователь);
	
	////КомандыРаботыСФайламиКлиент.ЗакончитьРедактирование(
	//РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактирование(
	//	СсылкаНаФайл,
	//	ЭтаФорма.УникальныйИдентификатор,
	//	ХранитьВерсииФайла,
	//	РедактируетТекущийПользователь,
	//	ФайлРедактируетПользователь);
	//	
	ТекущийФайлРедактирует=ФайлРедактируетПользователь;
	
	Элементы.СсылкиНаФайлы.Обновить();
	
	УстановитьВидимостьКнопкиЗакрытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборВышестоящихДокументов(Команда)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
	ПараметрыФормы.Вставить("РежимАрхивныхДокументов", Ложь);
	
	ИмяФормыНавигатора=аДООбщееКлиент.ПолучитьИмяФормыНавигатора();
	ОткрытьФорму(ИмяФормыНавигатора, ПараметрыФормы, Элементы.ВышестоящиеОбъекты); 
КонецПроцедуры

&НаКлиенте
Процедура ПодборНижестоящихДокументов(Команда)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
	ПараметрыФормы.Вставить("РежимАрхивныхДокументов", Ложь);
	ОткрытьФорму("Документ.аДокументооборотКорпоративныйДокумент.ФормаВыбора", ПараметрыФормы, Элементы.НижестоящиеОбъекты); 
КонецПроцедуры

&НаКлиенте
Процедура ВышестоящиеОбъектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДобавитьВышестоящиеСвязи(ВыбранноеЗначение);
	Элементы.НижестоящиеОбъекты.Обновить();
	Элементы.ВышестоящиеОбъекты.Обновить();	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВышестоящиеСвязи(ВыбранноеЗначение)
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		//проверим, нет ли в регистре аналогичной записи для ЭлементМассива
		Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	аДокументооборотСвязиОбъектов.Объект2ВышеОбъекта1,
		|	аДокументооборотСвязиОбъектов.Объект2,
		|	аДокументооборотСвязиОбъектов.Объект1
		|ИЗ
		|	РегистрСведений.аДокументооборотСвязиОбъектов КАК аДокументооборотСвязиОбъектов
		|ГДЕ
		|	(аДокументооборотСвязиОбъектов.Объект1 = &Объект1
		|	И аДокументооборотСвязиОбъектов.Объект2 = &Объект2)
		|	ИЛИ (аДокументооборотСвязиОбъектов.Объект1 = &Объект2
		|	И аДокументооборотСвязиОбъектов.Объект2 = &Объект1)
		|");
		Запрос.УстановитьПараметр("Объект1", Объект.Ссылка);
		Запрос.УстановитьПараметр("Объект2", ЭлементМассива);
		Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
		Если Выборка.Следующий() Тогда
			Продолжить; //объекты уже есть в регистре
		КонецЕсли;
		
		//запишем в регистр ЭлементМассива
		РегСвязи=РегистрыСведений.аДокументооборотСвязиОбъектов.СоздатьНаборЗаписей();
		РегСвязи.Отбор.Объект1.Установить(ЭлементМассива);
		РегСвязи.Отбор.Объект2.Установить(Объект.Ссылка);
		РегСвязи.Прочитать();
		Если РегСвязи.Количество()>0 Тогда
			Продолжить; //уже есть запись
		КонецЕсли;
		
		НоваяЗапись=РегСвязи.Добавить();
		НоваяЗапись.Объект1=ЭлементМассива;
		НоваяЗапись.Объект2=Объект.Ссылка;
		РегСвязи.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НижестоящиеОбъектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДобавитьНижестоящиеСвязи(ВыбранноеЗначение);
	Элементы.НижестоящиеОбъекты.Обновить();
	Элементы.ВышестоящиеОбъекты.Обновить();
КонецПроцедуры

&НаСервере
Процедура ДобавитьНижестоящиеСвязи(ВыбранноеЗначение)
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		//проверим, нет ли в регистре аналогичной записи для ЭлементМассива
		Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	аДокументооборотСвязиОбъектов.Объект2ВышеОбъекта1,
		|	аДокументооборотСвязиОбъектов.Объект2,
		|	аДокументооборотСвязиОбъектов.Объект1
		|ИЗ
		|	РегистрСведений.аДокументооборотСвязиОбъектов КАК аДокументооборотСвязиОбъектов
		|ГДЕ
		|	(аДокументооборотСвязиОбъектов.Объект1 = &Объект1
		|	И аДокументооборотСвязиОбъектов.Объект2 = &Объект2)
		|	ИЛИ (аДокументооборотСвязиОбъектов.Объект1 = &Объект2
		|	И аДокументооборотСвязиОбъектов.Объект2 = &Объект1)
		|");
		Запрос.УстановитьПараметр("Объект1", ЭлементМассива);
		Запрос.УстановитьПараметр("Объект2", Объект.Ссылка);
		Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
		Если Выборка.Следующий() Тогда
			Продолжить; //объекты уже есть в регистре
		КонецЕсли;
		
		//запишем в регистр ЭлементМассива
		РегСвязи=РегистрыСведений.аДокументооборотСвязиОбъектов.СоздатьНаборЗаписей();
		РегСвязи.Отбор.Объект1.Установить(Объект.Ссылка);
		РегСвязи.Отбор.Объект2.Установить(ЭлементМассива);
		РегСвязи.Прочитать();
		Если РегСвязи.Количество()>0 Тогда
			Продолжить; //уже есть запись
		КонецЕсли;
		
		НоваяЗапись=РегСвязи.Добавить();
		НоваяЗапись.Объект1=Объект.Ссылка;
		НоваяЗапись.Объект2=ЭлементМассива;
		РегСвязи.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВышестоящиеОбъекты.Параметры.УстановитьЗначениеПараметра("ТекущийДокумент", Объект.Ссылка);
	НижестоящиеОбъекты.Параметры.УстановитьЗначениеПараметра("ТекущийДокумент", Объект.Ссылка);
	
	Элементы.СвязиСОбъектами.Доступность=Истина;	
	
	Если БылНовым ИЛИ БылМодифицирован Тогда
		ТребуетсяЗаписатьСообщение=Истина; //используется при закрытии формы
	КонецЕсли;
	
	СостояниеДокументаСейчас=аДОРаботаСДокументами.ПрочитатьСостояниеДокумента(Объект.Ссылка);
	Если БылНовым И ЗначениеЗаполнено(СостояниеДокументаСейчас) Тогда
		//состояние могло быть заполнено при старте бизнес-процесса
		//поэтому ни какие изменения не записываем
		
	ИначеЕсли (БылНовым ИЛИ СостояниеБылоИзмененоВручную) И (СостояниеДокументаПриОткрытии<>СостояниеДокументаТекущее) Тогда
		аДОРаботаСДокументами.ЗаписатьСостояниеДокумента(Объект.Ссылка, СостояниеДокументаТекущее);
		
	КонецЕсли;
	
	ВыполнитьОбработчикПослеЗаписи(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВышестоящиеОбъектыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПараметрыФормы = Новый Структура("НижестоящийДокумент, ВышестоящийДокумент", Объект.Ссылка, "");
	Отказ=Истина;
	
	ОткрытьФорму("РегистрСведений.аДокументооборотСвязиОбъектов.ФормаЗаписи", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ВышестоящиеОбъектыПередНачаломДобавленияЗавершение", ЭтотОбъект));	
	
КонецПроцедуры

&НаКлиенте
Процедура ВышестоящиеОбъектыПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Элементы.ВышестоящиеОбъекты.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура НижестоящиеОбъектыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПараметрыФормы = Новый Структура("НижестоящийДокумент, ВышестоящийДокумент", "", Объект.Ссылка);
	Отказ=Истина;
	
	ОткрытьФорму("РегистрСведений.аДокументооборотСвязиОбъектов.ФормаЗаписи", ПараметрыФормы,,,,, Новый ОписаниеОповещения("НижестоящиеОбъектыПередНачаломДобавленияЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НижестоящиеОбъектыПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.НижестоящиеОбъекты.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументПоШаблону(ВыбранноеЗначение, ИзменятьВидДокумента=Истина)
	
	ВидДокумента=ВыбранноеЗначение.ВидДокумента;
	Если ИзменятьВидДокумента Тогда
		Объект.ВидДокумента=ВидДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидДокумента) И ВидДокумента.ИспользоватьФорматированныйТекстВНовыхДокументах Тогда
		Объект.ТипОтображенияСодержания=1;
	Иначе
		Объект.ТипОтображенияСодержания=0;
	КонецЕсли;
	
	Если ВыбранноеЗначение.ТипСодержания=0 Тогда
		//обычный текст
		Объект.СодержаниеДокумента=ВыбранноеЗначение.СодержаниеДокумента;
		Объект.ТипОтображенияСодержания=0;
	Иначе
		//формитированный текст
		ФорматированныйТекстХранилище=ВыбранноеЗначение.ХранилищеФорматированногоДокумента.Получить();
		Если НЕ ФорматированныйТекстХранилище=Неопределено Тогда
			ФорматированныйТекстСодержания=ФорматированныйТекстХранилище;
			Объект.ТипОтображенияСодержания=1;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтображениеСодержания();
	
	Объект.НаименованиеДокумента=СокрЛП(Объект.НаименованиеДокумента)+" "+ВыбранноеЗначение.НаименованиеДокумента;	
	Объект.НоменклатураДел=ВыбранноеЗначение.НоменклатураДел;	
	
	Если ЗначениеЗаполнено(Объект.НоменклатураДел) И ЗначениеЗаполнено(Объект.НоменклатураДел.СрокХранения) Тогда
		Объект.ДатаОкончанияДействияДокумента=КонецДня(Объект.НоменклатураДел.СрокХранения);
	КонецЕсли;
	
	Объект.ТипДокумента=ВыбранноеЗначение.ТипДокумента;
	СостояниеДокументаТекущее=ВыбранноеЗначение.СостояниеДокумента;
	Объект.ВажностьДокумента=ВыбранноеЗначение.ВажностьДокумента;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.ГрифДоступа) Тогда
		Объект.ГрифДоступа=ВыбранноеЗначение.ГрифДоступа;
	КонецЕсли;
	
	НоменклатураДел=ПолучитьПолноеНаименование(Объект.НоменклатураДел);
	Объект.КорпоративнаяПапка=ВыбранноеЗначение.КорпоративнаяПапка;	
	КорпоративнаяПапка=ПолучитьПолноеНаименование(Объект.КорпоративнаяПапка);
	
	ЗаполнитьМенюДоступныхВидовБизнесПроцессов();
	
	Если НЕ ВыбранноеЗначение.Проект.Пустая() И Объект.Проекты.НайтиСтроки(Новый Структура("Проект", ВыбранноеЗначение.Проект)).Количество()=0 Тогда
		НоваяСтрока=Объект.Проекты.Добавить();
		НоваяСтрока.Проект=ВыбранноеЗначение.Проект;
	КонецЕсли;
	
	Если ВыбранноеЗначение.ДобавлятьОрганизациюИПодразделение=1 Тогда
		Объект.ОрганизацииПодразделения.Очистить();
	КонецЕсли;
	
	Если НЕ ВыбранноеЗначение.Организация.Пустая() И Объект.ОрганизацииПодразделения.НайтиСтроки(Новый Структура("Организация", ВыбранноеЗначение.Организация)).Количество()=0 Тогда
		//если организация в шаблоне указано и в списке заполненных организаций нет ни чего, то создаем новую строку
		НоваяСтрока=Объект.ОрганизацииПодразделения.Добавить();
		НоваяСтрока.Организация=ВыбранноеЗначение.Организация;
	КонецЕсли;
	
	Если НЕ ВыбранноеЗначение.Подразделение.Пустая() Тогда
		//посмотрим, нет ли уже в списке нужного подразделения, если нет, то добавим к организации с пустым подразделением
		Если Объект.ОрганизацииПодразделения.НайтиСтроки(Новый Структура("Подразделение", ВыбранноеЗначение.Подразделение)).Количество()=0 Тогда
			//в списке нет нашего подразделения, найдем организацию с пустым подразделением
			МассивСтрокОрганизаций=Объект.ОрганизацииПодразделения.НайтиСтроки(Новый Структура("Подразделение", Справочники.Подразделения.ПустаяСсылка()));
			Если МассивСтрокОрганизаций.Количество()=0 Тогда
				//нет организаций с пустым подразделением, придется создавать новую строку
				НоваяСтрока=Объект.ОрганизацииПодразделения.Добавить();
				НоваяСтрока.Подразделение=ВыбранноеЗначение.Подразделение;
			Иначе
				СтрокаОрганизации=МассивСтрокОрганизаций[0];
				СтрокаОрганизации.Подразделение=ВыбранноеЗначение.Подразделение;
			КонецЕсли;
			//Иначе //наше подразделение уже есть в списке, ни чего не делаем
		КонецЕсли;
	КонецЕсли;
	
	//заполним сотрудников
	Для Каждого СтрокаСотрудника Из ВыбранноеЗначение.Сотрудники Цикл
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("Пользователь, Примечание", СтрокаСотрудника.Пользователь, СтрокаСотрудника.Примечание)).Количество()=0 Тогда
			НоваяСтрока=Объект.Сотрудники.Добавить();
			НоваяСтрока.Пользователь=СтрокаСотрудника.Пользователь;
			НоваяСтрока.Примечание=СтрокаСотрудника.Примечание;
		КонецЕсли;
	КонецЦикла;
	
	//заполним получателей
	Для Каждого СтрокаСотрудника Из ВыбранноеЗначение.Получатели Цикл
		Если Объект.СписокПолучателей.НайтиСтроки(Новый Структура("Получатель, Примечание", СтрокаСотрудника.Пользователь, СтрокаСотрудника.Примечание)).Количество()=0 Тогда
			НоваяСтрока=Объект.СписокПолучателей.Добавить();
			НоваяСтрока.Получатель=СтрокаСотрудника.Пользователь;
			НоваяСтрока.Примечание=СтрокаСотрудника.Примечание;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.СписокПолучателей.Количество()>0 Тогда
		Объект.ПрисутствуютПолучатели=Истина;
		Элементы.СписокПолучателей1.Видимость=Истина;
	КонецЕсли;
	
	Если НЕ ВыбранноеЗначение.Контрагент.Пустая() Тогда
		НоваяСтрока=Объект.КонтрагентыДоговоры.Добавить();
		НоваяСтрока.Контрагент=ВыбранноеЗначение.Контрагент;
		НоваяСтрока.ДоговорКонтрагента=ПолучитьОсновнойДоговорКонтрагента(ВыбранноеЗначение.Контрагент);
	КонецЕсли;
	
	//заполним список шаблонов
	Для Каждого СтрокаФайла Из ВыбранноеЗначение.ШаблоныФайлов Цикл
		Если Объект.СсылкиНаФайлы.НайтиСтроки(Новый Структура("Файл", СтрокаФайла.ШаблонФайла)).Количество()=0 Тогда
			НоваяСтрока=Объект.СсылкиНаФайлы.Добавить();
			НоваяСтрока.Файл=СтрокаФайла.ШаблонФайла;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.Автор) Тогда
		Объект.Автор=ВыбранноеЗначение.Автор;	
		Если НЕ ЗначениеЗаполнено(Объект.СотрудникРегистратор) Тогда
			//регистратор не указан, заполним его
			Если РегистрироватьДокументАвтором Тогда
				Объект.СотрудникРегистратор=Объект.Автор;
			Иначе
				Объект.СотрудникРегистратор=ТекущийПользователь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.МестоХранения) Тогда
		Объект.МестоХранения=ВыбранноеЗначение.МестоХранения;
		Объект.МестоХраненияДатаПоступления=ТекущаяДата();
		МестоХранения=ПолучитьПолноеНаименование(Объект.МестоХранения);
		
	КонецЕсли;
	
	//заполним действия по документу
	Объект.ДействияПослеОкончанияСрока=ВыбранноеЗначение.ДействияПослеОкончанияСрока;
	Если ЗначениеЗаполнено(ВыбранноеЗначение.ДатаОкончанияДействияДокумента) Тогда
		Объект.ДатаОкончанияДействияДокумента=ВыбранноеЗначение.ДатаОкончанияДействияДокумента;
	КонецЕсли;
	Объект.СозданиеБизнесПроцессов.Загрузить(ВыбранноеЗначение.СозданиеБизнесПроцессов.Выгрузить());
	
	Объект.МестоРегистрации=ВыбранноеЗначение.МестоРегистрации;
	
	УстановитьОтображениеДействийПослеОкончанияСрока();
	
	Если МожноПрисваиватьНомерДокумента Тогда
		УстановитьНомерДокументаСервером();
	КонецЕсли;
	
	ЗаполнитьОсновныеРеквизитыПоТабличнымЧастям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПолучатели(Команда)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.СписокПолучателей1); 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		Если Объект.СписокПолучателей.НайтиСтроки(Новый Структура("Получатель", ЭлементМассива)).Количество()>0 Тогда
			Продолжить; //сотрудник уже в списке
		КонецЕсли;
		НоваяСтрока=Объект.СписокПолучателей.Добавить();
		НоваяСтрока.Получатель=ЭлементМассива;
	КонецЦикла;
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ПередЗакрытием1(Отказ, СтандартнаяОбработка);
КонецПроцедуры



&НаКлиенте
Процедура ПередЗакрытием1(Отказ, СтандартнаяОбработка)
	
	ЗаписатьНастройкиФормы();
	
	Если Модифицированность Тогда
		
		Если НЕ СостояниеОбъекта.ИдетЗакрытиеПоРезультатамВопроса Тогда
			//зададим вопрос
			СостояниеОбъекта.ИдетЗакрытиеПоРезультатамВопроса=Истина; 
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("en='Document has been changed. Do you want to save changes?';ru='Документ был изменен. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена,,,аОбщееКлиентПС.ЗаголовокДиалога());
			
			//пока отменим закрытие, так как решение будет принято по результатам ответа пользователя на вопрос
			Отказ=Истина;
			СтандартнаяОбработка=Ложь;
			
			Возврат;
		Иначе
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопросаЗаписатьДокумент, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопросаЗаписатьДокумент=КодВозвратаДиалога.Нет Тогда
		Модифицированность=Ложь; //что бы избежать второго вопроса от платформы
		ЭтаФорма.Закрыть();
		
	ИначеЕсли РезультатВопросаЗаписатьДокумент=КодВозвратаДиалога.Да Тогда
		Модифицированность=Ложь;
		ПоказатьЗанятыеФайлыПриЗакрытииДокумента();
		
	ИначеЕсли РезультатВопросаЗаписатьДокумент=КодВозвратаДиалога.Отмена Тогда
		СостояниеОбъекта.ИдетЗакрытиеПоРезультатамВопроса=Ложь; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗанятыеФайлыПриЗакрытииДокумента()
	
	КоличествоЗанятыхФайлов = РаботаСФайламиСлужебныйВызовСервера.ПолучитьКоличествоЗанятыхФайлов(Объект.Ссылка, ТекущийПользователь);
	Если КоличествоЗанятыхФайлов > 0 Тогда 
		
		ПараметрыФормы = Новый Структура;	
		ПараметрыФормы.Вставить("СообщениеВопрос", 		НСтр("ru='Завершить работу с документом? Перед завершением работы необходимо закончить редактирование файлов.';en='Do you want to close the document(please close occuped files before close)?'"));
		ПараметрыФормы.Вставить("СообщениеЗаголовок", 	НСтр("ru='Следующие файлы документа заняты вами для редактирования:';en='The following files are occupied by you for editing:'"));
		ПараметрыФормы.Вставить("Заголовок", 			НСтр("ru='Закрытие документа';en='Shut'"));
		ПараметрыФормы.Вставить("Редактирует", 			ТекущийПользователь);
		
		ОткрытьФорму("Справочник.Файлы.Форма.СписокЗанятыхСВопросом", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ПоказатьЗанятыеФайлыПриЗакрытииДокументаЗавершение", ЭтотОбъект));
		
	Иначе
		ЗаписатьИЗакрытьФорму();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗанятыеФайлыПриЗакрытииДокументаЗавершение(РезультатВопросаЗанятыхФайлов, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопросаЗанятыхФайлов = КодВозвратаДиалога.Да Тогда 
		ЗаписатьИЗакрытьФорму();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписатьИЗакрытьФорму()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Модифицированность=Истина;		
		Возврат;
	КонецЕсли;
	
	Если НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиФормы()
	
	аДООбщееСервер.СохранитьНастройкуПользователя("Документ", "ИспользоватьПредпросмотр", ФлагИспользоватьПредпросмотр);
	аДООбщееСервер.СохранитьНастройкуПользователя("Документ", "ПоказыватьДопРеквизитыВВидеСписка", ФлагПоказыватьДопРеквизитыВВидеСписка);
	
	аДООбщееСервер.СохранитьНастройкуПользователя("Документ", "ФлагПоказыватьСписокКорпоративныхПроцессов", ФлагПоказыватьСписокКорпоративныхПроцессов);
	аДООбщееСервер.СохранитьНастройкуПользователя("Документ", "ФлагПоказыватьСписокКорпоративныхЗадач", ФлагПоказыватьСписокКорпоративныхЗадач);
	аДООбщееСервер.СохранитьНастройкуПользователя("Документ", "ФлагПредпросмотрРазмерКартинкиЧисло", ФлагПредпросмотрРазмерКартинкиЧисло);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВТабличнуюЧасть(СсылкаНаФайл)
	//проверим, добавляли ли такой файл ранее
	Если Объект.СсылкиНаФайлы.НайтиСтроки(Новый Структура("Файл", СсылкаНаФайл)).Количество()>0 Тогда
		Возврат; //файл найден
	КонецЕсли;
	
	НоваяСтрока=Объект.СсылкиНаФайлы.Добавить();
	НоваяСтрока.Файл=СсылкаНаФайл;
	
	//установим строку активной
	Элементы.СсылкиНаФайлы.ТекущаяСтрока=Объект.СсылкиНаФайлы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиНаФайлыУдалить(Элемент, Отказ)
	
	СсылкиНаФайлыПередУдалением(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыйФайл = ДополнительныеПараметры.УдаляемыйФайл;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если ТипЗнч(Элемент)=Тип("ДанныеФормыЭлементКоллекции") Тогда
		ИндексФайла=Элемент.НомерСтроки-1;
	Иначе
		ИндексФайла=Элемент.ТекущиеДанные.НомерСтроки-1;
	КонецЕсли;
	
	Если УстановитьПометкуУдаления(УдаляемыйФайл) Тогда
		Объект.СсылкиНаФайлы.Удалить(ИндексФайла);
		
	КонецЕсли;		
	
	Модифицированность=Истина;
	
	УстановитьКнопкуФайлОсновноеДействие("Удалить");
	
	УстановитьЗаголовокФайлы();
	
КонецПроцедуры

&НаСервере
Функция УстановитьПометкуУдаления(ФайлСсылка);
	
	Если ФайлСсылка.ВладелецФайла<>Объект.Ссылка Тогда
		Возврат Истина; //просто удаляем из списка, с самим шаблоном ни чего не делаем
	КонецЕсли;
	
	//пометим на удаление файл
	ФайлОбъект=ФайлСсылка.Ссылка.ПолучитьОбъект();
	Попытка
		ФайлОбъект.УстановитьПометкуУдаления(Истина, Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СсылкиНаФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьПеретаскиваемыйФайл(ФайлСДиска)
	
	Если ТипЗнч(ФайлСДиска)<>Тип("Файл") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//добавим файл в документ
	РежимСоздания=2; //1 - по шаблону, 2 - обычный файл, 3 - со сканера
	ПолныйПутьКФАйлу=ФайлСдиска.ПолноеИмя;
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыВыполнения.Вставить("ФормаВладелец", ЭтаФорма);
	ПараметрыВыполнения.Вставить("РежимСоздания", РежимСоздания);
	ПараметрыВыполнения.Вставить("ОткрыватьКарточкуПослеСоздания", НЕ ФлагНеОткрыватьКарточкуПослеСозданияФайла);
	
	// Помещение файла во временное хранилище.
	АдресВременногоХранилищаФайла = "";
	
	ПолноеИмяФайла=ФайлСДиска.ПолноеИмя;
	ИмяСоздания=ФайлСДиска.Имя;
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;
	ФайлыПомещены = ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор);
	Если НЕ ФайлыПомещены Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	//ФайлКлиента = Новый Файл(ПолноеИмяФайла);
	
	ОбщиеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	ИзвлекатьТекстыФайловНаКлиенте = НЕ ОбщиеНастройки.ИзвлекатьТекстыФайловНаСервере;
	Если ИзвлекатьТекстыФайловНаКлиенте Тогда
		АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
		ФайлСДиска.ПолноеИмя,
		ЭтаФорма.УникальныйИдентификатор);
	Иначе
		АдресВременногоХранилищаТекста = "";
	КонецЕсли;
	
	ВремяИзменения              = ФайлСДиска.ПолучитьВремяИзменения();
	ВремяИзмененияУниверсальное = ФайлСДиска.ПолучитьУниверсальноеВремяИзменения();
	
	// Создание карточки Файла в БД.
	Попытка
		ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(
		Объект.Ссылка, 
		ИмяСоздания,
		ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ФайлСДиска.Расширение),
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		ФайлСДиска.Размер(),
		АдресВременногоХранилищаФайла,
		АдресВременногоХранилищаТекста,
		Ложь,         // Это не Веб-клиент.
		Неопределено, // Пользователь.
		"",           // Комментарий.
		Истина);      // ЗаписатьВИсторию.
		ФайлДобавлен = Истина;
		ТекстОшибки="";
	Исключение
		ТекстОшибки = ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(ИнформацияОбОшибке());
	КонецПопытки;
	Состояние();
	
	Если ТекстОшибки <> "" Тогда
		аДООбщееКлиент.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Владелец", аДООбщееСервер.ПолучитьЗначениеРеквизитаОбъекта(ФайлСсылка, "ВладелецФайла"));
	ПараметрыОповещения.Вставить("Файл",     ФайлСсылка);
	ПараметрыОповещения.Вставить("Событие",  "СозданФайл");
	Оповестить("Запись_Файл", ПараметрыОповещения);
	
	ПоказатьОповещениеПользователя(
	НСтр("ru='Создание:';en='Created:'"),
	ПолучитьНавигационнуюСсылку(ФайлСсылка),
	ФайлСсылка,
	БиблиотекаКартинок.Информация32);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СсылкиНаФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппаНаименованиеПодпись.ТолькоПросмотр Тогда
		//изменение документа запрещено
		Возврат;
	КонецЕсли;
	
	Если ЭтоВебКлиент Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Сначала запишите документ");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("Массив") Тогда
		Для н=0 По ПараметрыПеретаскивания.Значение.Количество()-1 Цикл
			ДобавитьПеретаскиваемыйФайл(ПараметрыПеретаскивания.Значение[н]);
		КонецЦикла;
	Иначе
		ДобавитьПеретаскиваемыйФайл(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	ОбновитьСсылкиНаФайлы();	
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиНаФайлыПеретаскиваниеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПараметрыПеретаскивания = ДополнительныеПараметры.ПараметрыПеретаскивания;
	
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда			
		Возврат;
	КонецЕсли;
	Попытка
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	СсылкиНаФайлыПеретаскиваниеФрагмент(ПараметрыПеретаскивания);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиНаФайлыПеретаскиваниеФрагмент(Знач ПараметрыПеретаскивания)
	
	Перем ВладелецФайла, МассивИменФайлов, ФайлПринятый, ЭтоДрагДропФайловИзвне;
	
	Возврат;
	
	МассивИменФайлов = Новый Массив;
	ЭтоДрагДропФайловИзвне = Ложь;
	
	ВладелецФайла=Объект.Ссылка;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ПараметрыПеретаскивания.Значение.ПолноеИмя, ВладелецФайла, ЭтаФорма);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда	
		ЭтоДрагДропФайловИзвне = Истина;
		МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			ЭтоДрагДропФайловИзвне = Истина;
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				МассивИменФайлов.Добавить(ФайлПринятый.ПолноеИмя);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиНаФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Элементы.ФайлыДокументаФайлыДобавить.Видимость Тогда
		Отказ=Истина;
		Состояние("Добавление запрещено в настройке вида документов.");
		Возврат;
	КонецЕсли;
	
	Отказ=Истина;
	ФайлыДобавить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуПредпросмотра(ИмяВидимойСтраницы, СсылкаНаФайл)
	
	Если ИмяВидимойСтраницы="СтраницаИнформация" Тогда
		ОбновитьДанныеТекущегоФайла(СсылкаНаФайл);
		Элементы.СтраницаHTML.Видимость=Ложь;
		Элементы.СтраницаКартинка.Видимость=Ложь;
		Элементы.СтраницаИнформация.Видимость=Истина;
		
	ИначеЕсли ИмяВидимойСтраницы="СтраницаHTML" Тогда
		Элементы.СтраницаИнформация.Видимость=Ложь;
		Элементы.СтраницаКартинка.Видимость=Ложь;
		Элементы.СтраницаHTML.Видимость=Истина;
		
	ИначеЕсли ИмяВидимойСтраницы="СтраницаКартинка" Тогда
		Элементы.СтраницаИнформация.Видимость=Ложь;
		Элементы.СтраницаHTML.Видимость=Ложь;
		Элементы.СтраницаКартинка.Видимость=Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиНаФайлыПриАктивизацииСтроки(Элемент)
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	Если Элементы.СсылкиНаФайлы.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдетПроцессАктивизацииСтроки Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаФайл=Элементы.СсылкиНаФайлы.ТекущиеДанные.Файл;
	
	Если Найти(СокрЛП(СсылкаНаФайл), "<Объект не найден>")>0 Тогда
		Возврат;
		
	КонецЕсли;
	
	//получим данные файла
	Если НЕ ЗначениеЗаполнено(СсылкаНаФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла=РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляОткрытия(СсылкаНаФайл, , ЭтаФорма.УникальныйИдентификатор);
	
	Если МенюФайлыНастройкаВключена И (МенюФайлыАктивныйФайлШаблон<>ДанныеФайла.ЗаполнятьДанными)Тогда
		НастроитьМенюФайлы(СсылкаНаФайл);
		МенюФайлыАктивныйФайлШаблон=ДанныеФайла.ЗаполнятьДанными;
	КонецЕсли;
	
	Если НЕ ФлагИспользоватьПредпросмотр Тогда
		УстановитьСтраницуПредпросмотра("СтраницаИнформация", СсылкаНаФайл);
		Возврат;
		
	КонецЕсли;
	
	//определим по расширению что делать с файлом
	РасширениеФайла=ДанныеФайла.Расширение;
	
	ИдетПроцессАктивизацииСтроки=Истина;
	
	Если аДООбщееКлиентСерверПС.ПросмотрКакКартинка(РасширениеФайла) Тогда		
		УстановитьСтраницуПредпросмотра("СтраницаКартинка", СсылкаНаФайл);
		ПоказатьКартинку(ДанныеФайла);
		
	ИначеЕсли аДООбщееКлиентСерверПС.ПросмотрКакHTML(РасширениеФайла) Тогда
		УстановитьСтраницуПредпросмотра("СтраницаHTML", СсылкаНаФайл);
		ПолеHTMLГотовКФормированию=Ложь; //сброс в Истина после готовности документа
		ПоказатьHTML(ДанныеФайла);
		
	Иначе //не чем просматривать, установим страницу информции
		УстановитьСтраницуПредпросмотра("СтраницаИнформация", СсылкаНаФайл);
		
	КонецЕсли;	
	
	ИдетПроцессАктивизацииСтроки=Ложь;
	
КонецПроцедуры                                                       

&НаСервере
Процедура ОбновитьДанныеТекущегоФайла(СсылкаНаФайл)
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Файлы.Код КАК Код,
	|	Файлы.Автор КАК Автор,
	|	Файлы.ТекущаяВерсияАвтор КАК ТекущаяВерсияАвтор,
	|	Файлы.ТекущаяВерсияДатаСоздания КАК ТекущаяВерсияДатаСоздания,
	|	Файлы.ТекущаяВерсияНомерВерсии КАК ТекущаяВерсияНомерВерсии,
	|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение,
	|	Файлы.ТекущаяВерсияРазмер КАК ТекущаяВерсияРазмер,
	|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
	|	Файлы.Редактирует КАК Редактирует,
	|	Файлы.Описание КАК Описание,
	|	Файлы.аЗаполнятьДанными КАК ЗаполнятьДанными,
	|	Файлы.ТекущаяВерсия.ТипХраненияФайла КАК ТипХраненияФайла,
	|	Файлы.ДатаСоздания КАК ДатаСоздания,
	|	Файлы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Ссылка = &ФайлСсылка");
	Запрос.УстановитьПараметр("ФайлСсылка", СсылкаНаФайл);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	СтруктураФайла=Новый Структура;
	
	Если Выборка.Следующий() Тогда
		ТекущийФайлКод=Выборка.Код;
		ТекущийФайлАвтор=Выборка.Автор;
		ТекущийФайлВерсияАвтор=Выборка.ТекущаяВерсияАвтор;
		ТекущийФайлВерсияДатаСоздания=Выборка.ТекущаяВерсияДатаСоздания;
		ТекущийФайлВерсияНомер=Выборка.ТекущаяВерсияНомерВерсии;
		ТекущийФайлВерсияРасширение=Выборка.ТекущаяВерсияРасширение;
		ТекущийФайлВерсияРазмер=Выборка.ТекущаяВерсияРазмер;
		ТекущийФайлРедактирует=Выборка.Редактирует;
		ТекущийФайлОписание=Выборка.Описание;
		ТекущийФайлВерсияТипХраненияФайла=Выборка.ТипХраненияФайла;
		ТекущийФайлДатаСоздания=Выборка.ДатаСоздания;
		ТекущийФайлХранитьВерсии=Выборка.ХранитьВерсии;
		ТекущийФайлНаименование=Выборка.Наименование;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКартинку(ДанныеФайла)
	
	РасширениеПодключено=ПодключитьРасширениеРаботыСФайлами();
	Если НЕ РасширениеПодключено Тогда
		Состояние(НСтр("en='Not connected with the extension files.';ru='Не подключено расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	ВерсияФайла=ДанныеФайла.ТекущаяВерсия;
	СтрокаАдресаКартинкиПредпросмотра=РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияФайла, УникальныйИдентификатор);
	
	ФлагПредпросмотрРазмерКартинкиЧислоПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьHTML(ДанныеФайла)
	
	РасширениеПодключено=ПодключитьРасширениеРаботыСФайлами();
	Если НЕ РасширениеПодключено Тогда
		Состояние(НСтр("en='File extension not installed.';ru='Не подключено расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	ПутьВЛокальномКаталоге="";
	РаботаСФайламиСлужебныйКлиент.ПолучитьФайлВерсииВРабочийКаталог(Новый ОписаниеОповещения("Оповещение_ФайлПолученВЛокальныйКаталог", ЭтотОбъект), ДанныеФайла, ПутьВЛокальномКаталоге);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ФайлПолученВЛокальныйКаталог(Результат, Параметры) Экспорт
	Если НЕ Результат.ФайлПолучен Тогда 
		Возврат;
	КонецЕсли;
	
	ПутьВЛокальномКаталоге=Результат.ПолноеИмяФайла;
	
	Если ПредпросмотрФайловHTML<>ПутьВЛокальномКаталоге ИЛИ ИсточникПоляHTML<>ПутьВЛокальномКаталоге Тогда
		ПредпросмотрФайловHTML=ПутьВЛокальномКаталоге;
		//ПредпросмотрФайловHTML="<html><body><iframe style='width:100%; height:100%;' frameborder='0' src='"+ПутьВЛокальномКаталоге+"'></iframe></body></html>";
		//ИсточникПоляHTML=ПутьВЛокальномКаталоге;
	КонецЕсли;
	
	Если ЭтоРежимОтладки Тогда
		Элементы.ДекорацияПредпросмотрПутьКФайлу.Заголовок=ПутьВЛокальномКаталоге;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрФайловHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ФайлыОткрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьКарточку(Команда)
	Если Элементы.СсылкиНаФайлы.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаФайл=Элементы.СсылкиНаФайлы.ТекущиеДанные.Файл;
	
	ПоказатьЗначение(Неопределено, СсылкаНаФайл);
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВЖурналСобытийФормированиеПечатнойФормы(ТекстСообщения, ДокументСсылка, ФайлСсылка)
	
	ЗаписьЖурналаРегистрации("Формирование по шаблону.", УровеньЖурналаРегистрации.Информация, ДокументСсылка, ФайлСсылка, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКорпоративныхДокументов(ДокументСсылка, ФайлСсылка) Экспорт
	
	ТекстСообщения = НСтр("en='Forming the print form ...';ru='Выполняется формирование печатной формы...'");
	Состояние(ТекстСообщения);
	
	//получим данные
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Формирование печатной формы начато. Получение данных макета.", ДокументСсылка, ФайлСсылка);
	
	МакетИДанныеОбъекта=ПолучитьМакетИДанныеДокумента(ФайлСсылка);
	
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Вывод макета.", ДокументСсылка, ФайлСсылка);
	
	аДОРаботаСФайламиКлиент.НапечататьКорпоративныйДокумент(ДокументСсылка, ФайлСсылка, МакетИДанныеОбъекта, МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
	
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Формирование закончено.", ДокументСсылка, ФайлСсылка);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетИДанныеДокумента(ФайлСсылка)
	ДокументСсылка=ЭтаФорма.РеквизитФормыВЗначение("Объект");
	МакетИДанныеОбъекта=Документы.аДокументооборотКорпоративныйДокумент.ПолучитьДанныеПечати(ДокументСсылка, ФайлСсылка);
	МакетИДанныеОбъекта.Вставить("ЛокальныйКаталогФайловПечати", УправлениеПечатью.ПолучитьЛокальныйКаталогФайловПечати());
	Возврат МакетИДанныеОбъекта;
КонецФункции

&НаКлиенте
Процедура СсылкиНаФайлыПередУдалением(Элемент, Отказ)
	
	Если Элемент=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//проверим, доступно ли действие в контекстном меню
	Если НЕ Элементы.ФайлыДокументаФайлыУдалить.Видимость Тогда
		Отказ=Истина;
		Состояние("Удаление запрещено в настройке вида документов.");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элемент)=Тип("ДанныеФормыЭлементКоллекции") Тогда
		УдаляемыйФайл=Элемент.Файл;
	Иначе
		УдаляемыйФайл=Элемент.ТекущиеДанные.Файл;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьФайлДокументаЗавершение", ЭтотОбъект, Новый Структура("УдаляемыйФайл, Элемент", УдаляемыйФайл, Элемент)), НСтр("en='Do you want to delete the file ""';ru='Удалить файл ""'")+СокрЛП(УдаляемыйФайл)+"""?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, аОбщееКлиентПС.ЗаголовокДиалога());
	
	Отказ=Истина; //удаление будет произведено в обработчике
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Объект.Номер) Тогда
		УстановитьНомерДокумента();
	КонецЕсли;
	
	ОбновитьРегистрационныйНомер();
	
	Если Объект.СотрудникРегистратор.Пустая() Тогда
		Если РегистрироватьДокументАвтором Тогда
			Объект.СотрудникРегистратор=Объект.Автор;
		Иначе
			Объект.СотрудникРегистратор=ТекущийПользователь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда
		Объект.ДатаРегистрации=ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.МестоРегистрации) И ЗначениеЗаполнено(Объект.СотрудникРегистратор) Тогда
		Объект.МестоРегистрации=аДООбщееСервер.ПолучитьСписокПодразделенийСотрудника(Объект.СотрудникРегистратор, Истина)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерПриИзменении(Элемент)
	
	Если Объект.СотрудникРегистратор.Пустая() Тогда
		Если РегистрироватьДокументАвтором Тогда
			Объект.СотрудникРегистратор=Объект.Автор;
		Иначе
			Объект.СотрудникРегистратор=ТекущийПользователь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда
		Объект.ДатаРегистрации=ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРегистрационныйНомер()
	
	Если СокрЛП(Объект.Номер)<>СокрЛП(Объект.РегистрационныйНомер) Тогда
		Объект.РегистрационныйНомер=Объект.Номер;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииЗаполнить(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ОрганизацииЗаполнитьЗавершение", ЭтотОбъект), НСтр("en='Before filling in the list will be cleared. Do you want to continue?';ru='Перед заполнением список будет очищен! Продолжить?'"), РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Объект.ОрганизацииПодразделения.Количество()>0 И РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокОрганизаций();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОрганизаций()
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПометкаУдаления = ЛОЖЬ");
	Объект.ОрганизацииПодразделения.Загрузить(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой));
КонецПроцедуры

&НаКлиенте                             
Процедура СсылкиНаФайлыОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	УстановитьЗаголовокФайлы();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСсылкиНаФайлы()
	
	ДокументСсылка=ЭтаФорма.РеквизитФормыВЗначение("Объект").Ссылка;
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ВладелецФайла", ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокФайловВРеквизитахДокумента=Новый СписокЗначений;
	
	Для Каждого ЭлементРеквизита Из СписокДополнительныхРеквизитов Цикл
		ИмяРеквизита=ЭлементРеквизита.Значение;
		Попытка
			ЗначениеРеквизита=ЭтаФорма[ИмяРеквизита];
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(ЗначениеРеквизита)=Тип("СправочникСсылка.Файлы") 
			И ЗначениеРеквизита.ВладелецФайла=ДокументСсылка
			Тогда
			СписокФайловВРеквизитахДокумента.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	СписокШаблонов=Новый СписокЗначений;
	Для Каждого СтрокаФайла Из Объект.СсылкиНаФайлы Цикл
		ФайлСтроки=СтрокаФайла.Файл;
		Если ФайлСтроки.ВладелецФайла=Справочники.ПапкиФайлов.Шаблоны Тогда
			Если СписокШаблонов.НайтиПоЗначению(ФайлСтроки)=Неопределено Тогда
				СписокШаблонов.Добавить(ФайлСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Объект.СсылкиНаФайлы.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		ФайлДокумента=Выборка.Ссылка;
		Если СписокФайловВРеквизитахДокумента.НайтиПоЗначению(ФайлДокумента)<>Неопределено Тогда
			//данный файл уже есть в реквизитах
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=Объект.СсылкиНаФайлы.Добавить();
		НоваяСтрока.Файл=ФайлДокумента;
		
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокШаблонов Цикл
		НоваяСтрока=Объект.СсылкиНаФайлы.Добавить();
		НоваяСтрока.Файл=ЭлементСписка.Значение;
	КонецЦикла;
	
	Модифицированность=Истина;
	
	
	МодЛожь();
	
КонецПроцедуры

&НаСервере
Процедура МодЛожь()
	Модифицированность=Ложь;
КонецПроцедуры


&НаКлиенте
Процедура МестоХраненияСкопировать(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.МестоХранения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Not indicated the current storage location.';ru='Не указано текущее место хранения.'"), ,НСтр("ru='МестоХранения';en='MestoHraneniya'"),НСтр("ru='ЭтаФорма';en='EtaForma'"));
		Возврат;                                                                                                          
	КонецЕсли;
	
	//Если Объект.ПредыдущиеМестаХраненияДокумента.НайтиСтроки(Новый Структура("МестоХранения", Объект.МестоХранения)).Количество()>0 Тогда
	//	Возврат; //место хранения уже в списке
	//КонецЕсли;
	
	НоваяСтрока=Объект.ПредыдущиеМестаХраненияДокумента.Добавить();
	НоваяСтрока.МестоХраненияСтрока=аДООбщееСервер.ПолучитьПолноеНаименованиеЭлементаСправочника(Объект.МестоХранения);
	НоваяСтрока.МестоХранения=Объект.МестоХранения;
	НоваяСтрока.ДатаПоступления=Объект.МестоХраненияДатаПоступления;
	НоваяСтрока.ДатаВыбытия=ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияДокументаПриИзменении(Элемент)
	МестоХранения=ПолучитьПолноеНаименование(Объект.МестоХранения);
	
	Объект.МестоХраненияДатаПоступления=ТекущаяДата();
	Модифицированность=Истина;
	
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Changed the date of receipt of the document to Storage';ru='Изменена дата поступления в место хранения документа'"), Объект.МестоХраненияДатаПоступления ,НСтр("ru='МестоХраненияДатаПоступления';en='МестоХраненияДатаПоступления'"),НСтр("ru='Объект';en='Object'"));
	Состояние(НСтр("en='Changed the date of receipt of the document to Storage';ru='Изменена дата поступления в место хранения документа'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьДляПросмотра(Команда)
	УстановитьКнопкуФайлОсновноеДействие("Открыть файл");
	//аДООбщееСервер.СохранитьНастройкуПользователя("Документ", "ПоследняяФайловаяОперация", "Открыть файл");	
	
	СтрокаФайла=Элементы.СсылкиНаФайлы.ТекущиеДанные;
	Если СтрокаФайла=Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Unknown document file to open.';ru='Не указан файл документа для открытия.'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ОткрытьФайлДокумента(СтрокаФайла.Файл, Истина);
	
	УстановитьВидимостьКнопкиЗакрытия();
	
КонецПроцедуры

&НаКлиенте
Процедура КорпоративнаяПапкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Истина, Ложь, Истина);
	ОткрытьФорму("Справочник.аДокументооборотКорпоративныеПапки.ФормаВыбора", ПараметрыФормы, Элементы.КорпоративнаяПапка); 
	
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КорпоративнаяПапкаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ПоказатьЗначение(Неопределено, Объект.КорпоративнаяПапка);
КонецПроцедуры

&НаКлиенте
Процедура КорпоративнаяПапкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.КорпоративнаяПапка=ВыбранноеЗначение;
	КорпоративнаяПапка=ПолучитьПолноеНаименование(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура КорпоративнаяПапкаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	//отменим введеный вручную текст
	
	СтандартнаяОбработка=Ложь;
	Текст=ПолучитьПолноеНаименование(Объект.КорпоративнаяПапка);
	КорпоративнаяПапка=Текст;
	
	Состояние(НСтр("en='Selecting a folder made from a corporate directory.';ru='Выбор корпоративной папки осуществляется из справочника.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КорпоративнаяПапкаПриИзменении(Элемент)
	КорпоративнаяПапка=ПолучитьПолноеНаименование(Объект.КорпоративнаяПапка);
КонецПроцедуры

&НаСервере
Функция ПолучитьПолноеНаименование(СправочникФормы)
	Попытка
		Если ЗначениеЗаполнено(СправочникФормы) Тогда
			Возврат СтрЗаменить(СправочникФормы.ПолноеНаименование(), "/", "\");
		Иначе
			Возврат "";
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат СокрЛП(СправочникФормы);
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура НоменклатураДелОчистка(Элемент, СтандартнаяОбработка)
	Объект.НоменклатураДел="";
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Истина, Ложь, Истина);
	ОткрытьФорму("Справочник.аДокументооборотНоменклатураДел.ФормаВыбора", ПараметрыФормы, Элементы.НоменклатураДел); 
	
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ПоказатьЗначение(Неопределено, Объект.НоменклатураДел);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Объект.НоменклатураДел=ВыбранноеЗначение;
	НоменклатураДел=ПолучитьПолноеНаименование(ВыбранноеЗначение);
	
	ИзменитьНомерДокумента("[НД]");
	
	СрокХранения=аДООбщееСервер.ПолучитьРеквизитОбъекта(Объект.НоменклатураДел, "СрокХранения");
	Если ЗначениеЗаполнено(СрокХранения) Тогда
		Объект.ДатаОкончанияДействияДокумента=КонецДня(СрокХранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	//найдем по номеру
	НайденнаяНоменклатура=НайтиНоменклатуруПоНомеру(Текст);
	Если НайденнаяНоменклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НоменклатураДел=НайденнаяНоменклатура;
	Текст=ПолучитьПолноеНаименование(НайденнаяНоменклатура);
	НоменклатураДел=Текст;
	
	СрокХранения=аДООбщееСервер.ПолучитьРеквизитОбъекта(Объект.НоменклатураДел, "СрокХранения");
	Если ЗначениеЗаполнено(СрокХранения) Тогда
		Объект.ДатаОкончанияДействияДокумента=КонецДня(СрокХранения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиНоменклатуруПоНомеру(НомерДела)
	Запрос=Новый Запрос("ВЫБРАТЬ
	|	аДокументооборотНоменклатураДел.Ссылка
	|ИЗ
	|	Справочник.аДокументооборотНоменклатураДел КАК аДокументооборотНоменклатураДел
	|ГДЕ
	|	аДокументооборотНоменклатураДел.НомерДела = &НомерДела");
	Запрос.УстановитьПараметр("НомерДела", СокрЛП(НомерДела));
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.аДокументооборотНоменклатураДел.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НоменклатураДелПриИзменении(Элемент)
	
	ИзменитьНомерДокумента("[НД]");
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Истина, Ложь, Истина);
	ОткрытьФорму("Справочник.аДокументооборотМестаХраненияДокументов.ФормаВыбора", ПараметрыФормы, Элементы.МестоХранения);
	
	СтандартнаяОбработка=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияДокументаОчистка(Элемент, СтандартнаяОбработка)
	Объект.МестоХранения="";
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияДокументаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ПоказатьЗначение(Неопределено, Объект.МестоХранения);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.МестоХранения=ВыбранноеЗначение;
	МестоХранения=ПолучитьПолноеНаименование(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияДокументаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	//отменим введеный вручную текст
	
	СтандартнаяОбработка=Ложь;
	Текст=ПолучитьПолноеНаименование(Объект.МестоХранения);
	МестоХранения=Текст;
	
	Состояние(НСтр("en='Choice of storage is from the directory.';ru='Выбор места хранения осуществляется из справочника.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущиеМестаХраненияДокументаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Истина, Ложь, Истина);
	ОткрытьФорму("Справочник.аДокументооборотМестаХраненияДокументов.ФормаВыбора", ПараметрыФормы, Элементы.МестоХранения,,,, Новый ОписаниеОповещения("ПредыдущиеМестаХраненияДокументаПередНачаломДобавленияЗавершение", ЭтотОбъект));
	Отказ=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущиеМестаХраненияДокументаПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	НовяСтрока=Объект.ПредыдущиеМестаХраненияДокумента.Добавить();
	НовяСтрока.МестоХранения=Результат;
	НовяСтрока.МестоХраненияСтрока=ПолучитьПолноеНаименование(Результат);;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущиеМестаХраненияДокументаМестоХраненияСтрокаПриИзменении(Элемент)
	Состояние(НСтр("en='Choice of storage is from the directory.';ru='Выбор места хранения осуществляется из справочника.'"));
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущиеМестаХраненияДокументаМестоХраненияСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Состояние(НСтр("en='Choice of storage is from the directory.';ru='Выбор места хранения осуществляется из справочника.'"));
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущиеМестаХраненияДокументаМестоХраненияСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	СтрокаТЧ=Элементы.ПредыдущиеМестаХраненияДокумента.ТекущиеДанные;
	
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Истина, Ложь, Истина);
	
	ОткрытьФорму("Справочник.аДокументооборотМестаХраненияДокументов.ФормаВыбора", ПараметрыФормы,,,,, Новый
	ОписаниеОповещения("Оповещение_ЗакрытиеФормыПредыдущееМестоХраненияВыборВстроке", ЭтотОбъект, СтрокаТЧ));		
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗакрытиеФормыПредыдущееМестоХраненияВыборВстроке(РезультатЗакрытия, СтрокаТЧ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ.МестоХранения=РезультатЗакрытия;
	СтрокаТЧ.МестоХраненияСтрока=ПолучитьПолноеНаименование(РезультатЗакрытия);;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущиеМестаХраненияДокументаМестоХраненияСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтрокаТЧ=Элементы.ПредыдущиеМестаХраненияДокумента.ТекущиеДанные;
	СтандартнаяОбработка=Ложь;
	
	ПоказатьЗначение(Неопределено, СтрокаТЧ.МестоХранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	СтандартнаяОбработка=Ложь;
	
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, РежимВыбора", Истина, Истина);
	ВыбранноеЗначение = Неопределено;
	
	ОткрытьФорму("Справочник.аДокументооборотШаблоныДокументов.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ЗаполнитьПоШаблонуЗавершениеЗаполнения", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуЗавершениеЗаполнения(Результат, ДополнительныеПараметры) Экспорт
	
	ВыбранноеЗначение=Результат;
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоШаблонуЗавершениеЗаполненияПродолжение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение)), НСтр("en='Do you want to fill the document template ""';ru='Заполнить документ по шаблону ""'")+СокрЛП(ВыбранноеЗначение)+"""?", РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуЗавершениеЗаполненияПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
	
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументПоШаблону(ВыбранноеЗначение);
	
	Если МожноПрисваиватьНомерДокумента Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоШаблонуЗавершение", ЭтотОбъект), НСтр("en='Do you want to set the number of the document?';ru='Установить номер документа?'"), РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;	
	
	ЗаполнитьПоШаблонуФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если СокрЛП(Объект.РегистрационныйНомер)<>"" И РезультатВопроса=КодВозвратаДиалога.Да Тогда
		
		//установим новый ноемр
		Если Параметры.Ключ.Пустая() Тогда
			СохранитьЦифрыНомера=Ложь;
		Иначе
			СохранитьЦифрыНомера=Истина;
		КонецЕсли;
		
		УстановитьНомерДокумента();
	КонецЕсли;
	
	
	ЗаполнитьПоШаблонуФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуФрагмент()
	
	ПрочитатьДополнительныеРеквизиты();
	
	НастроитьФормуПоВидуДокумента(ВидДокумента);
	
	УстановитьЗаголовокФайлы();
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКарточка(Команда)
	УстановитьКнопкуФайлОсновноеДействие("Открыть карточку");
	
	СтрокаФайла=Элементы.СсылкиНаФайлы.ТекущиеДанные;
	Если СтрокаФайла=Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Unknown document file to open.';ru='Не указан файл документа для открытия.'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	СсылкаНаФайл=Элементы.СсылкиНаФайлы.ТекущиеДанные.Файл;
	
	
	Если аДООбщееСервер.ПолучитьЗначениеРеквизитаОбъекта(СсылкаНаФайл, "аЗаполнятьДанными") Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ФайлыКарточкаЗавершение1", ЭтотОбъект, Новый Структура("СсылкаНаФайл", СсылкаНаФайл)), НСтр("en='You open a template file, not the document are building on it.';ru='Вы открываете шаблон файла, а не формируете по нему документ.'")+Символы.ПС+
		"Для формирования документа по шаблону используйте команду ""Открыть файл""."+Символы.ПС+
		НСтр("ru='Продолжить открытие шаблона?'; en='Do you want to open the template?';"), РежимДиалогаВопрос.ДаНет,,,НСтр("en='EDS ''Corporate Workflow""';ru='СЭД ""Корпоративный документооборот""'"));
		Возврат;
		
	КонецЕсли;
	
	ФайлыКарточкаФрагмент(СсылкаНаФайл);
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКарточкаЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СсылкаНаФайл = ДополнительныеПараметры.СсылкаНаФайл;
	
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	
	ФайлыКарточкаФрагмент(СсылкаНаФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКарточкаФрагмент(Знач СсылкаНаФайл)
	
	ПоказатьЗначение(Новый ОписаниеОповещения("ФайлыКарточкаЗавершение", ЭтотОбъект), СсылкаНаФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКарточкаЗавершение(ДополнительныеПараметры) Экспорт
	
	//откроем карточку файла
	
	УстановитьВидимостьКнопкиЗакрытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеОкончанияСрокаПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияДействияДокумента) И ЗначениеЗаполнено(Объект.КорпоративнаяПапка) Тогда
		
		ДатаСрокаДействия=ПолучитьДатуПоКорпоративнойПапке(Объект.КорпоративнаяПапка, Объект.ДатаРегистрации);
		
		Если ЗначениеЗаполнено(ДатаСрокаДействия) Тогда
			Состояние(НСтр("en='Date of validity was set according to the corporate directory';ru='Дата срока действия расчитана по данным корпоративной папки'"));
			Объект.ДатаОкончанияДействияДокумента=ДатаСрокаДействия;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияДействияДокумента) Тогда
		
		Если ТекущаяДата()>ДобавитьМесяц(Объект.ДатаОкончанияДействияДокумента, -1) Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("en='End of the prescribed period is less than a month.';ru='Внимание! До окончания срока действия документа осталось меньше месяца.'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтображениеДействийПослеОкончанияСрока();
	
КонецПроцедуры

Процедура УстановитьОтображениеДействийПослеОкончанияСрока()
	
	Элементы.СозданиеБизнесПроцессов.Видимость=(Объект.ДействияПослеОкончанияСрока=3);
	
	Элементы.НадписьСрокДействияОбработан.Видимость=(Объект.ДействияПослеОкончанияСрока=9);
	Элементы.НадписьДобавитьОдинГод.Видимость=(Объект.ДействияПослеОкончанияСрока<>9);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуПоКорпоративнойПапке(КорпоративнаяПапка, ИсходнаяДата)
	СрокХранения=КорпоративнаяПапка.СрокХраненияДокументов;
	Если СрокХранения=Перечисления.аДокументооборотСрокиХранения.Хранить1год Тогда
		НоваяДата=ДобавитьМесяц(ИсходнаяДата, 12);
	ИначеЕсли СрокХранения=Перечисления.аДокументооборотСрокиХранения.Хранить2года Тогда
		НоваяДата=ДобавитьМесяц(ИсходнаяДата, 12);
	ИначеЕсли СрокХранения=Перечисления.аДокументооборотСрокиХранения.Хранить3года Тогда
		НоваяДата=ДобавитьМесяц(ИсходнаяДата, 36);
	ИначеЕсли СрокХранения=Перечисления.аДокументооборотСрокиХранения.Хранить4года Тогда
		НоваяДата=ДобавитьМесяц(ИсходнаяДата, 48);
	ИначеЕсли СрокХранения=Перечисления.аДокументооборотСрокиХранения.Хранить5лет Тогда
		НоваяДата=ДобавитьМесяц(ИсходнаяДата, 60);
	Иначе
		Возврат Дата("00010101");
	КонецЕсли;
	
	Возврат НоваяДата;
	
КонецФункции

Функция ЗаписатьДополнительныеРеквизиты()
	
	//запишем реквизиты в табличную часть
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопРеквизитыВидаДокумента=ВидДокумента.ДополнительныеРеквизиты;
	
	ПрефиксРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
	Для Каждого СтрокаДопРеквизита Из Объект.ДополнительныеРеквизиты Цикл
		
		ДополнительныйРеквизит=СтрокаДопРеквизита.ДополнительныйРеквизит;
		
		//проверим, есть ли этот реквизит в выбранном виде документа
		Если ДопРеквизитыВидаДокумента.Найти(ДополнительныйРеквизит, "ДополнительныйРеквизит")=Неопределено Тогда
			//в виде документа нет этого доп. реквизита (возможно он остался в документе при переключении вида документа)
			Продолжить;
			
		КонецЕсли;	
		
		Обязательный=ДополнительныйРеквизит.Обязательный;
		
		ИмяРеквизита=ПрефиксРеквизита+ДополнительныйРеквизит.ИмяРеквизитаДляФункций;
		
		Если Элементы.Найти(ИмяРеквизита)=Неопределено Тогда
			//реквизита в форме нет, возможно переключились в простой режим
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			//получим реквизит из формы документа
			ЗначениеРеквизита=ЭтаФорма[ИмяРеквизита];
			
			Если Обязательный И НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Попытка
					Элементы[ИмяРеквизита].ЦветРамки=WebЦвета.Красный;
				Исключение
				КонецПопытки;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Required additional detail ""';ru='Обязательный доп. реквизит ""'")+СокрЛП(ДополнительныйРеквизит)+НСтр("ru='"" не заполнен.';"));
				//реквизит не заполнен
				Возврат Ложь;
				
			КонецЕсли;
			
		Исключение
			
			Если НЕ ВключенПростойРежим	Тогда
				#Если Сервер Тогда
					аДООбщееСервер.СообщитьОбОшибке();
				#Иначе
					аДООбщееКлиент.СообщитьОбОшибке();
				#КонецЕсли
				
			КонецЕсли;
			
		КонецПопытки;
		
		//установим значение в табличной части
		СтрокаДопРеквизита.ЗначениеРеквизита=ЗначениеРеквизита;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокДополнительныхРеквизитовДокумента(ВидДокумента)
	
	//проверим наличие доп. реквизита вида в списке доп. реквизитов документа
	Для Каждого СтрокаДопРеквизита Из ВидДокумента.ДополнительныеРеквизиты Цикл
		//найдем в списке документа
		Если Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ДополнительныйРеквизит", СтрокаДопРеквизита.ДополнительныйРеквизит)).Количество()>0 Тогда
			//есть такой реквизит
			Продолжить;
		КонецЕсли;
		
		ДопРеквизитВидаДокумента=СтрокаДопРеквизита.ДополнительныйРеквизит;
		НоваяСтрока=Объект.ДополнительныеРеквизиты.Добавить();		
		НоваяСтрока.ДополнительныйРеквизит=ДопРеквизитВидаДокумента;
		НоваяСтрока.ЗначениеРеквизита=ДопРеквизитВидаДокумента.ЗначениеПоУмолчанию;
		НоваяСтрока.Обязательный=ДопРеквизитВидаДокумента.Обязательный;
		
	КонецЦикла;
	
	//теперь проверим, нет ли лишних реквизитов
	Для Каждого СтрокаДопРеквизита Из Объект.ДополнительныеРеквизиты Цикл
		//найдем в списке документа
		Если ВидДокумента.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ДополнительныйРеквизит", СтрокаДопРеквизита.ДополнительныйРеквизит)).Количество()>0 Тогда
			//есть такой реквизит
			Продолжить;
		КонецЕсли;
		
		//Объект.ДополнительныеРеквизиты.Удалить(СтрокаДопРеквизита); //такого реквизита в виде нет, удалим в документе
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПустаяСтрока(КорпоративнаяПапка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Please fill the field ""Corporate Folder"" first.';ru='Внимание! Не заполнен реквизит ""Корпоративная папка""'"));
		Отказ=Истина;
		
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(СостояниеДокументаТекущее) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Please fill the field ""State"" first';ru='Внимание! Не заполнен реквизит ""Состояние""'"));
	//	Отказ=Истина;
	//	
	//КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РазрешитьИзменениеСпискаПолучателейПодписанногоДокумента Тогда
		аДООбщееСервер.ЗаписатьВспомогательныйПараметр(Новый Структура("ЗаписьПодписанногоСсылка", Объект.Ссылка));
	КонецЕсли;
	
	РеквизитыУспешноЗаписаны=ЗаписатьДополнительныеРеквизиты();
	Если НЕ РеквизитыУспешноЗаписаны Тогда
		Отказ=Истина;
		Возврат;
		
	КонецЕсли;
	
	Если БылНовым И ПроверятьУникальностьНомеровКорпоративныхДокументов Тогда
		Если ЗначениеЗаполнено(ИспользуемыйНумератор) Тогда
			ОбнулятьНомерКаждыйГод=аДООбщееСервер.ПолучитьЗначениеРеквизитаОбъекта(ИспользуемыйНумератор, "ОбнулятьНомерКаждыйГод");
		Иначе
			ОбнулятьНомерКаждыйГод=Ложь;
		КонецЕсли;
		
		НайденныйДокумент=аДООбщееСервер.ПолучитьДокументПоНомеру(Объект.Номер, ?(ОбнулятьНомерКаждыйГод, Объект.Дата, Неопределено));
		
		Если ЗначениеЗаполнено(НайденныйДокумент) И НайденныйДокумент<>Объект.Ссылка Тогда
			Язык=аДООбщееКлиент.ПолучитьКодЯзыка();
			Если Язык="ru" ИЛИ Язык="Русский" Тогда
				СтрокаОшибки="Номер документа "+СокрЛП(Объект.Номер)+" уже присвоен документу "+СокрЛП(НайденныйДокумент)+" ("+аДООбщееСервер.ПолучитьРеквизитОбъекта(НайденныйДокумент, "НаименованиеДокумента")+")";
			Иначе
				СтрокаОшибки="Document number "+СокрЛП(Объект.Номер)+" already belongs to document "+СокрЛП(НайденныйДокумент)+" ("+аДООбщееСервер.ПолучитьРеквизитОбъекта(НайденныйДокумент, "НаименованиеДокумента")+")";
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
			Отказ=Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//запомним статус модифицированности, что бы потом считать его ПослеЗаписи и отправить уведомление, 
	//сейчас отправлять уведомление не будем, так как процесс записи может не завершиться успешно
	БылМодифицирован=Модифицированность;
	
	//Для обработки прав доступа используется подписка на событие "ПередЗаписью" документа (так устроена библиотека функций 1С), 
	//что бы данные уже были в документе на этот момент, потребуется предварительная запись
	
	Если НЕ МожноПрисваиватьНомерДокумента И НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		МожноПрисваиватьНомерДокумента=Истина;
		
		СтруктураНомера=УстановитьИЗаписатьНомерДокументаСервером();
		
		Если МоментРегистрации="ПриПервойЗаписи" Тогда			
			ЗарегистрироватьДокумент();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ДействияПослеОкончанияСрока=3 Тогда
		//проверим, заполнена ли таблица
		Если Объект.СозданиеБизнесПроцессов.Количество()=0 Тогда
			Отказ=Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("en='You must specify at least one kind of"
			"a business process (that will be created after the end of document validity).';ru='Внимание! Необходимо указать как минимум один вид "
			"создаваемого после окончания действия документа бизнес-процесса.'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если НЕ Отказ Тогда
		ВыполнитьОбработчикПередЗаписью(Отказ);
	КонецЕсли;
	
	Pcru_ПриЗакрытииПослеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Pcru_ПриЗакрытииПослеНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотКорпоративныйДокументСсылкиНаФайлы.Файл
	|ИЗ
	|	Документ.аДокументооборотКорпоративныйДокумент.СсылкиНаФайлы КАК аДокументооборотКорпоративныйДокументСсылкиНаФайлы
	|ГДЕ
	|	аДокументооборотКорпоративныйДокументСсылкиНаФайлы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Объект.Ссылка );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Файл.Редактирует)  Тогда
			РаботаСФайламиСлужебныйВызовСервера.ОсвободитьФайл(Выборка.Файл);
		КонецЕсли;  
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция УстановитьИЗаписатьНомерДокументаСервером()
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.аДокументооборотДействующиеНумераторы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	//установим номер
	Если ТаблицаНомера.Количество()=0 Тогда
		УстановитьНомерДокументаСервером();
	КонецЕсли;
	
	//запишем номер документа
	РезультатЗаписиНомера=аДОРаботаСДокументами.ЗаписатьНомерДокумента(ПолучитьСтруктуруНомера());
	
	Если НЕ ПустаяСтрока(РезультатЗаписиНомера) Тогда
		Сообщить(РезультатЗаписиНомера);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецФункции

&НаСервере
Функция ТекстовоеСодержимоеДокументаЗаполнено()
	Если Объект.ТипОтображенияСодержания=0 Тогда
		//простой текста
		Возврат НЕ (ПустаяСтрока(Объект.СодержаниеДокумента));
		
	ИначеЕсли Объект.ТипОтображенияСодержания=1 Тогда
		//html текст
		HtmlТекст=СокрЛП(ФорматированныйТекстСодержания.ПолучитьТекст());
		Возврат НЕ (ПустаяСтрока(HtmlТекст));
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбсудитьДокумент(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбсудитьДокументЗавершение", ЭтотОбъект), НСтр("ru='Сначала запишите документ. Записать сейчас?';en='Please save the document. Save it now?'"), РежимДиалогаВопрос.ДаНет,,, аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	ОбсудитьДокументФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбсудитьДокументЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
		
	Иначе
		Попытка
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		Исключение
			аДООбщееКлиент.СообщитьОбОшибке(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	
	ОбсудитьДокументФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбсудитьДокументФрагмент()
	
	Перем ПараметрыФормы;
	
	ПараметрыФормы = Новый Структура("ЗначениеФильтра", Объект.Ссылка);
	ОткрытьФорму("Документ.аСообщениеПользователя.ФормаСписка", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОсновнойДоговорКонтрагента(ОбъектФормы)
	Возврат ОбъектФормы.ДоговорПоУмолчанию;
КонецФункции

&НаКлиенте
Процедура ДекорацияПоказатьСписокДополнительныхРеквизитовНажатие(Элемент)
	
	ФлагПоказыватьДопРеквизитыВВидеСписка=НЕ ФлагПоказыватьДопРеквизитыВВидеСписка;
	
	УстановитьОтображениеСпискаДопРеквизитов();
	
	//аДООбщееСервер.СохранитьНастройкуПользователя("Документ", "ПоказыватьДопРеквизитыВВидеСписка", ПоказыватьДопРеквизитыВВидеСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеСпискаДопРеквизитов()
	
	Элементы.ДополнительныеРеквизиты.Видимость=ФлагПоказыватьДопРеквизитыВВидеСписка;
	
	Если ФлагПоказыватьДопРеквизитыВВидеСписка Тогда
		Элементы.ДекорацияПоказатьСписокДополнительныхРеквизитов.Заголовок=НСтр("ru='Скрыть список дополнительных реквизитов'; en='Hide additional details in a list';");
	Иначе
		Элементы.ДекорацияПоказатьСписокДополнительныхРеквизитов.Заголовок=НСтр("ru='Показать дополнительные реквизиты в виде списка'; en='Show additional details in a list';");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачСервером()
	
КонецПроцедуры

Процедура УстановитьЗапретРедактированияФормы(Установить=Истина)
	
	Элементы.Содержание.ТолькоПросмотр=Установить;
	Элементы.ФайлыДокумента.ТолькоПросмотр=Установить;
	Элементы.Расположение.ТолькоПросмотр=Установить;
	Элементы.Принадлежность.ТолькоПросмотр=Установить;
	Элементы.Архивирование.ТолькоПросмотр=Установить;
	Элементы.СвязиСОбъектами.ТолькоПросмотр=Установить;
	Элементы.Прочее.ТолькоПросмотр=Установить;	
	
	Элементы.ГруппаНаименованиеПодпись.ТолькоПросмотр=Установить;
	Элементы.ГруппаНиз.ТолькоПросмотр=Установить;
	
	Элементы.ФайлыДокументаФайлыДобавить.Доступность=НЕ Установить;
	Элементы.ФайлыДокументаФайлыСканировать.Доступность=НЕ Установить;
	Элементы.ФайлыДокументаФайлыУдалить.Доступность=НЕ Установить;
	
	Элементы.ОрганизацииПодразделенияПодборОрганизации.Доступность=НЕ Установить;
	Элементы.ОрганизацииПодразделенияОрганизацииЗаполнить.Доступность=НЕ Установить;
	Элементы.СотрудникиПодборПользователи.Доступность=НЕ Установить;
	Элементы.СотрудникиЗаполнитьРабочейГруппой.Доступность=НЕ Установить;
	Элементы.ПодборКонтрагенты.Доступность=НЕ Установить;
	Элементы.ПроектыПодборПроекты.Доступность=НЕ Установить;
	
	Для Каждого ЭлементРегистрации Из Элементы.Регистрация.ПодчиненныеЭлементы Цикл
		ЭлементРегистрации.ТолькоПросмотр=Установить;
	КонецЦикла;
	//	Элементы.СписокПолучателейПодборПолучатели.Доступность=НЕ Установить;
	//	Элементы.СписокПолучателейЗаполнитьПолучателейРабочейГруппой.Доступность=НЕ Установить;
	
	Если Установить Тогда
		//дополнительно обработаем условие запрета
		Если РазрешитьИзменениеСпискаПолучателейПодписанногоДокумента Тогда
			
			Элементы.СписокПолучателейПодборПолучатели.Доступность=Истина;
			Элементы.СписокПолучателейЗаполнитьПолучателейРабочейГруппой.Доступность=Истина;
			
			Элементы.СписокПолучателей1.ТолькоПросмотр=Ложь;
			Элементы.СписокПолучателей1.Доступность=Истина;
			
			Элементы.ПрисутствуютПолучатели.ТолькоПросмотр=Ложь;
			Элементы.ПрисутствуютПолучатели.Доступность=Истина;
			
			Для Каждого ЭлементРегистрации Из Элементы.СписокПолучателей1.ПодчиненныеЭлементы Цикл
				//разрешим доступ
				ЭлементРегистрации.ТолькоПросмотр=Ложь;
				ЭлементРегистрации.Доступность=Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;		
	
	Попытка
		Элементы.ФормаПровестиИЗакрыть.Видимость=НЕ Установить;
		Элементы.ФормаПровести.Видимость=НЕ Установить;
		Элементы.ФормаЗакрыть.Видимость=Установить;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию=Установить;	
	Исключение
		//данные элементы могут быть недоступны для изменения из-за настройки прав доступа
	КонецПопытки;
	
	Для Каждого ЭлементГруппыВерх Из Элементы.ГруппаВерх.ПодчиненныеЭлементы Цикл
		Если ЭлементГруппыВерх.Имя="СостояниеДокументаТекущее" Тогда
			ЭлементГруппыВерх.ТолькоПросмотр=Ложь; //изменение статуса доступно всегда
		Иначе
			ЭлементГруппыВерх.ТолькоПросмотр=Установить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодписиДокументаНажатие(Элемент)
	
	ПараметрыФормы=Новый Структура("ФильтрПоОбъекту", Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.аДокументооборотПодписиОбъектов.ФормаСписка", ПараметрыФормы,,,,, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВышестоящиеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Неопределено;
	
	//откроем документ выбранной строки
	СтрокаТЧ=Элемент.ТекущиеДанные;
	Если СтрокаТЧ<>Неопределено Тогда
		ПоказатьЗначение(Неопределено, СтрокаТЧ.ВышестоящийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НижестоящиеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Неопределено;
	
	//откроем документ выбранной строки
	СтрокаТЧ=Элемент.ТекущиеДанные;
	Если СтрокаТЧ<>Неопределено Тогда
		ПоказатьЗначение(Неопределено, СтрокаТЧ.НижестоящийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница=Элементы.Прочее Тогда
		УстановитьОтображениеСпискаКорпоративныхЗадач();
		УстановитьОтображениеСпискаКорпоративныхПроцессов();
		
	ИначеЕсли ТекущаяСтраница=Элементы.Файлы Тогда
		УстановитьПредпросмотр();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли; 
	
	
	Если НЕ БылНовым Тогда
		ЗафиксироватьПросмотрДокумента();
		Оповестить("ПросмотренДокумент", ТекущийПользователь, Объект.Ссылка);
	КонецЕсли;
	
	Если ТребуетсяЗаписатьСообщение И НЕ Объект=Неопределено Тогда
		Отказ=Ложь;
		аДОСистемаСообщений.ЗаписьСообщения(Объект.Ссылка, Отказ, БылНовым);
	КонецЕсли;
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		аДОПривилегированныеОперации.ЗафиксироватьЗакрытиеОбъекта(Объект.Ссылка);	
	КонецЕсли;
	
	ЗаписатьМетрикуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПодразделенияОрганизацияПриИзменении(Элемент)
	
	Если Элементы.ОрганизацииПодразделения.ТекущиеДанные<>Неопределено Тогда
		НомерСтрокиЭлемента=Элементы.ОрганизацииПодразделения.ТекущиеДанные.НомерСтроки;
		Если НомерСтрокиЭлемента<=1 Тогда
			ИзменитьНомерДокумента("[КО]");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПодразделенияПодразделениеПриИзменении(Элемент)
	
	Если Элементы.ОрганизацииПодразделения.ТекущиеДанные<>Неопределено Тогда
		НомерСтрокиЭлемента=Элементы.ОрганизацииПодразделения.ТекущиеДанные.НомерСтроки;
		Если НомерСтрокиЭлемента<=1 Тогда
			СохранитьЦифрыНомера=Истина;
			ИзменитьНомерДокумента("[КП]", СохранитьЦифрыНомера);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПользовательПриИзменении(Элемент)
	Если Элементы.Сотрудники.ТекущиеДанные<>Неопределено Тогда
		НомерСтрокиЭлемента=Элементы.Сотрудники.ТекущиеДанные.НомерСтроки;
		Если НомерСтрокиЭлемента<=1 Тогда
			СохранитьЦифрыНомера=Истина;
			ИзменитьНомерДокумента("[КС]", СохранитьЦифрыНомера);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПроектПриИзменении(Элемент)
	Если Элементы.Проекты.ТекущиеДанные<>Неопределено Тогда
		НомерСтрокиЭлемента=Элементы.Проекты.ТекущиеДанные.НомерСтроки;
		Если НомерСтрокиЭлемента<=1 Тогда
			СохранитьЦифрыНомера=Истина;
			ИзменитьНомерДокумента("[ПР]", СохранитьЦифрыНомера);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	Если МожноПрисваиватьНомерДокумента Тогда
		СохранитьЦифрыНомера=Истина;
		ИзменитьНомерДокумента("[ТД]", СохранитьЦифрыНомера);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтображениеСодержания()
	
	//проверим, можно ли изменить стандартное название закладки
	Если СписокИзмененныхЭлементовФормы.НайтиПоЗначению("СтраницаСодержание")=Неопределено Тогда
		//страница не была изменена в настройках вида, применим наше преобразование
		Если Объект.ТипОтображенияСодержания=2 Тогда
			
			Элементы.СтраницаСодержание.Заголовок=НСтр("ru='Содержание (html)'; en='Content (html)';");
			
		Иначе
			Элементы.СтраницаСодержание.Заголовок=НСтр("ru='Содержание'; en='Content';");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ТипОтображенияСодержания=1 Тогда //форматированный текст
		Элементы.СодержаниеДокумента.Видимость=Ложь;
		Элементы.СодержаниеДокументаHTML.Видимость=Ложь;
		Элементы.ГруппаФорматированныйТекст.Видимость=Истина;
		
	ИначеЕсли Объект.ТипОтображенияСодержания=2 Тогда //html
		
		Элементы.СодержаниеДокумента.Видимость=Ложь;
		Элементы.ГруппаФорматированныйТекст.Видимость=Ложь;
		Элементы.СодержаниеДокументаHTML.Видимость=Истина;
		СодержаниеДокументаДляHTML="<html>"+Строка(Объект.СодержаниеДокумента)+"</html>"; //на всякий случай возмем в теги
		
	Иначе
		//обычное отображение
		Элементы.СодержаниеДокументаHTML.Видимость=Ложь;
		Элементы.ГруппаФорматированныйТекст.Видимость=Ложь;
		Элементы.СодержаниеДокумента.Видимость=Истина;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОбычныйРежимФормы()
	
	ЗаполнитьМенюДоступныхВидовБизнесПроцессов();
	
	ФлагВидимости=Истина;
	
	Элементы.ГруппаВерх.Видимость=ФлагВидимости;
	Элементы.ГруппаНиз.Видимость=ФлагВидимости;
	
	//страницы
	Элементы.Регистрация.Видимость=ФлагВидимости;
	Элементы.Расположение.Видимость=ФлагВидимости;
	Элементы.Принадлежность.Видимость=ФлагВидимости;
	Элементы.Архивирование.Видимость=ФлагВидимости;
	Элементы.СвязиСОбъектами.Видимость=ФлагВидимости;
	Элементы.Прочее.Видимость=ФлагВидимости;
	
	Элементы.Файлы.Видимость=ФлагВидимости;
	Элементы.Содержание.Видимость=ФлагВидимости;
	
	Элементы.КоманднаяПанельПростая.Видимость=Ложь;	
	
	Элементы.Страницы.ОтображениеСтраниц=ОтображениеСтраницФормы.ЗакладкиСверху;
	
	ЭтаФорма.ПоложениеКоманднойПанели=ПоложениеКоманднойПанелиФормы.Верх;
	
	НастроитьФормуПоВидуДокумента(ВидДокумента);
	
	УстановитьОтображениеДействийПослеОкончанияСрока();
	
	УстановитьЗаголовокФайлы();
	
	ЗаполнитьМенюДоступныхВидовБизнесПроцессов();
	
	Элементы.ВидДокумента.КнопкаОткрытия=аДООбщееСерверПС.ЭтоРольПолныеПрава();
	
	Попытка
		Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию=Истина;
		Элементы.ПростаяФормаЗакрыть.КнопкаПоУмолчанию=Ложь;
	Исключение
		//элемент может быть недоступн для некоторых ролей
	КонецПопытки;
	
	Если Объект.ОткрыватьВПростомРежиме Тогда
		//эти действия не были выполнены при открытии формы
		
		ФайлыНазваниеОсновнойКоманды="Открыть файл";
		
		ВышестоящиеОбъекты.Параметры.УстановитьЗначениеПараметра("ТекущийДокумент", Объект.Ссылка);			
		
		НижестоящиеОбъекты.Параметры.УстановитьЗначениеПараметра("ТекущийДокумент", Объект.Ссылка);			
		
		УстановитьКнопкуФайлОсновноеДействие(ФайлыНазваниеОсновнойКоманды);
		
		Элементы.СписокПолучателей1.Видимость=Объект.ПрисутствуютПолучатели;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПростойРежимФормы()
	
	ФлагВидимости=Ложь;
	
	Элементы.ГруппаВерх.Видимость=ФлагВидимости;
	Элементы.ГруппаНиз.Видимость=ФлагВидимости;
	
	//страницы
	Элементы.Регистрация.Видимость=ФлагВидимости;
	Элементы.Расположение.Видимость=ФлагВидимости;
	Элементы.Принадлежность.Видимость=ФлагВидимости;
	Элементы.Архивирование.Видимость=ФлагВидимости;
	Элементы.СвязиСОбъектами.Видимость=ФлагВидимости;
	Элементы.Прочее.Видимость=ФлагВидимости;
	
	Если Объект.СсылкиНаФайлы.Количество()=0 Тогда
		Элементы.Файлы.Видимость=Ложь;
		Элементы.ПростойРежимДобавитьФайлы.Видимость=Истина;
		Элементы.Страницы.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.Страницы.ОтображениеСтраниц=ОтображениеСтраницФормы.ЗакладкиСнизу;
		
	КонецЕсли;
	
	Если Элементы.Файлы.Видимость
		И ПустаяСтрока(Объект.СодержаниеДокумента) 
		И НЕ ВидДокумента.ЗапретитьПустоеТекстовоеСодержимое 
		И НЕ ВидДокумента.ИспользоватьДополнительныеРеквизиты
		И НЕ ВидДокумента.ИспользоватьПроизвольнуюТаблицу
		Тогда
		//покажем файлы, без содержания, так как оно не обязательно
		//и нет ни допонительных реквизитов, ни таблицы
		Элементы.Содержание.Видимость=Ложь;		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.СодержаниеДокумента) 
		И НЕ ВидДокумента.ЗапретитьПустоеТекстовоеСодержимое
		И Элементы.Файлы.Видимость
		Тогда
		//пустое и не обязательное содержание не показывается
		Элементы.СтраницаСодержание.Видимость=Ложь;
	КонецЕсли;
	
	Если Элементы.Содержание.Видимость Тогда
		КоличествоДополнительныхРеквизитов=Объект.ДополнительныеРеквизиты.Количество();
		Если КоличествоДополнительныхРеквизитов>0 Тогда
			Если ТипРазмещенияДополнительныхРеквизитов=0 Тогда
				Элементы.ДополнительныеРеквизитыЗакладкиСодержание.Видимость=Ложь;
				Элементы.СтраницаДополнительныеРеквизиты.Видимость=Истина;
				
			ИначеЕсли ТипРазмещенияДополнительныхРеквизитов=1 Тогда			
				Элементы.СтраницаДополнительныеРеквизиты.Видимость=Ложь;
				Элементы.ДополнительныеРеквизитыЗакладкиСодержание.Видимость=Истина;
				
			КонецЕсли;
			
		Иначе
			Элементы.СтраницаДополнительныеРеквизиты.Видимость=Ложь;
			Элементы.ДополнительныеРеквизитыЗакладкиСодержание.Видимость=Ложь;
			
		КонецЕсли;
		
		Если ВидДокумента.ИспользоватьПроизвольнуюТаблицу Тогда
			Элементы.СтраницаПроизвольнаяТаблица.Видимость=Истина;
			
			УстановитьОформлениеПроизвольнойТаблицы();
			
			//установим заголовок
			Если ТипРазмещенияПроизвольнойТаблицы=0 Тогда
				//расположение на отдельной закладке
				Элементы.СтраницаПроизвольнаяТаблица.Заголовок=ВидДокумента.НаименованиеЗакладкиПроизвольнаяТаблица;
				Элементы.ПроизвольнаяТаблицаЗакладкиСодержание.Видимость=Ложь;
			Иначе
				//расположение вместе с содержанием документа
				Элементы.ПроизвольнаяТаблицаЗакладкиСодержание.Заголовок=ВидДокумента.НаименованиеЗакладкиПроизвольнаяТаблица;
				Элементы.СтраницаПроизвольнаяТаблица.Видимость=Ложь;
			КонецЕсли;
			
		Иначе
			Элементы.СтраницаПроизвольнаяТаблица.Видимость=Ложь;
			Элементы.ПроизвольнаяТаблицаЗакладкиСодержание.Видимость=Ложь;
			
		КонецЕсли;
		
		Если Элементы.СтраницаПроизвольнаяТаблица.Видимость=Ложь И Элементы.СтраницаДополнительныеРеквизиты.Видимость=Ложь Тогда
			Элементы.ГруппаСодержание.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.КоманднаяПанельПростая.Видимость=Истина;
	
	ЭтаФорма.ПоложениеКоманднойПанели=ПоложениеКоманднойПанелиФормы.Нет;
	
	Если РольЕсть_аДокументыРедактирование Тогда
		Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию=Ложь;
	КонецЕсли;
	
	Элементы.ПростаяФормаЗакрыть.КнопкаПоУмолчанию=Истина;
	
	Элементы.СтраницаСодержание.Видимость=ВидДокумента.ИспользоватьТекстовоеСодержание;
	
	КоличествоОтображаемыхСтраниц=0;
	КоличествоОтображаемыхСтраниц=КоличествоОтображаемыхСтраниц+?(Элементы.СтраницаДополнительныеРеквизиты.Видимость, 1, 0);
	КоличествоОтображаемыхСтраниц=КоличествоОтображаемыхСтраниц+?(Элементы.СтраницаПроизвольнаяТаблица.Видимость, 1, 0);
	КоличествоОтображаемыхСтраниц=КоличествоОтображаемыхСтраниц+?(Элементы.СтраницаСодержание.Видимость, 1, 0);
	
	Если КоличествоОтображаемыхСтраниц<2 Тогда
		Элементы.ГруппаСодержание.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ГруппаСодержание.ОтображениеСтраниц=ОтображениеСтраницФормы.ЗакладкиСнизу;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимДобавитьФайл(Команда)
	ФайлыДобавить(Неопределено);
	
	Элементы.Страницы.ОтображениеСтраниц=ОтображениеСтраницФормы.ЗакладкиСнизу;
	Элементы.Файлы.Видимость=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимВключить(Команда)
	
	ВключенПростойРежим=Истина;
	РежимФормыБылИзмененВРучную=Истина;
	
	УстановитьПростойРежимФормы();
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПростойРежимВыключить(Команда)
	ВключенПростойРежим=Ложь;
	РежимФормыБылИзмененВРучную=Истина;
	
	УстановитьОбычныйРежимФормы();
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОбновить(Команда)
	
	//обновим список файлов документа
	ОбновитьСсылкиНаФайлы();
	
	//обновим предпросмотр
	СсылкиНаФайлыПриАктивизацииСтроки(Неопределено);
	
	Состояние(НСтр("ru='Список файлов обновлен';en='List of files updated'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДобавитьОдинГодНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияДействияДокумента) Тогда
		Объект.ДатаОкончанияДействияДокумента=ДобавитьМесяц(Объект.ДатаОкончанияДействияДокумента, 12);
		Состояние(НСтр("ru='Добавлен одни год к сроку действия документа.';en='Added one year to the date of the document.'"));
	Иначе
		Объект.ДатаОкончанияДействияДокумента=ДобавитьМесяц(ТекущаяДата(), 12);
		Состояние(НСтр("ru='Срок действия установлен как один год с текущей даты.';en='Validity is set to one year from today.'"));
	КонецЕсли;
	
	Если Объект.ДействияПослеОкончанияСрока=0 Тогда
		Объект.ДействияПослеОкончанияСрока=1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникРегистраторПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда
		Объект.ДатаРегистрации=ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда
		ОбновитьРегистрационныйНомер();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.МестоРегистрации) И ЗначениеЗаполнено(Объект.СотрудникРегистратор) Тогда
		Объект.МестоРегистрации=аДООбщееСервер.ПолучитьСписокПодразделенийСотрудника(Объект.СотрудникРегистратор, Истина)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуВсехТеговНумераторовДокумента()
	
	//поскольку назначение нумераторов идет только по виду документа и организации,
	//передадим в функцию эти два значения
	Если Объект.ОрганизацииПодразделения.Количество()=0 Тогда
		Организация=Неопределено;
	Иначе
		Организация=Объект.ОрганизацииПодразделения[0].Организация;
	КонецЕсли;
	
	СтрокаТегов=аДОРаботаСДокументами.ПолучитьСтрокуТеговНумераторовДокумента(ВидДокумента, Организация);
	
	//дополним строку видом документа и организацией, т.к. при их изменении вопрос задавать нужно
	
	//*** Закоментировано 31.01.2018
	//Если ЗначениеЗаполнено(ВидДокумента) Тогда
	//	СтрокаТегов=СтрокаТегов+"[ВД]";
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(Организация) Тогда
	//	СтрокаТегов=СтрокаТегов+"[КО]";
	//КонецЕсли;
	
	Возврат СтрокаТегов;
	
КонецФункции

// Функция возвращает список доступных для вида документа корпоративных процессов
&НаСервере
Функция ПолучитьТаблицуДоступныхВДокументеБизнесПроцессов(ВидДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидДокумента.ИспользоватьСписокВидовБизнесПроцессов Тогда
		Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	аДокументооборотВидыДокументовДоступныеВидыБизнесПроцессов.ВидБизнесПроцесса КАК ВидПроцесса,
		|	аДокументооборотВидыДокументовДоступныеВидыБизнесПроцессов.ВидБизнесПроцесса.Код КАК Код,
		|	аДокументооборотВидыДокументовДоступныеВидыБизнесПроцессов.Наименование
		|ИЗ
		|	Справочник.аДокументооборотВидыДокументов.ДоступныеВидыБизнесПроцессов КАК аДокументооборотВидыДокументовДоступныеВидыБизнесПроцессов
		|ГДЕ
		|	аДокументооборотВидыДокументовДоступныеВидыБизнесПроцессов.Доступен = ИСТИНА
		|	И аДокументооборотВидыДокументовДоступныеВидыБизнесПроцессов.ВидБизнесПроцесса.ПометкаУдаления = ЛОЖЬ
		|	И аДокументооборотВидыДокументовДоступныеВидыБизнесПроцессов.Ссылка = &ВидДокумента
		|	И аДокументооборотВидыДокументовДоступныеВидыБизнесПроцессов.ВидБизнесПроцесса.СистемныйВидПроцесса = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	аДокументооборотВидыДокументовДоступныеВидыБизнесПроцессов.НомерСтроки");
		
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
		
		ТаблицаДоступныхПроцессов=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
	Иначе
		//выберем из всего справочника
		Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.ВидБизнесПроцесса КАК ВидПроцесса,
		|	ВложенныйЗапрос.ВидБизнесПроцесса.Код КАК Код,
		|	ВложенныйЗапрос.ВидБизнесПроцесса.Наименование КАК Наименование
		|ИЗ
		|	(ВЫБРАТЬ
		|		аДокументооборотВидыПроцессов.Ссылка КАК ВидБизнесПроцесса,
		|		аДокументооборотВидыПроцессов.Код КАК Код,
		|		аДокументооборотВидыПроцессов.Наименование КАК Наименование,
		|		ВЫБОР
		|			КОГДА аДокументооборотВидыПроцессов.КопироватьСотрудниковИзДокумента
		|					ИЛИ аДокументооборотВидыПроцессов.КопироватьПолучателейИзДокумента
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК Доступен
		|	ИЗ
		|		Справочник.аДокументооборотВидыПроцессов КАК аДокументооборотВидыПроцессов
		|	ГДЕ
		|		аДокументооборотВидыПроцессов.ПометкаУдаления = ЛОЖЬ
		|		И аДокументооборотВидыПроцессов.СистемныйВидПроцесса = ЛОЖЬ) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Доступен = ИСТИНА");
		
		ТаблицаДоступныхПроцессов=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
	КонецЕсли;
	
	Возврат ТаблицаДоступныхПроцессов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМенюДоступныхВидовБизнесПроцессов()
	
	//заполним список доступных бизнес-процессов
	//если в виде документа отмечен флажок ИспользоватьСписокШаблоновБизнесПроцессов тогда заполним 
	//по указанным в виде, в противном случае заполним по всем у которых установлен 
	//признак КопироватьСотрудниковИзДокумента или КопироватьПолучателейИзДокумента в виде процесса
	
	ТаблицаДоступныхПроцессов=ПолучитьТаблицуДоступныхВДокументеБизнесПроцессов(ВидДокумента);
	
	//создадим пункты меню в группе ГруппаСтартаКорпоративногоПроцесса
	//имя пункта будет включать в себя префикс "ВидПроцесса_" и код вида процесса
	
	//удалим созданные ранее пункты меню (например при переключении вида процесса)
	
	Пока Элементы.ГруппаСтартаКорпоративногоПроцесса.ПодчиненныеЭлементы.Количество()>0 Цикл
		ЭлементМеню=Элементы.ГруппаСтартаКорпоративногоПроцесса.ПодчиненныеЭлементы[0];
		Элементы.Удалить(ЭлементМеню);
	КонецЦикла;
	
	//добавим элементы из таблицы
	
	Для Каждого СтрокаТаблицы Из ТаблицаДоступныхПроцессов Цикл
		ВидПроцесса=СтрокаТаблицы.ВидПроцесса;
		
		//добавим программный элемент
		Попытка
			КодВидаПроцесса=СокрЛП(СтрокаТаблицы.Код);
		Исключение
			//возможно у текущего пользователя нет прав на этот вид процесса, тогда не будем его добавлять и в меню
			Продолжить;
			
		КонецПопытки;
		
		ИмяЭлемента="ВидПроцесса_"+КодВидаПроцесса;
		ЗаголовокЭлемента=СтрокаТаблицы.Наименование;
		Если ПустаяСтрока(ЗаголовокЭлемента) Тогда
			ЗаголовокЭлемента=ВидПроцесса.Наименование;
			
		КонецЕсли;
		
		//сначала добавим новую команду
		ИмяКоманды="КомандаВидаПроцесса_"+КодВидаПроцесса;
		Если ЭтаФорма.Команды.Найти(ИмяКоманды)=Неопределено Тогда
			НоваяКоманда=ЭтаФорма.Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Действие = "Подключаемый_НачатьКорпоративныйПроцесс";
			НоваяКоманда.Заголовок = ЗаголовокЭлемента;
		КонецЕсли;
		
		//теперь добавим новый пункт меню
		Если Элементы.Найти(ИмяЭлемента)=Неопределено Тогда
			НовыйПунктМеню=Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ГруппаСтартаКорпоративногоПроцесса);
			НовыйПунктМеню.Заголовок=ЗаголовокЭлемента;
			НовыйПунктМеню.ИмяКоманды=ИмяКоманды;
		КонецЕсли;	
		
	КонецЦикла; //по элементам списка
	
КонецПроцедуры

//Подключаемая процедура для динамически созданных пунктов меню старта корпоративных процессов
&НаКлиенте
Процедура Подключаемый_НачатьКорпоративныйПроцесс(Команда)
	
	Если Параметры.Ключ.Пустая() ИЛИ Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Подключаемый_НачатьКорпоративныйПроцессЗавершение", ЭтотОбъект, Новый Структура("Команда", Команда)), НСтр("ru='Документ будет записан. Продолжить?';en='The document will be written. Do you want to continue?'"), РежимДиалогаВопрос.ДаНет,,, аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	Подключаемый_НачатьКорпоративныйПроцессФрагмент(Команда);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьКорпоративныйПроцессЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Команда = ДополнительныеПараметры.Команда;
	
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Исключение
		аДООбщееКлиент.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	Подключаемый_НачатьКорпоративныйПроцессФрагмент(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьКорпоративныйПроцессФрагмент(Знач Команда)
	
	Перем ВидПроцесса, ИмяКоманды, КодВидаПроцесса, ПараметрыФормы, СписокСотрудников, СтруктураЗаполнения;
	
	ИмяКоманды=Команда.Имя;
	КодВидаПроцесса=СтрЗаменить(ИмяКоманды, "КомандаВидаПроцесса_", "");
	
	ВидПроцесса=аДОКорпоративныеПроцессы.ПолучитьВидБизнесПроцессаПоКоду(КодВидаПроцесса);
	
	Если ВидПроцесса=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не найден вид корпоративного процесса по коду ';")+КодВидаПроцесса);
		Возврат;
		
	КонецЕсли;
	
	//составим список сотрудников документа
	СписокСотрудников=аДОРаботаСДокументами.ПолучитьСписокСотрудниковДляБизнесПроцесса(Объект.Ссылка, ВидПроцесса);
	
	СтруктураЗаполнения=Новый Структура;
	СтруктураЗаполнения.Вставить("ВидПроцесса", ВидПроцесса);
	
	ПараметрыФормы=Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения);
	ПараметрыФормы.Вставить("СписокСотрудников", СписокСотрудников);
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	
	ОткрытьФорму("БизнесПроцесс.аДокументооборотКорпоративныйБизнесПроцесс.Форма.ФормаБизнесПроцесса", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьСписокКорпоративныхЗадачНажатие(Элемент)
	
	Если Параметры.Ключ.Пустая() Тогда
		Состояние(НСтр("ru='Недоступно для новых документов. Сначала запишите документ.';en='Not available for new documents. Please save the document.'"));
		Возврат;
		
	КонецЕсли;
	
	ФлагПоказыватьСписокКорпоративныхЗадач=НЕ ФлагПоказыватьСписокКорпоративныхЗадач;
	
	УстановитьОтображениеСпискаКорпоративныхЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеСпискаКорпоративныхЗадач()
	
	Элементы.ТаблицаКорпоративныхЗадач.Видимость=ФлагПоказыватьСписокКорпоративныхЗадач;
	
	Если ФлагПоказыватьСписокКорпоративныхЗадач Тогда
		
		СписокУспешноОткрыт=ОбновитьСписокКорпоративныхЗадачСервером();
		
		Если СписокУспешноОткрыт Тогда
			Элементы.ДекорацияПоказатьСписокКорпоративныхЗадач.Заголовок=НСтр("ru='Скрыть список задач'; en='Hide task list';");
		Иначе
			ФлагПоказыватьСписокКорпоративныхЗадач=Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.ДекорацияПоказатьСписокКорпоративныхЗадач.Заголовок=НСтр("ru='Показать список задач по текущему документу'; en='Show task list';");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСписокКорпоративныхЗадачСервером()
	
	//сформируем таблицу задач
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПараметрВыполнениеПроцентЗадачСрезПоследних.ЗначениеПараметра КАК ВыполнениеПроцент,
	|	ЗадачиДокумента.ЗадачаПроцесса КАК Задача,
	|	ЗадачиДокумента.ЗадачаПроцесса.Исполнитель КАК Исполнитель,
	|	ЗадачиДокумента.ЗадачаПроцесса.Наименование КАК Наименование,
	|	ЗадачиДокумента.ЗадачаПроцесса.ДатаВыполненияФакт КАК ДатаВыполненияФакт,
	|	аДокументооборотРецензииКонтролеровСрезПоследних.ТекстРецензии КАК РецензияКонтролера,
	|	ЗадачиДокумента.ЗадачаПроцесса.ТекстовыйРезультат КАК ТекстРезультатаИсполнителя
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		аДокументооборотЗадача.Ссылка КАК ЗадачаПроцесса
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			аДокументооборотСсылкиПроцессов.БизнесПроцесс КАК БизнесПроцесс
	|		ИЗ
	|			РегистрСведений.аДокументооборотСсылкиПроцессов КАК аДокументооборотСсылкиПроцессов
	|		ГДЕ
	|			аДокументооборотСсылкиПроцессов.Объект = &ТекущийДокумент) КАК БизнесПроцессыДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Задача.аДокументооборотЗадача КАК аДокументооборотЗадача
	|			ПО БизнесПроцессыДокумента.БизнесПроцесс = аДокументооборотЗадача.БизнесПроцесс
	|	ГДЕ
	|		аДокументооборотЗадача.ПометкаУдаления = ЛОЖЬ
	|		И аДокументооборотЗадача.ТочкаМаршрута <> &СлужебнаяТочкаМаршрута) КАК ЗадачиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.аДокументооборотПараметрыЗадач.СрезПоследних(&ТекущаяДата, ПараметрЗадачи = &ПараметрВыполнениеПроцент) КАК ПараметрВыполнениеПроцентЗадачСрезПоследних
	|		ПО ЗадачиДокумента.ЗадачаПроцесса = ПараметрВыполнениеПроцентЗадачСрезПоследних.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.аДокументооборотРецензииКонтролеров.СрезПоследних(&ТекущаяДата, ) КАК аДокументооборотРецензииКонтролеровСрезПоследних
	|		ПО ЗадачиДокумента.ЗадачаПроцесса = аДокументооборотРецензииКонтролеровСрезПоследних.ЗадачаИсполнителя
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиДокумента.ЗадачаПроцесса.Дата";
	
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
	Запрос.УстановитьПараметр("СлужебнаяТочкаМаршрута", БизнесПроцессы.аДокументооборотКорпоративныйБизнесПроцесс.ТочкиМаршрута.ВыполнениеКорпоративногоПроцесса);
	Запрос.УстановитьПараметр("ТекущаяДата", ДобавитьМесяц(ТекущаяДата(), 1));
	Запрос.УстановитьПараметр("ПараметрВыполнениеПроцент", ПланыВидовХарактеристик.аДокументооборотПараметрыЗадач.ВыполнениеПроцент);
	
	ТаблицаКорпоративныхЗадач.Загрузить(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой));
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СписокКорпоративныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если Элемент.ТекущиеДанные=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Задача);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучателейРабочейГруппой(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПолучателейРабочейГруппойЗавершение", ЭтотОбъект), НСтр("ru='Заполнить рабочей группой?';en='Do you want to fill in the Workgroup?'"), РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучателейРабочейГруппойЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, РежимВыбора", Истина, Истина);
	
	ОткрытьФорму("Справочник.аДокументооборотРабочиеГруппы.ФормаВыбора", ПараметрыФормы,,,,, Новый
	ОписаниеОповещения("Оповещение_ЗакрытиеФормыЗаполнитьПолучателейРабочейГруппой", ЭтотОбъект));		
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗакрытиеФормыЗаполнитьПолучателейРабочейГруппой(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	//заполним по рабочей группе
	ЗаполнитьПолучателейПоРабочейГруппеСервером(РезультатЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателейПоРабочейГруппеСервером(СсылкаНаРабочуюГруппу)
	
	Для Каждого ЭлементГруппы Из СсылкаНаРабочуюГруппу.Сотрудники Цикл
		
		ИсполнительСтрокиИсходный=ЭлементГруппы.ТочкаАдресации;
		
		Если НЕ аДООбщееСерверПС.ЭтоИсполнительПроцесса(ИсполнительСтрокиИсходный) Тогда
			//исполнителя получим из ролевой адресации	
			ИсполнительСтроки=аДОЗадачиПроцессов.ПолучитьИсполнителяПоРолиИОсновнойАдресации(ИсполнительСтрокиИсходный);
		Иначе
			ИсполнительСтроки=ИсполнительСтрокиИсходный;
		КонецЕсли;
		
		Если Объект.СписокПолучателей.НайтиСтроки(Новый Структура("Получатель", ИсполнительСтроки)).Количество()>0 Тогда
			Продолжить; //пользователь уже присуствтует в табличной части
			
		КонецЕсли;
		
		НоваяСтрока=Объект.СписокПолучателей.Добавить();
		НоваяСтрока.Получатель=ИсполнительСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКорпоративныхЗадачПередНачаломИзменения(Элемент, Отказ)
	Отказ=Истина;
	
	Если Элемент.ТекущиеДанные=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Задача);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьСписокКорпоративныхПроцессовНажатие(Элемент)
	Если Параметры.Ключ.Пустая() Тогда
		Состояние(НСтр("ru='Недоступно для новых документов. Сначала запишите документ.';en='Not available for new documents. Please save the document.'"));
		Возврат;
		
	КонецЕсли;
	
	ФлагПоказыватьСписокКорпоративныхПроцессов=НЕ ФлагПоказыватьСписокКорпоративныхПроцессов;
	
	УстановитьОтображениеСпискаКорпоративныхПроцессов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеСпискаКорпоративныхПроцессов()
	
	Элементы.СписокКорпоративныхПроцессов.Видимость=ФлагПоказыватьСписокКорпоративныхПроцессов;
	
	Если ФлагПоказыватьСписокКорпоративныхПроцессов Тогда
		СписокУспешноОткрыт=ОбновитьСписокКорпоративныхПроцессовСервером();
		Если СписокУспешноОткрыт Тогда
			Элементы.ДекорацияПоказатьСписокКорпоративныхПроцессов.Заголовок=НСтр("ru='Скрыть список процессов'; en='Hide process list';");
		Иначе
			ФлагПоказыватьСписокКорпоративныхПроцессов=Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.ДекорацияПоказатьСписокКорпоративныхПроцессов.Заголовок=НСтр("ru='Показать список процессов по текущему документу'; en='Show process list';");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСписокКорпоративныхПроцессовСервером()
	
	Попытка
		СписокКорпоративныхПроцессов.Параметры.УстановитьЗначениеПараметра("ТекущийДокумент", Объект.Ссылка);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка построения списка задач! Возможно нет прав доступа.';en='Build error task list! May not have access.'"));
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияИзменитьТипХраненияФайловНажатие(Элемент)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ДекорацияИзменитьТипХраненияФайловНажатиеЗавершение", ЭтотОбъект), НСтр("ru='Изменить тип хранения файлов документа (документ будет перезаписан)?';en='Do you want to change the type of file storage of the document (the document will be overwritten)?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, аОбщееКлиентПС.ЗаголовокДиалога(), КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ДекорацияИзменитьТипХраненияФайловНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
		
	КонецЕсли;	
	
	Если Параметры.Ключ.Пустая() И  РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		//документ новый и записывать его не разрешили
		Возврат;
		
	Иначе
		Попытка
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;	
	
	ПараметрыФормы=Новый Структура("ТипХраненияФайлов", ТипХраненияФайловДокумента);
	ПараметрыФормы.Вставить("ДокументСсылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.аДокументооборотКорпоративныйДокумент.Форма.ФормаХраненияФайлов", ПараметрыФормы,,,,, Новый
	ОписаниеОповещения("Оповещение_ЗакрытиеФормыНастройкиХранения", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗакрытиеФормыНастройкиХранения(РезультатИзмененияТипа, ДополнительныеПараметры) Экспорт
	
	Если РезультатИзмененияТипа=Неопределено ИЛИ НЕ ЗначениеЗаполнено(РезультатИзмененияТипа) Тогда
		Возврат;
		
	КонецЕсли;
	
	Если ТипХраненияФайловДокумента<>РезультатИзмененияТипа Тогда
		ТипХраненияФайловДокумента=РезультатИзмененияТипа;
		Попытка
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ВидДокумента.ЗапретитьПустоеТекстовоеСодержимое И НЕ ТекстовоеСодержимоеДокументаЗаполнено() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Please fill the text content first';ru='Внимание! Не заполнено текстовое содержание документа.';"));
		Отказ=Истина;
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ТипОтображенияСодержания=1 Тогда //форматированный текст
		ТекущийОбъект.ХранилищеТекстаСодержания=Новый ХранилищеЗначения(ФорматированныйТекстСодержания);
		ТекущийОбъект.СодержаниеДокумента=ФорматированныйТекстСодержания.ПолучитьТекст();
		
	КонецЕсли;		
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ТипХраненияФайлов=ТипХраненияФайловДокумента;
	
	
	ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументВФайл(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Сначала запишите элемент.';en='Please save the document first.'"), 60,аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	//выберем файл для записи
	ФильтрРасширений=НСтр("ru='bpl-файлы(*.bpl)|*.bpl';en='bpl-files (*. bpl) | *. bpl'");
	ИмяФайла=СокрЛП(Объект.Ссылка);
	ИмяФайла=СтрЗаменить(ИмяФайла, """", "");
	ИмяФайла=СтрЗаменить(ИмяФайла, ":", " ");
	ПутьКФайлу=аДОРаботаСФайламиКлиент.ВыбратьФайлСДиска(РежимДиалогаВыбораФайла.Сохранение, ФильтрРасширений,,ИмяФайла);
	
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		Состояние(НСтр("ru='Файл не сохранен...';en='The file was not saved ...'"));
		Возврат;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	ЗаписанУспешно=аДОРаботаСФайламиКлиент.ЗаписатьКорпоративныйДокументXML(Объект.Ссылка, ПутьКФайлу);
	
	//получим размер файла
	ФайлВидаПроцесса=Новый Файл(ПутьКФайлу);
	РазмерФайлаКБ=Формат(ФайлВидаПроцесса.Размер()/1024, "ЧЦ=20; ЧДЦ=2");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Размер файла: ';")+СокрЛП(РазмерФайлаКБ)+НСтр("ru=' КБ.';"));
	
	Если ЗаписанУспешно Тогда
		Состояние(НСтр("ru='Сохранен в файл ""';en='Saved to the file ""'")+ПутьКФайлу+НСтр("ru='""';en='""';"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОтображенияСодержимогоПриИзменении(Элемент)
	УстановитьОтображениеСодержания();
	
	ПереключитьТипСодержимого();
	
КонецПроцедуры

Процедура ПереключитьТипСодержимого()
	
	Если Объект.ТипОтображенияСодержания=1 Тогда
		Если НЕ ПустаяСтрока(Объект.СодержаниеДокумента) Тогда
			ФорматированныйТекстСодержания.УстановитьHTML(Объект.СодержаниеДокумента, Новый Структура);
			
		КонецЕсли;
		
	ИначеЕсли Объект.ТипОтображенияСодержания=0 Тогда
		ТекстДокумента=ФорматированныйТекстСодержания.ПолучитьТекст();
		Если НЕ ПустаяСтрока(ТекстДокумента) Тогда
			Объект.СодержаниеДокумента=ТекстДокумента;
			
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ФорматированныйТекстСодержания=ТекущийОбъект.ХранилищеТекстаСодержания.Получить();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ФормаНастроенаПоВиду=Объект.ВидДокумента;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТипДанныхТаблицы(ИмяКолонки)
	ВидДокумента=ВидДокумента;
	СтрокаТЧ=ВидДокумента.ПроизвольнаяТаблица.Найти(ИмяКолонки, "ИмяКолонки");
	Если СтрокаТЧ=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаТЧ.ТипДанныхТаблицы;
	
КонецФункции

&НаКлиенте
Процедура КолонкаСсылка1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьОткрытиеСсылкиПроизвольнойТаблицы("КолонкаСсылка1", "ПроизвольнаяТаблица", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредпросмотрПутьКФайлуНажатие(Элемент)
	
	ПутьКФайлу=(Элементы.ДекорацияПредпросмотрПутьКФайлу.Заголовок);
	ПутьКФайлу=СтрЗаменить(ПутьКФайлу, "/", "\");
	
	Если НЕ ПустаяСтрока(ПутьКФайлу) Тогда
		Попытка
			ЗапуститьПриложение(ПутьКФайлу);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОформлениеЭлементов()
	
	Элементы.ДекорацияПредпросмотрПутьКФайлу.Видимость=ЭтоРежимОтладки;
	
	Элементы.ДекорацияПодписиДокумента.Видимость=ДокументПодписан;
	
	Элементы.ЗаполнитьПоШаблону.Видимость=РольЕсть_аДокументыРедактирование;
	
	Попытка
		Элементы.ФормаПровести.Видимость=НЕ ДокументПодписан;
		Элементы.ФормаПровестиИЗакрыть.Видимость=НЕ ДокументПодписан;
	Исключение
		//элемент может быть недоступным для определенных ролей
	КонецПопытки;
	
	Элементы.ФормаПоказатьСписокПользователей.Видимость=аДООбщееСерверПС.ЭтоРольПолныеПрава();
	
	Если НЕ РольЕсть_аДокументыРедактирование Тогда
		Элементы.СсылкиНаФайлыФайлыКарточка.Доступность=Ложь;
	КонецЕсли;
	
	
	Элементы.НадписьИнформация.Видимость=НЕ ЭтоВебКлиент;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагПредпросмотрРазмерКартинкиЧислоПриИзменении(Элемент)
	Если ФлагПредпросмотрРазмерКартинкиЧисло=0 Тогда
		//0 - реальный размер
		Элементы.СтрокаАдресаКартинкиПредпросмотра.РазмерКартинки=РазмерКартинки.РеальныйРазмер;
		
	Иначе
		//1 - пропроциональный
		Элементы.СтрокаАдресаКартинкиПредпросмотра.РазмерКартинки=РазмерКартинки.Пропорционально;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьМетрикуДокумента()
	
	ВедущийОбъект=ВидДокумента;
	Если НЕ ЗначениеЗаполнено(ВедущийОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДлительностьИнтерактивнойРаботыЧасов=(ТекущаяДата()-ДатаВремяОткрытияФормы)/60/60;
	
	ТаблицаМетрики=аДОМетрика.ПолучитьТаблицуМетрики(ВедущийОбъект);
	
	ПараметрМетрики=ПланыВидовХарактеристик.аДокументооборотМетрика.ДлительностьИнтерактивнойРаботыЧасов;
	ЗначениеМетрики=ДлительностьИнтерактивнойРаботыЧасов;
	
	//текущий пользователь
	ОбъектМетрики=ТекущийПользователь;
	аДОМетрика.ОбновитьТаблицуМетрики(ТаблицаМетрики, ВедущийОбъект, ОбъектМетрики, ПараметрМетрики, ЗначениеМетрики, "Вид документа \ Пользователь");
	
	//текущий документ
	ОбъектМетрики=Объект.Ссылка;
	Если ЗначениеЗаполнено(ОбъектМетрики) Тогда
		аДОМетрика.ОбновитьТаблицуМетрики(ТаблицаМетрики, ВедущийОбъект, ОбъектМетрики, ПараметрМетрики, ЗначениеМетрики, "Вид документа \ Корпоративный документ");
	КонецЕсли;
	
	Если Константы.аДокументооборотИспользоватьМетрику.Получить() Тогда
		аДОМетрика.ЗаписатьМетрикуПоТаблице(ТаблицаМетрики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНаОсновании(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Сначала запишите текущий документ.';en='Please save this document.'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	//выберем вид документа
	ПараметрыФормы=Новый Структура("РежимВыбора, МножественныйВыбор", Истина, Ложь);
	ПараметрыФормы.Вставить("Заголовок", "Выберите вид для нового документа");
	
	ОткрытьФорму("Справочник.аДокументооборотВидыДокументов.ФормаВыбора", ПараметрыФормы,,,,, Новый
	ОписаниеОповещения("Оповещение_ЗакрытиеФормыВвестиНаОсновании", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗакрытиеФормыВвестиНаОсновании(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		//вид документа не выбран
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("ЗначениеКопирования", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидДокумента", РезультатЗакрытия);
	
	ОткрытьФорму("Документ.аДокументооборотКорпоративныйДокумент.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеКолонкаСсылка1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьОткрытиеСсылкиПроизвольнойТаблицы("КолонкаСсылка1", "СодержаниеПроизвольнаяТаблица", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытиеСсылкиПроизвольнойТаблицы(ИмяКолонки, ИмяТаблицы, СтандартнаяОбработка)
	
	СтрокаТЧ=Элементы[ИмяТаблицы].ТекущиеДанные;
	
	ВладелецСвойства=ПолучитьТипДанныхТаблицы(ИмяКолонки);
	
	СсылкаНаСвойство=аДООбщееСервер.ПолучитьРеквизитОбъекта(ВладелецСвойства, "СвязьСПВХ");
	ЭтоСвойство=(СсылкаНаСвойство<>Неопределено) И (НЕ СсылкаНаСвойство.Пустая());
	
	Если ЭтоСвойство Тогда
		//откроем форму выбора значения свойства с установленным отбором
		
		СтандартнаяОбработка=Ложь;
		
		ПараметрыОтбора=Новый Структура("Владелец", аДООбщееСервер.ПолучитьРеквизитОбъекта(ВладелецСвойства, "СвязьСПВХ"));
		ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
		
		ФормаСвойств=ПолучитьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаВыбора", ПараметрыФормы);
		
		ОткрытьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаВыбора", ПараметрыФормы,,,,, Новый
		ОписаниеОповещения("Оповещение_ЗакрытиеФормыСсылкиПроизвольнойТаблицы", ЭтотОбъект, Новый Структура("СтрокаТЧ, ИмяКолонки", СтрокаТЧ, ИмяКолонки)));		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗакрытиеФормыСсылкиПроизвольнойТаблицы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ=ДополнительныеПараметры["СтрокаТЧ"];
	ИмяКолонки=ДополнительныеПараметры["ИмяКолонки"];
	
	Если РезультатЗакрытия=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ[ИмяКолонки]=РезультатЗакрытия;	
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиНаФайлыФайлОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	//откроем документ как при команде "Открыть файл"
	ФайлыОткрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРегистрацииПриИзменении(Элемент)
	
	Если Объект.СотрудникРегистратор.Пустая() Тогда
		Если РегистрироватьДокументАвтором Тогда
			Объект.СотрудникРегистратор=Объект.Автор;
		Иначе
			Объект.СотрудникРегистратор=ТекущийПользователь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда
		ОбновитьРегистрационныйНомер();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.МестоРегистрации) И ЗначениеЗаполнено(Объект.СотрудникРегистратор) Тогда
		Объект.МестоРегистрации=аДООбщееСервер.ПолучитьСписокПодразделенийСотрудника(Объект.СотрудникРегистратор, Истина)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БПОткрытьСписокБизнесПроцессовПоДокументу(Команда)
	Если Параметры.Ключ.Пустая() Тогда
		Состояние(НСтр("ru='Недоступно для новых документов. Сначала запишите документ.';en='Not available for new documents. Please save the document first.'"),,,БиблиотекаКартинок.Предупреждение32);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Элементы.Прочее.Видимость Тогда
		Состояние(НСтр("ru='Закладка ""Прочее"" отключена в форме документа.';en='The tab ""Other"" is not available in document form.'"),,,БиблиотекаКартинок.Предупреждение32);
		Возврат;
	КонецЕсли;
	
	ФлагПоказыватьСписокКорпоративныхПроцессов=Истина;
	УстановитьОтображениеСпискаКорпоративныхПроцессов();
	Элементы.Страницы.ТекущаяСтраница=Элементы.Прочее;
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкаСсылка6НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьОткрытиеСсылкиПроизвольнойТаблицы("КолонкаСсылка6", "ПроизвольнаяТаблица", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкаСсылка5НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьОткрытиеСсылкиПроизвольнойТаблицы("КолонкаСсылка5", "ПроизвольнаяТаблица", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкаСсылка4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьОткрытиеСсылкиПроизвольнойТаблицы("КолонкаСсылка4", "ПроизвольнаяТаблица", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкаСсылка3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьОткрытиеСсылкиПроизвольнойТаблицы("КолонкаСсылка3", "ПроизвольнаяТаблица", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкаСсылка2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьОткрытиеСсылкиПроизвольнойТаблицы("КолонкаСсылка2", "ПроизвольнаяТаблица", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеКолонкаСсылка2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьОткрытиеСсылкиПроизвольнойТаблицы("КолонкаСсылка2", "СодержаниеПроизвольнаяТаблица", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеКолонкаСсылка3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьОткрытиеСсылкиПроизвольнойТаблицы("КолонкаСсылка3", "СодержаниеПроизвольнаяТаблица", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеКолонкаСсылка4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьОткрытиеСсылкиПроизвольнойТаблицы("КолонкаСсылка4", "СодержаниеПроизвольнаяТаблица", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеКолонкаСсылка5НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьОткрытиеСсылкиПроизвольнойТаблицы("КолонкаСсылка5", "СодержаниеПроизвольнаяТаблица", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеКолонкаСсылка6НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьОткрытиеСсылкиПроизвольнойТаблицы("КолонкаСсылка6", "СодержаниеПроизвольнаяТаблица", СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВсеФормулыПроизвольнойТаблицы()
	
	Если Элементы.СтраницаПроизвольнаяТаблица.Видимость Тогда
		ИмяТаблицы="ПроизвольнаяТаблица";
	Иначе
		ИмяТаблицы="СодержаниеПроизвольнаяТаблица";
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.ПроизвольнаяТаблица Цикл
		НомерСтроки=СтрокаТЧ.ИсходныйНомерСтроки;
		СтруктураСтроки=ПолучитьСтруктуруСтроки(СтрокаТЧ);
		
		Для Каждого КолонкаТаблицы Из Объект.ВидДокумента.ПроизвольнаяТаблица Цикл
			Если НЕ КолонкаТаблицы.ТипФормула Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки=КолонкаТаблицы.ИмяКолонки;
			РезультатРасчета=РассчитатьЯчейкуПроизвольнойТаблицы(СтруктураСтроки, ИмяКолонки);
			Если РезультатРасчета<>Неопределено Тогда
				СтрокаТЧ[ИмяКолонки]=РезультатРасчета;
				СтруктураСтроки[ИмяКолонки]=РезультатРасчета;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; //строки
	
КонецПроцедуры

&НаСервере
Функция ЗаменитьПараметрыФормулыНаЗначения(ТекстФормулы, СтруктураСтроки)
	
	ТекстФормулыНовый=ТекстФормулы;
	
	ОстатокСтроки=ТекстФормулы;
	
	НачалоПараметра=Найти(ОстатокСтроки, "{");
	Пока НачалоПараметра>0 Цикл
		ОстатокСтроки=Сред(ОстатокСтроки, НачалоПараметра+1);
		КонецПараметра=Найти(ОстатокСтроки, "}");
		
		Если КонецПараметра=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не обнаружение закрытие параметра в формуле "+ТекстФормулы);
			Прервать;
		КонецЕсли;
		
		ИмяПараметра=Сред(ОстатокСтроки, 1, КонецПараметра-1);
		
		Попытка
			ЗначениеПараметра=СтруктураСтроки[ИмяПараметра];
			ЗначениеПараметра=Формат(ЗначениеПараметра, "ЧН=; ЧГ=");
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Параметр """+ИмяПараметра+": "+ОписаниеОшибки());
			Прервать;
		КонецПопытки;
		
		ТекстФормулы=СтрЗаменить(ТекстФормулы, "{"+ИмяПараметра+"}", ЗначениеПараметра);
		
		ОстатокСтроки=Сред(ОстатокСтроки, КонецПараметра+1);
		НачалоПараметра=Найти(ОстатокСтроки, "{");
		
	КонецЦикла;
	
	Возврат ТекстФормулы;
	
КонецФункции

Функция ПолучитьСтруктуруСтроки(ПараметрСтроки)
	
	Если ТипЗнч(ПараметрСтроки)=Тип("Число") Тогда
		//передан номер строки
		СтрокаТЧ=Объект.ПроизвольнаяТаблица.НайтиПоИдентификатору(ПараметрСтроки);
	Иначе
		СтрокаТЧ=ПараметрСтроки;
	КонецЕсли;
	
	СтруктураСтроки=Новый Структура;
	
	Для Каждого КолонкаТаблицы Из Объект.ВидДокумента.ПроизвольнаяТаблица Цикл
		ИмяКолонки=КолонкаТаблицы.ИмяКолонки;
		СтруктураСтроки.Вставить(ИмяКолонки, СтрокаТЧ[ИмяКолонки]);	
	КонецЦикла;
	
	Возврат СтруктураСтроки; 
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииЯчейкиПроизвольнойТаблицы(Элемент)
	
	ЭлементТаблицы=Элемент.Родитель;
	СтрокаТаблицы=ЭлементТаблицы.ТекущиеДанные;
	
	ИмяКолонки=Элемент.Имя;
	ИмяИзменившейсяЯчейки=СтрЗаменить(ИмяКолонки, "Содержание", "");
	//НомерСтроки=ЭлементТаблицы.ТекущаяСтрока;
	
	//найдем все ячейки, которые зависят от текущей
	СписокЗависимыхЯчеек=Новый СписокЗначений;
	ЗаполнитьСписокЗависимыхЯчеек(СписокЗависимыхЯчеек, ИмяИзменившейсяЯчейки);
	
	Если СписокЗависимыхЯчеек.Количество()>0 Тогда
		СтруктураСтроки=ПолучитьСтруктуруСтроки(СтрокаТаблицы.ПолучитьИдентификатор());
		СтруктураПересчитанныхЯчеек=ПересчитатьЗависимыеЯчейки(СписокЗависимыхЯчеек, СтруктураСтроки);
		
		//обновим данные строки
		Для Каждого ЭлементСтруктуры Из СтруктураПересчитанныхЯчеек Цикл
			ИмяКолонки=ЭлементСтруктуры.Ключ;
			Если ИмяКолонки=ИмяИзменившейсяЯчейки Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЯчейки=ЭлементСтруктуры.Значение;
			
			СтрокаТаблицы[ИмяКолонки]=ЗначениеЯчейки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокЗависимыхЯчеек(СписокЯчеек, ИмяОсновнойЯчейки)
	
	ТегЯчейки="{"+ИмяОсновнойЯчейки+"}";
	
	Для Каждого СтрокаТаблицы Из Объект.ВидДокумента.ПроизвольнаяТаблица Цикл
		Если НЕ СтрокаТаблицы.Используется ИЛИ НЕ СтрокаТаблицы.ТипФормула Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(СтрокаТаблицы.ТипДанныхТаблицы, ТегЯчейки)>0 Тогда
			ИмяЗависимойЯчейки=СтрокаТаблицы.ИмяКолонки;
			Если СписокЯчеек.НайтиПоЗначению(ИмяЗависимойЯчейки)=Неопределено Тогда
				СписокЯчеек.Добавить(ИмяЗависимойЯчейки);
				//теперь рекурсивно добавим зависимые ячейки от найденной ячейки
				ЗаполнитьСписокЗависимыхЯчеек(СписокЯчеек, ИмяЗависимойЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПересчитатьЗависимыеЯчейки(СписокЗависимыхЯчеек, СтруктураСтроки)
	СтруктураПересчитанныхЯчеек=Новый Структура;
	
	Для Каждого ЭлементСписка Из СписокЗависимыхЯчеек Цикл
		ИмяЗависимойЯчейки=ЭлементСписка.Значение;
		РезультатРасчетаЯчейки=РассчитатьЯчейкуПроизвольнойТаблицы(СтруктураСтроки, ИмяЗависимойЯчейки);
		
		Если СтруктураСтроки[ИмяЗависимойЯчейки]<>РезультатРасчетаЯчейки Тогда
			//добавим в список для последующего переноса в табличную часть документа
			СтруктураПересчитанныхЯчеек.Вставить(ИмяЗависимойЯчейки, РезультатРасчетаЯчейки);
			
			//обновим данные в структуре строки для возможного использования при расчете других зависимых ячеек 
			СтруктураСтроки[ИмяЗависимойЯчейки]=РезультатРасчетаЯчейки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураПересчитанныхЯчеек;
	
КонецФункции

Функция ПолучитьТекстФормулыКолонки(ИмяКолонки)
	СтрокаПараметров=Объект.ВидДокумента.ПроизвольнаяТаблица.Найти(ИмяКолонки, "ИмяКолонки");	
	Если СтрокаПараметров=Неопределено ИЛИ НЕ СтрокаПараметров.ТипФормула Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокаПараметров.ТипДанныхТаблицы;
	
КонецФункции

Функция РассчитатьЯчейкуПроизвольнойТаблицы(СтруктураСтроки, ИмяКолонки)
	
	ТекстФормулы=ПолучитьТекстФормулыКолонки(ИмяКолонки);
	
	Если ПустаяСтрока(ТекстФормулы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстФормулы=ЗаменитьПараметрыФормулыНаЗначения(ТекстФормулы, СтруктураСтроки);
	
	ТекстФормулы=СтрЗаменить(ТекстФормулы, "=", "");
	ТекстФормулы=СтрЗаменить(ТекстФормулы, ",", ".");
	
	РезультатРасчета="";
	ТекстПрограммы="РезультатРасчета="+ТекстФормулы;
	
	Попытка
		Выполнить(ТекстПрограммы);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки()+": "+ТекстПрограммы);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатРасчета;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьФормулыПроизвольнойТаблицы(Команда)
	ПересчитатьВсеФормулыПроизвольнойТаблицы();
	
КонецПроцедуры

Процедура НастроитьМенюФайлы(ВыбранныйФайл=Неопределено, СбросНастроек=Ложь)
	
	Если ВыбранныйФайл=Неопределено Тогда
		НастройкаДляШаблона=Ложь;
	Иначе
		НастройкаДляШаблона=ВыбранныйФайл.аЗаполнятьДанными;
	КонецЕсли;
	
	Для Каждого СтрокаНастройки Из ВидДокумента.ФайлыДокумента Цикл
		ИмяЭлементаМеню=СтрокаНастройки.ИмяЭлементаМеню;
		
		Если СбросНастроек Тогда
			ЭлементВиден=Истина;
		Иначе
			ЭлементВиден=?(НастройкаДляШаблона, СтрокаНастройки.ВидимостьДляШаблона, СтрокаНастройки.ВидимостьДляФайла);
		КонецЕсли;
		
		Если ИмяЭлементаМеню="ФайлыДокументаФайлыПредпросмотрСКартинкой" Тогда
			ПунктМенюПредпросмотрВиден=ЭлементВиден;
		Иначе
			Элементы[ИмяЭлементаМеню].Видимость=ЭлементВиден;
		КонецЕсли;
		
	КонецЦикла;
	
	//обработаем другие, зависимые элементы
	
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыОткрыть"].Видимость=Элементы["ФайлыДокументаФайлыОткрыть"].Видимость;
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыКарточка"].Видимость=Элементы["СсылкиНаФайлыФайлыКарточка"].Видимость;
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыДобавить"].Видимость=Элементы["ФайлыДокументаФайлыДобавить"].Видимость;
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыОткрытьДляПросмотра"].Видимость=	Элементы["СсылкиНаФайлыФайлыОткрытьДляПросмотра"].Видимость;
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыСканировать"].Видимость=Элементы["ФайлыДокументаФайлыСканировать"].Видимость;
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыУдалить"].Видимость=Элементы["ФайлыДокументаФайлыУдалить"].Видимость;
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыОбновить"].Видимость=Элементы["СсылкиНаФайлыФайлыОбновить"].Видимость;
	
	//обработаем пункт меню Предпросмотр
	УстановитьПредпросмотрНаСервере();
	
	НастройкаПунктовМенюПроизводилась=Истина;
	
	УстановитьКнопкуФайлОсновноеДействие(Неопределено);
	
	Если НЕ РольЕсть_аДокументыРедактирование Тогда
		Элементы.СсылкиНаФайлыФайлыКарточка.Доступность=Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиНаФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//откроем файл
	СтандартнаяОбработка=Ложь;
	ФайлыОткрыть(Неопределено);
	
КонецПроцедуры

#Область КомандаТребуемыеРоли

&НаСервере
Функция ПолучитьСписокРеквизитов()
	СписокРеквизитов=аДООбщееСервер.ПолучитьСписокРеквизитов(ЭтаФорма);	
	Возврат СписокРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ТребуемыеРоли(Команда)
	
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("ИмяФормы", ЭтаФорма.ИмяФормы);
	ПараметрыФормы.Вставить("Заголовок", ЭтаФорма.Окно.Заголовок);
	ПараметрыФормы.Вставить("СписокРеквизитов", ПолучитьСписокРеквизитов());
	
	ОткрытьФорму("Обработка.аДокументооборотТребуемыеПрава.Форма.Форма", ПараметрыФормы,,ЭтаФорма.УникальныйИдентификатор,,,Неопределено);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СостояниеДокументаТекущееПриИзменении(Элемент)
	
	Если НЕ ДокументПодписан Тогда
		Модифицированность=Истина;
		СостояниеБылоИзмененоВручную=Истина;
	Иначе
		//зададим вопрос об изменении статуса
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ОтветНаВопросОбИзмененииСтатусаПодписанногоДокумента", ЭтотОбъект, Новый Структура("Элемент", Элемент)), 
		НСтр("en='Do you want to change a status of signed document?';ru='Вы хотите изменить статус подписанного документа?'"), РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОтветНаВопросОбИзмененииСтатусаПодписанногоДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		СостояниеДокументаТекущее=аДОРаботаСДокументами.ПрочитатьСостояниеДокумента(Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	//сохраним статус новый документа
	аДОРаботаСДокументами.ЗаписатьСостояниеДокумента(Объект.Ссылка, СостояниеДокументаТекущее);
	
	Состояние("Установлен новый статус документа: " + СостояниеДокументаТекущее);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСостояниеДляНовогоДокумента()
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат ВидДокумента.СостояниеДляНовыхДокументов;
	Иначе
		Возврат Справочники.аДокументооборотСостояниеДокументов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_НачалоВыбораВнешнейСсылкиДополнительногоРеквизита(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПрефиксРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
	ИмяРеквизита=СтрЗаменить(Элемент.Имя, ПрефиксРеквизита, "");
	
	ДополнительныйРеквизит=НайтиРеквизитДокументаПоИмени(ИмяРеквизита);
	Если ДополнительныйРеквизит=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	ТипРеквизита=аДООбщееСервер.ПолучитьРеквизитОбъекта(ДополнительныйРеквизит, "ТипРеквизита");
	
	Если аДООбщееСерверПС.ЭтоРеквизитВнешнейБазы(ТипРеквизита) Тогда
		//это реквизит из подключенной внешней базы данных	
		
		СтандартнаяОбработка=Ложь;
		
		ПараметрыФормы=Новый Структура("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТипСсылкиОтбор", аДООбщееСервер.ПолучитьРеквизитОбъекта(ДополнительныйРеквизит, "ВнешнийОбъектТип"));
		ФормаВыбора=ПолучитьФорму("Справочник.аДокументооборотСсылкиНаВнешниеОбъекты.ФормаВыбора", ПараметрыФормы);
		
		ОткрытьФорму("Справочник.аДокументооборотСсылкиНаВнешниеОбъекты.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_ВыборТипаВнешнегоОбъектаЗавершение", ЭтотОбъект, Элемент.Имя));		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ВыборТипаВнешнегоОбъектаЗавершение(Результат, ИмяЭлемента) Экспорт
	
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[ИмяЭлемента]=Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСписокПользователей(Команда)
	Если Параметры.Ключ.Пустая() Тогда
		Сообщить("Сначала запишите объект");
		Возврат;
	КонецЕсли;
	
	СписокПользователей=аДОУправлениеДоступом.ПолучитьСписокПользователейОбъекта(Объект.Ссылка);
	
	Если СписокПользователей.Количество()=0 Тогда
		Сообщить("Список пользователей пуст. Попробуйте перезаписать документ.");
	КонецЕсли;
	
	СписокПользователей.ПоказатьВыборЭлемента(Неопределено, "Пользователи объекта");
	
КонецПроцедуры

Функция ПолучитьСтруктуруНомера()
	
	СтруктураНомера=Новый Структура;
	
	СтруктураНомера.Вставить("НомерЧисло");
	СтруктураНомера.Вставить("СтрокаНомера");
	СтруктураНомера.Вставить("ВидДокументаНумератора");
	СтруктураНомера.Вставить("ОрганизацияНумератора");
	СтруктураНомера.Вставить("ФорматНумератора");
	СтруктураНомера.Вставить("ДатаДокумента", Объект.Дата);
	
	Если ТаблицаНомера.Количество()=0 Тогда
		Возврат СтруктураНомера;
	КонецЕсли;
	
	СтрокаТаблицыНомера=ТаблицаНомера[0];
	СтруктураНомера.НомерЧисло=СтрокаТаблицыНомера.НомерЧисло;
	СтруктураНомера.СтрокаНомера=СтрокаТаблицыНомера.СтрокаНомера;
	СтруктураНомера.ВидДокументаНумератора=СтрокаТаблицыНомера.ВидДокументаНумератора;
	СтруктураНомера.ОрганизацияНумератора=СтрокаТаблицыНомера.ОрганизацияНумератора;
	СтруктураНомера.ФорматНумератора=СтрокаТаблицыНомера.ФорматНумератора;
	
	Возврат СтруктураНомера;
	
КонецФункции

Процедура ОбновитьТаблицуНомера(СтруктураНомера)
	
	ТаблицаНомера.Очистить();
	Если СтруктураНомера=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока=ТаблицаНомера.Добавить();
	СтруктураНомера.Свойство("НомерЧисло", НоваяСтрока.НомерЧисло);
	СтруктураНомера.Свойство("СтрокаНомера", НоваяСтрока.СтрокаНомера);
	СтруктураНомера.Свойство("ВидДокументаНумератора", НоваяСтрока.ВидДокументаНумератора);
	СтруктураНомера.Свойство("ОрганизацияНумератора", НоваяСтрока.ОрганизацияНумератора);
	СтруктураНомера.Свойство("ФорматНумератора", НоваяСтрока.ФорматНумератора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорпоративныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	СтрокаТЧ=Элемент.ТекущиеДанные;
	Если СтрокаТЧ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Задача.аДокументооборотЗадача.ФормаОбъекта", Новый Структура("Ключ", СтрокаТЧ.Задача));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбораФайлы(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ОтветНаВопросПриДобавленииФайлаВРеквизит", ЭтотОбъект, Новый Структура("Элемент", Элемент)), 
		НСтр("en='System needs to save document. Save it now?';ru='Необходимо записать документ. Записать сейчас?'"), РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ФрагментПродолжениеВыбораФайлаВРеквизит(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФрагментПродолжениеВыбораФайлаВРеквизит(Элемент)
	
	Попытка
		ЭтаФорма.Записать();
	Исключение
		аДООбщееСервер.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ПараметрыОтбора=Новый Структура("ВладелецФайлов", Объект.Ссылка);
	
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ВыбранноеЗначение = Неопределено;
	
	ОткрытьФорму("Справочник.Файлы.Форма.аФормаВыбораПоВладельцу", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Подключаемый_ОткрытьНачалоВыбораФайлаЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОтветНаВопросПриДобавленииФайлаВРеквизит(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Элемент=ДополнительныеПараметры.Элемент;
	ФрагментПродолжениеВыбораФайлаВРеквизит(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНачалоВыбораФайлаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[Элемент.Имя]=ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработчикПослеЗаписи(ДокументСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсходныйТекстФункции=ВидДокумента.ТекстФункцииПослеЗаписи;
	
	ТекстФункции=аДОКорпоративныеПроцессы.СформироватьТекстПроцедурыОбработки(ИсходныйТекстФункции);
	
	Если НЕ ПустаяСтрока(ТекстФункции) Тогда
		
		ПрефиксДополнительногоРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
		СтуктураРезультата=аДОРаботаСДокументами.ПодготовитьИВыполнитьПрограммнуюФункцию(Объект, ТекстФункции, ЭтаФорма, ПрефиксДополнительногоРеквизита);
		
		Если СтуктураРезультата=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения обработки ""ПослеЗаписи"" в документе вида ""';en='Runtime error handling ""'")+СокрЛП(ВидДокумента)+"""."+ОписаниеОшибки());
			Возврат;
		КонецЕсли;
		
		Если СтуктураРезультата.Свойство("РезультатВыполнения") Тогда
			Отказ=СтуктураРезультата.Отказ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура СогласоватьНаСервере(УжеСогласован)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотСсылкиПроцессов.БизнесПроцесс
	|ИЗ
	|	РегистрСведений.аДокументооборотСсылкиПроцессов КАК аДокументооборотСсылкиПроцессов
	|ГДЕ
	|	аДокументооборотСсылкиПроцессов.Объект = &Объект
	|	И аДокументооборотСсылкиПроцессов.БизнесПроцесс.Стартован 
	|	И НЕ аДокументооборотСсылкиПроцессов.БизнесПроцесс.Завершен";
	Запрос.УстановитьПараметр("Объект",ЭтаФорма.Объект.Ссылка );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить("По этот документ уже на согласовании");
		УжеСогласован = Истина;
		Возврат;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотСостояниеДокументов.СостояниеДокумента
	|ИЗ
	|	РегистрСведений.аДокументооборотСостояниеДокументов КАК аДокументооборотСостояниеДокументов
	|ГДЕ
	|	аДокументооборотСостояниеДокументов.КорпоративныйДокумент = &КорпоративныйДокумент";
	Запрос.УстановитьПараметр("КорпоративныйДокумент",ЭтотОбъект.Объект.Ссылка );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СостояниеДокумента = Справочники.аДокументооборотСостояниеДокументов.Согласован Тогда
			Сообщить("Этот документ уже согласован");
			УжеСогласован = Истина;
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	
	Попытка
		аДОКорпоративныеПроцессы.СтартоватьБизнесПроцессПоДокументуИШаблону(ЭтаФорма.Объект.Ссылка, Справочники.аДокументооборотВидыПроцессов.НайтиПоНаименованию("Согласование договоров"));
		ЭтаФорма.ТолькоПросмотр = Истина;
		pcru_БизнесПроцессы.СозданиеДокумента(ЭтотОбъект.Объект.Ссылка,Новый Структура);
		
	Исключение
		
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура Согласовать(Команда)
	УжеСогласован = Ложь;
	СогласоватьНаСервере(УжеСогласован);
	Если УжеСогласован Тогда
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаСогласовать.Доступность = ложь;	
		Возврат;
	КонецЕсли; 
	ЭтаФорма.Закрыть();
	
КонецПроцедуры



&НаСервере
Процедура ПрерватьСогласованиеНаСервере()
	аДОРаботаСДокументами.ЗаписатьСостояниеДокумента(ЭтаФорма.Объект.Ссылка,Справочники.аДокументооборотСостояниеДокументов.НайтиПоНаименованию("Не согласован"));
	pcru_БизнесПроцессы.ПрерватьСогласование(Объект.Ссылка);
	ЭтаФорма.ТолькоПросмотр = ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьСогласование(Команда)
	ПрерватьСогласованиеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЛистСогласованияНаСервере(ТД)
	pcru_БизнесПроцессы.pcru_ПечатьЛистаСогласования(Объект.Ссылка,ТД);
КонецПроцедуры

&НаКлиенте
Процедура ЛистСогласования(Команда)
	
	ТД = Неопределено;
	ЛистСогласованияНаСервере(ТД);
	Попытка
		ТД.Показать();
	Исключение
		
	КонецПопытки; 
	
КонецПроцедуры



&НаСервере
Процедура PCRU_ПодразделениеПриИзмененииНаСервере()
	
	Если Объект.ОрганизацииПодразделения.Количество() > 0 Тогда
		Объект.ОрганизацииПодразделения[0].Подразделение = ЭтотОбъект.PCRU_Подразделение;
	Иначе
		Нстр = Объект.ОрганизацииПодразделения.Добавить();
		Нстр.Подразделение = ЭтотОбъект.PCRU_Подразделение;
	КонецЕсли; 
	
	Объект.ОсновноеПодразделение  = ЭтотОбъект.PCRU_Подразделение;
	
	УстановитьПараметровСписков();
	
	
КонецПроцедуры

&НаКлиенте
Процедура PCRU_ПодразделениеПриИзменении(Элемент)
	PCRU_ПодразделениеПриИзмененииНаСервере();
	ВидДокументаПриИзменении(Элемент);
КонецПроцедуры

&НаСервере
Процедура pcru_КонтрагентПриИзмененииНаСервере()
	
	Если Объект.КонтрагентыДоговоры.Количество() > 0 Тогда
		Объект.КонтрагентыДоговоры[0].Контрагент = ЭтотОбъект.pcru_Контрагент;
	Иначе
		Нстр = Объект.КонтрагентыДоговоры.Добавить();
		Нстр.Контрагент = ЭтотОбъект.pcru_Контрагент;
	КонецЕсли; 
	
	Объект.ОсновнойКонтрагент  = ЭтотОбъект.pcru_Контрагент;
	
	УстановитьПараметровСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура pcru_КонтрагентПриИзменении(Элемент)
	pcru_КонтрагентПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура УстановитьПараметровСписков()
	//СписокЗадачПоДокументу.Параметры.УстановитьЗначениеПараметра("Документ", ЭтотОбъект.Объект.Ссылка);
	СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("Документ", ЭтотОбъект.Объект.Ссылка);
	Запрос = Новый Запрос;
	ДатаД = ТекущаяДата();
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотСсылкиПроцессов.БизнесПроцесс.ВедущаяЗадача.Дата  как Дата
	|ИЗ
	|	РегистрСведений.аДокументооборотСсылкиПроцессов КАК аДокументооборотСсылкиПроцессов
	|ГДЕ
	|	аДокументооборотСсылкиПроцессов.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатаД = Выборка.Дата;
	КонецЦикла;
	
	
	//СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("Дата1",ДатаД);
	//СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата2", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Выбор кнопками панели"));
	//СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата1", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Текстовое сообщение"));
	
	БППоДокументу.Параметры.УстановитьЗначениеПараметра("Объект", ЭтотОбъект.Объект.Ссылка);
	ДокументыПроцессыЗадачи.Параметры.УстановитьЗначениеПараметра("Документ", ЭтотОбъект.Объект.Ссылка);
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЭтотОбъект.Объект.КонтрагентыДоговоры.Количество() > 0 Тогда
		ЭтотОбъект.Объект.КонтрагентыДоговоры[0].Контрагент =  	pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(ЭтотОбъект.Объект.Ссылка,"Контрагент") ;
		ЭтотОбъект.Объект.ОсновнойКонтрагент =     	pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(ЭтотОбъект.Объект.Ссылка,"Контрагент") ;
	Иначе
		стр = ЭтотОбъект.Объект.КонтрагентыДоговоры.Добавить();
		стр.Контрагент =  	pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(ЭтотОбъект.Объект.Ссылка,"Контрагент") ;
		ЭтотОбъект.Объект.ОсновнойКонтрагент =  	pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(ЭтотОбъект.Объект.Ссылка,"Контрагент") ;
	КонецЕсли; 
	
КонецПроцедуры


Процедура Подключаемый_РеквизитПриИзменении(Элемент)
	
	ПриЗаписиНаСервере(Ложь, ЭтотОбъект, Неопределено);
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗадачиНаСервере()
	pcru_РаботаСДокументами.pcru_ОбновитьЗадачи(ЭтотОбъект.Объект.Ссылка);
	pcru_РаботаСДокументами.pcru_ОбновитьВыданныеЗадачи(ЭтотОбъект.Объект.Ссылка);
	Элементы.СписокВозможныхИсполнителей.Обновить();		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗадачи(Команда)
	ОбновитьЗадачиНаСервере();
КонецПроцедуры


ИдетПроцессАктивизацииСтроки=Ложь;

СостояниеОбъекта=Новый Структура("ИдетЗакрытиеПоРезультатамВопроса", Ложь);
