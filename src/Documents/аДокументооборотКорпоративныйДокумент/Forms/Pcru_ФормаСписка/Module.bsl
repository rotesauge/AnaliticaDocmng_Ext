
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура СохранитьНастройки() Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("Период", ЭтаФорма.ПериодЖурнала);
	Настройки.Вставить("ТекущийВидДокумента", ЭтаФорма.ТекущийВидДокумента);
	ХранилищеНастроекДанныхФорм.Сохранить("Документ.аДокументооборотКорпоративныйДокумент", "Pcru_ФормаСписка", Настройки);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	Попытка
		ДопНастройки = ХранилищеНастроекДанныхФорм.Загрузить("Документ.аДокументооборотКорпоративныйДокумент", "Pcru_ФормаСписка");
		Если  ДопНастройки <> Неопределено Тогда 
			ЭтаФорма.ПериодЖурнала = ДопНастройки.Период;
			ЭтаФорма.ТекущийВидДокумента = ДопНастройки.ТекущийВидДокумента;
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//&НаКлиенте
//Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
//	СохранитьНастройки();
//КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьНастройки();
	
	УстановитьОтборыФормыСервером();
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

	СохранитьНастройки();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаСервере
Процедура ПериодЖурналаПриИзмененииНаСервере(ФлагИспользования = Истина)
	ПолеОтбора=Новый ПолеКомпоновкиДанных("Дата");
	НашлиЭлемент=Ложь;
	ЭлементыОтбора=ЭтаФорма.Список.Отбор.Элементы;
	
	Попытка
		Если ЭлементыОтбора.Количество()>0 Тогда
			Для НомерОтбора=0 По ЭлементыОтбора.Количество()-1 Цикл
				
				Если НомерОтбора>(ЭлементыОтбора.Количество()-1) Тогда
					//дополнительная проверка из-за возможной ошибки на некоторых платформах
					Прервать;
				КонецЕсли;
				
				ЭлементОтбораДанных=ЭлементыОтбора[НомерОтбора];
				
				Если ТипЗнч(ЭлементОтбораДанных)<>Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭлементОтбораДанных.ЛевоеЗначение=ПолеОтбора Тогда 
					//нашли нужный отбор удалим его, т.к. нам потребуется в дальнейшем два с одинковым именем
					ЭтаФорма.Список.Отбор.Элементы.Удалить(ЭлементОтбораДанных);
					Если ЭлементыОтбора.Количество()=0 Тогда
						Прервать;
					КонецЕсли;
					НомерОтбора=-1; //следующий проход начнется с 0
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;	
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	Если ФлагИспользования Тогда
		//добавим два отбора
		ЭлементОтбораДанных = ЭтаФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = ПолеОтбора;
		ЭлементОтбораДанных.ПравоеЗначение=ЭтаФорма.ПериодЖурнала.ДатаНачала;
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементОтбораДанных = ЭтаФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = ПолеОтбора;
		ЭлементОтбораДанных.ПравоеЗначение=ЭтаФорма.ПериодЖурнала.ДатаОкончания;
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбораДанных.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЖурналаПриИзменении(Элемент)
	ПериодЖурналаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПериодЖурналаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПериодЖурналаПриИзмененииНаСервере(Ложь);
	ЭтаФорма.ПериодЖурнала.ДатаНачала = дата(1,1,1);
	ЭтаФорма.ПериодЖурнала.ДатаОкончания = дата(1,1,1);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ <Наименование>

&НаКлиенте
Процедура ДеревоПапокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоПапок.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.ТекущийВидДокумента=Элементы.ДеревоПапок.ТекущиеДанные.Папка;
	//Если НЕ ЗначениеЗаполнено(ЭтаФорма.ТекущийВидДокумента) Тогда
	//	Состояние(НСтр("en='Folders are not selected.';ru='Строка папок не выбрана.'"));
	//	Возврат;
	//КонецЕсли;
	УстановитьОтборыФормыСервером();
	
КонецПроцедуры
//
&НаСервере
Процедура УстановитьОтборыФормыСервером();
	Если ПараметрыСеанса.Pcru_ТекущееПдразделение.Наименование = "FD" Тогда
	//Если РольДоступна("Pcru_Бухгалтерия") Тогда
	
		Список.ТекстЗапроса=	 "ВЫБРАТЬ
		                    	 |	аДокументооборотКорпоративныйДокумент.Ссылка КАК Ссылка,
		                    	 |	аДокументооборотКорпоративныйДокумент.ПометкаУдаления КАК ПометкаУдаления,
		                    	 |	аДокументооборотКорпоративныйДокумент.Номер КАК Номер,
		                    	 |	аДокументооборотКорпоративныйДокумент.РегистрационныйНомер КАК РегистрационныйНомер,
		                    	 |	аДокументооборотКорпоративныйДокумент.ДатаРегистрации КАК ДатаРегистрации,
		                    	 |	аДокументооборотКорпоративныйДокумент.ТипДокумента КАК ТипДокумента,
		                    	 |	аДокументооборотКорпоративныйДокумент.Дата КАК Дата,
		                    	 |	аДокументооборотКорпоративныйДокумент.Проведен КАК Проведен,
		                    	 |	аДокументооборотКорпоративныйДокумент.Автор КАК Автор,
		                    	 |	аДокументооборотКорпоративныйДокумент.ВажностьДокумента КАК ВажностьДокумента,
		                    	 |	аДокументооборотКорпоративныйДокумент.ВидДокумента КАК ВидДокумента,
		                    	 |	аДокументооборотКорпоративныйДокумент.НаименованиеДокумента КАК НаименованиеДокумента,
		                    	 |	аДокументооборотКорпоративныйДокумент.ОсновнойКонтрагент КАК ОсновнойКонтрагент,
		                    	 |	аДокументооборотКорпоративныйДокумент.ОсновнаяОрганизация КАК ОсновнаяОрганизация,
		                    	 |	аДокументооборотКорпоративныйДокумент.ОсновноеПодразделение КАК ОсновноеПодразделение,
		                    	 |	аДокументооборотКорпоративныйДокумент.ОсновнойПроект КАК ОсновнойПроект,
		                    	 |	аДокументооборотКорпоративныйДокумент.ОсновноеКонтактноеЛицоКонтрагента КАК ОсновноеКонтактноеЛицоКонтрагента,
		                    	 |	аДокументооборотКорпоративныйДокумент.СуммаДокумента КАК СуммаДокумента,
		                    	 |	аДокументооборотКорпоративныйДокумент.Комментарий КАК Комментарий,
		                    	 |	Pcru_ТекущийИсполнительПоДокументу.ТекущийИсполнитель КАК ТекущийИсполнитель,
		                    	 |	аДокументооборотСостояниеДокументов.СостояниеДокумента КАК СостояниеДокумента,
		                    	 |	ЕСТЬNULL(аДокументооборотКорпоративныйДокументСсылкиНаФайлы.Файл.ИндексКартинки, 10) КАК ИндексКартинки,
		                    	 |	&Подразделение КАК Подразделение,
		                    	 |	&Пользователь КАК Пользователь
		                    	 |ИЗ
		                    	 |	Документ.аДокументооборотКорпоративныйДокумент КАК аДокументооборотКорпоративныйДокумент
		                    	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Pcru_ТекущийИсполнительПоДокументу КАК Pcru_ТекущийИсполнительПоДокументу
		                    	 |		ПО (Pcru_ТекущийИсполнительПоДокументу.КорпоративныйДокумент = аДокументооборотКорпоративныйДокумент.Ссылка)
		                    	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.аДокументооборотСостояниеДокументов КАК аДокументооборотСостояниеДокументов
		                    	 |		ПО (аДокументооборотСостояниеДокументов.КорпоративныйДокумент = аДокументооборотКорпоративныйДокумент.Ссылка)
		                    	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.аДокументооборотКорпоративныйДокумент.СсылкиНаФайлы КАК аДокументооборотКорпоративныйДокументСсылкиНаФайлы
		                    	 |		ПО аДокументооборотКорпоративныйДокумент.Ссылка = аДокументооборотКорпоративныйДокументСсылкиНаФайлы.Ссылка
		                    	 |			И (аДокументооборотКорпоративныйДокументСсылкиНаФайлы.НомерСтроки = 1)
		                    	 |ГДЕ
		                    	 |	аДокументооборотКорпоративныйДокумент.ДокументВАрхиве = ЛОЖЬ
		                    	 |	И аДокументооборотКорпоративныйДокумент.ВидДокумента = &ВидДокумента"

	
	КонецЕсли; 
	
		//ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("ВидДокумента", ЗначениеОтбораПоДереву);
	
	ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ПараметрыСеанса.ТекущийПользователь);
//	ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("Подразделение", ПараметрыСеанса.Pcru_ТекущееПдразделение);
	Если ЗначениеЗаполнено(ЭтаФорма.ТекущийВидДокумента)  Тогда
		ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("ВидДокумента", ЭтаФорма.ТекущийВидДокумента);
	Иначе 	
		ЭтаФорма.Список.Параметры.УстановитьЗначениеПараметра("ВидДокумента", Справочники.аДокументооборотВидыДокументов.НайтиПоНаименованию("Заявка на оплату"));
	КонецЕсли;
	
	Элементы.СписокВсе.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВсеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.СписокВсе.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПоказатьЗначение(,Элементы.СписокВсе.ТекущиеДанные.Ссылка);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

