
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция НаименованиеВидаДокумента()
	
	Возврат ЭтотОбъект.Объект.ВидДокумента.Наименование	;
	
КонецФункции // НаименованиеВидаДокумента()

&НаКлиенте
Процедура Pcru_ОтправитьНаСогласованиеПосле(Команда)
	УжеСогласован = Ложь;
	Pcru_ОтправитьНаСогласованиеПослеНаСервере(УжеСогласован);
	Если УжеСогласован Тогда
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаСогласовать.Доступность = ложь;	
		Возврат;
	КонецЕсли; 
	ЭтаФорма.Закрыть();
	
КонецПроцедуры
&НаСервере
Процедура Pcru_ОтправитьНаСогласованиеПослеНаСервере(УжеСогласован)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотСсылкиПроцессов.БизнесПроцесс
	|ИЗ
	|	РегистрСведений.аДокументооборотСсылкиПроцессов КАК аДокументооборотСсылкиПроцессов
	|ГДЕ
	|	аДокументооборотСсылкиПроцессов.Объект = &Объект
	|	И аДокументооборотСсылкиПроцессов.БизнесПроцесс.Стартован 
	|	И НЕ аДокументооборотСсылкиПроцессов.БизнесПроцесс.Завершен";
	Запрос.УстановитьПараметр("Объект",ЭтаФорма.Объект.Ссылка );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить("Этот документ уже на согласовании");
		УжеСогласован = Истина;
		Возврат;
	КонецЦикла;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотСостояниеДокументов.СостояниеДокумента
	|ИЗ
	|	РегистрСведений.аДокументооборотСостояниеДокументов КАК аДокументооборотСостояниеДокументов
	|ГДЕ
	|	аДокументооборотСостояниеДокументов.КорпоративныйДокумент = &КорпоративныйДокумент";
	Запрос.УстановитьПараметр("КорпоративныйДокумент",ЭтотОбъект.Объект.Ссылка );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СостояниеДокумента = Справочники.аДокументооборотСостояниеДокументов.Согласован или Выборка.СостояниеДокумента = Справочники.аДокументооборотСостояниеДокументов.НайтиПоНаименованию("Оплачен") Тогда
			Сообщить("Этот документ уже согласован");
			УжеСогласован = Истина;
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	
	Попытка
		ВидБП = Неопределено;
		Для каждого Вид Из ЭтаФорма.Объект.ВидДокумента.ДоступныеВидыБизнесПроцессов Цикл
			Если Вид.Доступен Тогда
				ВидБП = Вид.ВидБизнесПроцесса;
			КонецЕсли; 
		КонецЦикла; 
		Если ВидБП <> Неопределено Тогда
			аДОКорпоративныеПроцессы.СтартоватьБизнесПроцессПоДокументуИШаблону(ЭтаФорма.Объект.Ссылка,ВидБП);
			ЭтаФорма.ТолькоПросмотр = Истина;
			Элементы.ФормаПрерватьСогласовоние.Доступность = Истина;
			pcru_БизнесПроцессы.СозданиеДокумента(ЭтотОбъект.Объект.Ссылка,Новый Структура);
		КонецЕсли; 
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	
КонецПроцедуры

&НаСервере
Процедура Pcru_ПриОткрытииПослеНаСервере()
	 ЭтаСсылка = Объект.Ссылка;
КонецПроцедуры

&НаКлиенте
Процедура Pcru_ПриОткрытииПосле(Отказ)
	
	ОбновитьСсылкиНаФайлы();
	Модифицированность = Ложь;
	
	Pcru_ПриОткрытииПослеНаСервере();
КонецПроцедуры

&НаСервере
Процедура pcru_КонтрагентПриИзмененииНаСервере()
	
	Если Объект.КонтрагентыДоговоры.Количество() > 0 Тогда
		Объект.КонтрагентыДоговоры[0].Контрагент = ЭтотОбъект.pcru_Контрагент;
	Иначе
		Нстр = Объект.КонтрагентыДоговоры.Добавить();
		Нстр.Контрагент = ЭтотОбъект.pcru_Контрагент;
	КонецЕсли; 
	
	Объект.ОсновнойКонтрагент  = ЭтотОбъект.pcru_Контрагент;
	
	УстановитьПараметровСписков();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметровСписков()
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗадачПоДокументу.Параметры.УстановитьЗначениеПараметра("Документ", ЭтотОбъект.Объект.Ссылка);
	
	//СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("Параметр1", ЭтотОбъект.Объект.пкру_РаспределениеЗатрат.Выгрузить().ВыгрузитьКолонку("пкру_СтатьяРасходов"));
	//СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("Параметр2", ЭтотОбъект.Объект.пкру_РаспределениеЗатрат.Выгрузить().ВыгрузитьКолонку("пкру_CostCentr"));
	//СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("Параметр3", ЭтотОбъект.Объект.ОсновнойКонтрагент);
	//СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("Параметр4", ЭтотОбъект.Объект.ОсновноеПодразделение);
	//СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("Параметр5", ?(ЭтотОбъект.Объект.СуммаДокумента > 249000,250000,0));
	
	СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("Документ", ЭтотОбъект.Объект.Ссылка);
//	СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("Дата1", ТекущаяДата());
//	СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Выбор кнопками панели"));
//	СписокВозможныхИсполнителей.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата2", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Текстовое сообщение"));
	
	БППоДокументу.Параметры.УстановитьЗначениеПараметра("Объект", ЭтотОбъект.Объект.Ссылка);
	ДокументыПроцессыЗадачи.Параметры.УстановитьЗначениеПараметра("Документ", ЭтотОбъект.Объект.Ссылка);
	
	ЭтаФорма.СписокЗадач.Параметры.УстановитьЗначениеПараметра("Документ", ЭтотОбъект.Объект.Ссылка);

	
КонецПроцедуры



&НаКлиенте
Процедура pcru_КонтрагентПриИзменении(Элемент)
	pcru_КонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура PCRU_ПодразделениеПриИзмененииНаСервере()
	
	Если Объект.ОрганизацииПодразделения.Количество() > 0 Тогда
		Объект.ОрганизацииПодразделения[0].Подразделение = ЭтотОбъект.PCRU_Подразделение;
	Иначе
		Нстр = Объект.ОрганизацииПодразделения.Добавить();
		Нстр.Подразделение = ЭтотОбъект.PCRU_Подразделение;
	КонецЕсли; 
	
	Объект.ОсновноеПодразделение  = ЭтотОбъект.PCRU_Подразделение;
	
	УстановитьПараметровСписков();
	
	
КонецПроцедуры

&НаКлиенте
Процедура PCRU_ПодразделениеПриИзменении(Элемент)
	PCRU_ПодразделениеПриИзмененииНаСервере();
	ВидДокументаПриИзменении(Элемент);
КонецПроцедуры

&НаСервере
Процедура pcru_договорКонтрагентаПриИзмененииНаСервере()
	
	Если Объект.КонтрагентыДоговоры.Количество() > 0 Тогда
		Объект.КонтрагентыДоговоры[0].ДоговорКонтрагента = ЭтотОбъект.pcru_договорКонтрагента;
	Иначе
		Нстр = Объект.КонтрагентыДоговоры.Добавить();
		Нстр.ДоговорКонтрагента = ЭтотОбъект.pcru_договорКонтрагента;
	КонецЕсли; 
	
	//ЭтотОбъект.pcru_Контрагент	=Объект.КонтрагентыДоговоры[0].Контрагент;
	//ЭтотОбъект.PCRU_Подразделение	=Объект.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//ЭтотОбъект.PCRU_Подразделение	 Объект.ОрганизацииПодразделения[0].Подразделение;
КонецПроцедуры

&НаКлиенте
Процедура pcru_договорКонтрагентаПриИзменении(Элемент)
	pcru_договорКонтрагентаПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура РеквизитФормыУстановить(Имя,РеквизитФормы)
	
	ПараметрыОтбора = Новый Структура;
	ДР = справочники.аДокументооборотДополнительныеРеквизиты.НайтиПоНаименованию(Имя);
	ПараметрыОтбора.Вставить("ДополнительныйРеквизит",ДР );
	НайденныеСтроки = Объект.ДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() >  0 Тогда
		Для каждого СтрокаДопРеквизита Из НайденныеСтроки Цикл
			РеквизитФормы = СтрокаДопРеквизита.ЗначениеРеквизита ;
		КонецЦикла;
	КонецЕсли; 
	
	
КонецПроцедуры



&НаСервере
Процедура РеквизитФормыПриИзмененииНаСервере(Имя,Значение)
	
	ПараметрыОтбора = Новый Структура;
	ДР = справочники.аДокументооборотДополнительныеРеквизиты.НайтиПоНаименованию(Имя);
	ПараметрыОтбора.Вставить("ДополнительныйРеквизит",ДР );
	НайденныеСтроки = Объект.ДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() >  0 Тогда
		Для каждого СтрокаДопРеквизита Из НайденныеСтроки Цикл
			СтрокаДопРеквизита.ЗначениеРеквизита  = Значение;
		КонецЦикла;
	Иначе
		СтрокаДопРеквизита = Объект.ДополнительныеРеквизиты.Добавить();
		СтрокаДопРеквизита.ДополнительныйРеквизит = ДР;
		СтрокаДопРеквизита.ЗначениеРеквизита  = Значение;
	КонецЕсли; 
	
	ЭтаФорма.Записать();
КонецПроцедуры


&НаКлиенте
Процедура пкру_ЭтоТендерПриИзменении(Элемент)
	РеквизитФормыПриИзмененииНаСервере("Это Тендер",ЭтаФорма.pcru_ЭтоТендер);
КонецПроцедуры


&НаКлиенте
Процедура пкру_ОкончательныйСчетПриИзменении(Элемент)
	РеквизитФормыПриИзмененииНаСервере("Окончательный Счет",ЭтаФорма.pcru_ОкончательныйСчет);
КонецПроцедуры


&НаКлиенте
Процедура пкру_ПредоплатаПриИзменении(Элемент)
	РеквизитФормыПриИзмененииНаСервере("Предоплата",ЭтаФорма.pcru_Предоплата);
КонецПроцедуры


&НаКлиенте
Процедура пкру_ЧастичныйПлатежПриИзменении(Элемент)
	РеквизитФормыПриИзмененииНаСервере("Частичный платеж",ЭтаФорма.pcru_ЧастичныйПлатеж);
КонецПроцедуры

&НаКлиенте
Процедура пкру_ОписаниеТендераПриИзменении(Элемент)
	РеквизитФормыПриИзмененииНаСервере("Описание Тендера",ЭтаФорма.pcru_ОписаниеТендера);
КонецПроцедуры

&НаСервере
Процедура пкру_РаспределениеЗатратПриИзмененииНаСервере()
	
	Объект.СуммаДокумента = 0;
	Для каждого СтрокаЗатрат Из Объект.пкру_РаспределениеЗатрат Цикл
		Объект.СуммаДокумента = Объект.СуммаДокумента + СтрокаЗатрат.Сумма;
	КонецЦикла;
	
	УстановитьПараметровСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура пкру_РаспределениеЗатратПриИзменении(Элемент)
	пкру_РаспределениеЗатратПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура Pcru_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	 УстановитьПараметровСписков();

	
	//Pcru_ПрочитатьДополнительныеРеквизиты();
	
	Элементы.РаспределениеЗатрат.Видимость =  ЭтотОбъект.Объект.ВидДокумента.Наименование = "Заявка на оплату";
	Элементы.ДоговорКонтрагента.Видимость =  ЭтотОбъект.Объект.ВидДокумента.Наименование = "Входящий";
	
	
	БППоДокументу.Параметры.УстановитьЗначениеПараметра("Объект", ЭтотОбъект.Объект.Ссылка);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Pcru_РазрешениеНаРедактированиеСрезПоследних.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.Pcru_РазрешениеНаРедактирование.СрезПоследних КАК Pcru_РазрешениеНаРедактированиеСрезПоследних
	|ГДЕ
	|	Pcru_РазрешениеНаРедактированиеСрезПоследних.Пользователь = &Пользователь
	|	И Pcru_РазрешениеНаРедактированиеСрезПоследних.Документ = &Документ
	|	И РАЗНОСТЬДАТ(Pcru_РазрешениеНаРедактированиеСрезПоследних.Период, &ТД, МИНУТА) < 15";
	Запрос.УстановитьПараметр("Документ", ЭтотОбъект.Объект.Ссылка);
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТД",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭтотОбъект.Доступность = Истина;
		ЭтотОбъект.ТолькоПросмотр = Ложь;

		Для Каждого Элемент Из Элементы Цикл
			Попытка
				Элемент.Доступность = Истина;
				Элемент.ТолькоПросмотр = Ложь;
			Исключение
			КонецПопытки; 
		КонецЦикла;
		
	Элементы.pcru_Контрагент.Доступность = Ложь;	
	Элементы.pcru_Контрагент1.Доступность = Ложь;
	Элементы.СуммаДокумента.Доступность = Ложь;
	Элементы.СуммаДокумента1.Доступность = Ложь;
	Элементы.СуммаДокумента2.Доступность = Ложь;
	//Элементы.СуммаДокумента2.Доступность = Ложь;
	Элементы.пкру_РаспределениеЗатрат.Доступность = Ложь;
	КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура Pcru_ПрочитатьДополнительныеРеквизиты()
	
	//проверим, все ли дополнительные реквизиты вида присутствуют в списке реквизитов документа
	ОбновитьСписокДополнительныхРеквизитовДокумента(ВидДокумента);
	
	//прочитаем дополнительные реквизиты из табличной части документа и
	//создадим в группе ГруппаДополнительныеРеквизиты поля ввода дополнительных реквизитов
	
	//создадим массив дополнительных реквизитов
	МассивДобавляемыхРеквизитов=Новый Массив;
	МассивУдаляемыхРеквизитов=Новый Массив;
	
	Для Каждого ЭлементСписка Из СписокДополнительныхРеквизитов Цикл
		УдаляемыйРеквизит=ЭлементСписка.Значение;
		МассивУдаляемыхРеквизитов.Добавить(УдаляемыйРеквизит);
		
		ЭлементРеквизитаФормы=Элементы.Найти(УдаляемыйРеквизит);
		//удалим элемент формы
		Если ЭлементРеквизитаФормы<>Неопределено Тогда
			Элементы.Удалить(ЭлементРеквизитаФормы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокДополнительныхРеквизитов.Очистить();
	
	ПрефиксРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
	
	СписокНаименованийДобавленныхРеквизитов=Новый СписокЗначений;
	
	ДопРеквизитыВидаДокумента=ВидДокумента.ДополнительныеРеквизиты;
	
	ИспользоватьИностранныеНаименования=аДООбщееСервер.ИспользоватьИностранныеНаименованияВФормахПроцессов();
	
	Для Каждого СтрокаТаблицы Из Объект.ДополнительныеРеквизиты Цикл
		ДополнительныйРеквизит=СтрокаТаблицы.ДополнительныйРеквизит;
		Если ДополнительныйРеквизит.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		//проверим, есть ли этот реквизит в выбранном виде документа
		Если ДопРеквизитыВидаДокумента.Найти(ДополнительныйРеквизит, "ДополнительныйРеквизит")=Неопределено Тогда
			//в виде документа нет этого доп. реквизита (возможно он остался в документе при переключении вида документа)
			Продолжить;
			
		КонецЕсли;	
		
		ЗначениеРеквизита=СтрокаТаблицы.ЗначениеРеквизита;
		
		ИмяРеквизита=ПрефиксРеквизита+ДополнительныйРеквизит.ИмяРеквизитаДляФункций;
		ЭлементРеквизитаФормы=Элементы.Найти(ИмяРеквизита);
		Если ЭлементРеквизитаФормы=Неопределено Тогда
			//реквизита еще нет
			//НаименованиеТипаРеквизита=аДОКорпоративныеПроцессы.ПолучитьНаименованиеТипаРеквизита(ДополнительныйРеквизит);
			ТипРеквизита=аДОКорпоративныеПроцессы.ПолучитьОписаниеТипаРеквизитаПроцесса(ДополнительныйРеквизит);
			
			//сформируем наименование реквизита
			Если ПустаяСтрока(ДополнительныйРеквизит.НаименованиеВФорме) Тогда
				НаименованиеРеквизита=СокрЛП(ДополнительныйРеквизит.Наименование);
			Иначе
				//НаименованиеРеквизита=ДополнительныйРеквизит.НаименованиеВФорме;
				НаименованиеРеквизита=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(ДополнительныйРеквизит.НаименованиеВФормеИностранное), ДополнительныйРеквизит.НаименованиеВФормеИностранное, ДополнительныйРеквизит.НаименованиеВФорме);
			КонецЕсли;
			
			Попытка
				Если НЕ СписокНаименованийДобавленныхРеквизитов.НайтиПоЗначению(ИмяРеквизита)=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СписокНаименованийДобавленныхРеквизитов.Добавить(ИмяРеквизита);
				
				НовыйРеквизитФормы=Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , НаименованиеРеквизита, Истина);
				Если МассивДобавляемыхРеквизитов.Найти(НовыйРеквизитФормы)=Неопределено Тогда
					МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизитФормы);
					СписокДополнительныхРеквизитов.Добавить(НовыйРеквизитФормы.Имя);
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		Иначе
			ЭлементРеквизитаФормы.Видимость=Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	//добавим реквизиты в список реквизитов
	Попытка
		ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	РодительскийЭлемент = Элементы.ГруппаДополнительныеРеквизиты1;
	
	ПрефиксРеквизита=ПолучитьПрефиксДополнительногоРеквизита();
	
	Для Каждого СтрокаТаблицы Из Объект.ДополнительныеРеквизиты Цикл
		ДополнительныйРеквизит=СтрокаТаблицы.ДополнительныйРеквизит;
		Если ДополнительныйРеквизит.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		//проверим, есть ли этот реквизит в выбранном виде документа
		Если ДопРеквизитыВидаДокумента.Найти(ДополнительныйРеквизит, "ДополнительныйРеквизит")=Неопределено Тогда
			//в виде документа нет этого доп. реквизита (возможно он остался в документе при переключении вида документа)
			Продолжить;
			
		КонецЕсли;	
		
		ЗначениеРеквизита=СтрокаТаблицы.ЗначениеРеквизита;
		
		ИмяРеквизита=ПрефиксРеквизита+ДополнительныйРеквизит.ИмяРеквизитаДляФункций;
		НазваниеТипаРеквизита=аДОКорпоративныеПроцессы.ПолучитьНаименованиеТипаРеквизита(ДополнительныйРеквизит);
		
		Если НЕ Элементы.Найти(ИмяРеквизита)=Неопределено Тогда
			//такой реквизит уже существует
			Продолжить;
		КонецЕсли;
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), РодительскийЭлемент);
		
		НаименованиеТипаРеквизита=аДОКорпоративныеПроцессы.ПолучитьНаименованиеТипаРеквизита(ДополнительныйРеквизит);
		
		Если ДополнительныйРеквизит.ТипРеквизита=Справочники.аДокументооборотСписокМетаданных.Булево Тогда
			//флажок
			Элемент.Вид=ВидПоляФормы.ПолеВвода;
			Элемент.ВыбиратьТип=Ложь;
			
		Иначе	
			//поле ввода
			Элемент.Вид=ВидПоляФормы.ПолеВвода;
			Элемент.ВыбиратьТип=Ложь;
			Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Лево;	
			Элемент.АвтоМаксимальнаяШирина=Ложь;
			
			Если ДополнительныйРеквизит.ТипРеквизита.РеквизитДлина>80
				И ДополнительныйРеквизит.ТипРеквизита.Родитель=Справочники.аДокументооборотСписокМетаданных.Строки 
				Тогда
				Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Верх;
				Элемент.МногострочныйРежим=Истина;
				
			Иначе
				Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Лево;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент.Вид=ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным=ИмяРеквизита; //привяжем в реквизиту
		Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Лево;
		
		Если ДополнительныйРеквизит.ТипРеквизита.Родитель=Справочники.аДокументооборотСписокМетаданных.Числа 
			ИЛИ ДополнительныйРеквизит.ТипРеквизита=Справочники.аДокументооборотСписокМетаданных.Дата 
			Тогда
			Элемент.КнопкаРегулирования=Истина;
			Элемент.РастягиватьПоГоризонтали=Ложь;
			
		КонецЕсли;
		
		Если НаименованиеТипаРеквизита="Дата" Тогда
			Элемент.КнопкаВыбора=Истина;
			Элемент.РастягиватьПоГоризонтали=Ложь;
			
		КонецЕсли;
		
		Если ДополнительныйРеквизит.Системный Тогда
			Элемент.Видимость=Ложь;
		Иначе
			
			Если ДополнительныйРеквизит.ТипРеквизита.Родитель=Справочники.аДокументооборотСписокМетаданных.Числа Тогда
				Элемент.Ширина=16;
				
			ИначеЕсли ДополнительныйРеквизит.ТипРеквизита=Справочники.аДокументооборотСписокМетаданных.Дата Тогда
				Элемент.Ширина=16;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//подключим необходимые обработчики
		
		Если НаименованиеТипаРеквизита="СправочникСсылка.аДокументооборотСсылкиНаВнешниеОбъекты" Тогда
			Элемент.УстановитьДействие("Открытие", "Подключаемый_ОткрытьВнешнююСсылкуДополнительногоРеквизита");
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораВнешнейСсылкиДополнительногоРеквизита");
			
		ИначеЕсли НаименованиеТипаРеквизита="СправочникСсылка.ЗначенияСвойствОбъектов" Тогда
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораЗначенияСвойстваОбъекта");
			Элемент.УстановитьДействие("АвтоПодбор", "Подключаемый_ЗначениеПоУмолчаниюАвтоПодборСвойстваОбъекта");
			Элемент.УстановитьДействие("ОкончаниеВводаТекста", "Подключаемый_ЗначениеПоУмолчаниюОкончаниеВводаТекстаСвойстваОбъекта");
			
		ИначеЕсли НаименованиеТипаРеквизита="СправочникСсылка.Файлы" Тогда
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораФайлы");
			Элемент.КнопкаСоздания=Ложь;
			Элемент.ИсторияВыбораПриВводе=ИсторияВыбораПриВводе.НеИспользовать;
		КонецЕсли;
		
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_РеквизитПриИзменении");
		
		Если НазваниеТипаРеквизита="Дата" ИЛИ НазваниеТипаРеквизита="Число" Тогда
			Элемент.КнопкаРегулирования=Истина;
		Иначе
			Элемент.КнопкаРегулирования=Неопределено;
		КонецЕсли;
		
		Если НазваниеТипаРеквизита="Дата" Тогда
			Элемент.КнопкаВыбора=Истина;
		Иначе
			Элемент.КнопкаВыбора=Неопределено;
		КонецЕсли;
		
		//установим значение реквизиту
		ЭтаФорма[ИмяРеквизита]=ЗначениеРеквизита;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Pcru_ПриЗакрытииПослеНаСервере()
	//
КонецПроцедуры

&НаСервере
Процедура Pcru_ОбновитьЗадачиПослеНаСервере()
	pcru_РаботаСДокументами.pcru_ОбновитьЗадачи(ЭтотОбъект.Объект.Ссылка);
	pcru_РаботаСДокументами.pcru_ОбновитьВыданныеЗадачи(ЭтотОбъект.Объект.Ссылка);
	Элементы.СписокВозможныхИсполнителей.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Pcru_ОбновитьЗадачиПосле(Команда)
	Pcru_ОбновитьЗадачиПослеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Pcru_ПередЗакрытиемВместо(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	//Если ЗавершениеРаботы Тогда
	//Отказ = Истина;
	//   	ПодключитьОбработчикОжидания("СохранениеНесохраненныхДанных", 1, Истина);
	//	Возврат;
	//КонецЕсли; 
	//
	//
	//
	//ЗаписатьНастройкиФормы();
	//
	//Если Модифицированность Тогда
	//	
	//	Если НЕ СостояниеОбъекта.ИдетЗакрытиеПоРезультатамВопроса Тогда
	//		//зададим вопрос
	//		СостояниеОбъекта.ИдетЗакрытиеПоРезультатамВопроса=Истина; 
	//		
	//		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("en='Document has been changed. Do you want to save changes?';ru='Документ был изменен. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена,,,аОбщееКлиентПС.ЗаголовокДиалога());
	//		
	//		//пока отменим закрытие, так как решение будет принято по результатам ответа пользователя на вопрос
	//		Отказ=Истина;
	//		СтандартнаяОбработка=Ложь;
	//		
	//		Возврат;
	//	Иначе
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		ТекстПредупреждения = "Перед закрытием приложения следует завершить работу с файлами";
		СтандартнаяОбработка = Ложь; 
       	ПодключитьОбработчикОжидания("СохранениеНесохраненныхДанных", 1, Истина);
		Возврат;
	КонецЕсли; 
	Pcru_ПередЗакрытием1(Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Pcru_ПередЗакрытием1(Отказ, СтандартнаяОбработка)
	ЗаписатьНастройкиФормы();
	
	Если Модифицированность Тогда
		
		Если НЕ СостояниеОбъекта.ИдетЗакрытиеПоРезультатамВопроса Тогда
			//зададим вопрос
			СостояниеОбъекта.ИдетЗакрытиеПоРезультатамВопроса=Истина; 
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("en='Document has been changed. Do you want to save changes?';ru='Документ был изменен. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена,,,аОбщееКлиентПС.ЗаголовокДиалога());
			
			//пока отменим закрытие, так как решение будет принято по результатам ответа пользователя на вопрос
			Отказ=Истина;
			СтандартнаяОбработка=Ложь;
			
			Возврат;
		Иначе
			
		КонецЕсли;
		
	КонецЕсли;
	Pcru_ПередПриЗакрытииПослеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Pcru_ПередПриЗакрытииПослеНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотКорпоративныйДокументСсылкиНаФайлы.Файл
	|ИЗ
	|	Документ.аДокументооборотКорпоративныйДокумент.СсылкиНаФайлы КАК аДокументооборотКорпоративныйДокументСсылкиНаФайлы
	|ГДЕ
	|	аДокументооборотКорпоративныйДокументСсылкиНаФайлы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Объект.Ссылка );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Файл.Редактирует)  Тогда
			РаботаСФайламиСлужебныйВызовСервера.ОсвободитьФайл(Выборка.Файл);
		КонецЕсли;  
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура Pcru_ПриЗакрытииВместо(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
       	ПодключитьОбработчикОжидания("СохранениеНесохраненныхДанных", 1, Истина);
		Возврат;
	КонецЕсли; 
	
	
	Если НЕ БылНовым Тогда
		ЗафиксироватьПросмотрДокумента();
		Оповестить("ПросмотренДокумент", ТекущийПользователь, Объект.Ссылка);
	КонецЕсли;
	
	Если ТребуетсяЗаписатьСообщение И НЕ Объект=Неопределено Тогда
		Отказ=Ложь;
		аДОСистемаСообщений.ЗаписьСообщения(Объект.Ссылка, Отказ, БылНовым);
	КонецЕсли;
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		аДОПривилегированныеОперации.ЗафиксироватьЗакрытиеОбъекта(Объект.Ссылка);	
	КонецЕсли;
	
	ЗаписатьМетрикуДокумента();
		
КонецПроцедуры


&НаКлиенте
Процедура СохранениеНесохраненныхДанных() Экспорт
	
	Если НЕ БылНовым Тогда
		ЗафиксироватьПросмотрДокумента();
		Оповестить("ПросмотренДокумент", ТекущийПользователь, Объект.Ссылка);
	КонецЕсли;
	
	Если ТребуетсяЗаписатьСообщение И НЕ Объект=Неопределено Тогда
		Отказ=Ложь;
		аДОСистемаСообщений.ЗаписьСообщения(Объект.Ссылка, Отказ, БылНовым);
	КонецЕсли;
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		аДОПривилегированныеОперации.ЗафиксироватьЗакрытиеОбъекта(Объект.Ссылка);	
	КонецЕсли;
	
	ЗаписатьМетрикуДокумента();
	
		ЗаписатьНастройкиФормы();
	
	Если Модифицированность Тогда
		
		Если НЕ СостояниеОбъекта.ИдетЗакрытиеПоРезультатамВопроса Тогда
			//зададим вопрос
			СостояниеОбъекта.ИдетЗакрытиеПоРезультатамВопроса=Истина; 
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("en='Document has been changed. Do you want to save changes?';ru='Документ был изменен. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена,,,аОбщееКлиентПС.ЗаголовокДиалога());
			
			//пока отменим закрытие, так как решение будет принято по результатам ответа пользователя на вопрос
			Отказ=Истина;
			СтандартнаяОбработка=Ложь;
			
			Возврат;
		Иначе
			
		КонецЕсли;
		
	КонецЕсли;

	
	ЗавершитьРаботуСистемы(Ложь);
КонецПроцедуры


&НаСервере
Процедура Pcru_PCRU_ПодразделениеПриИзмененииПослеНаСервере()
	
	Если Объект.ОрганизацииПодразделения.Количество() > 0 Тогда
		Объект.ОрганизацииПодразделения[0].Подразделение = ЭтотОбъект.PCRU_Подразделение;
	Иначе
		Нстр = Объект.ОрганизацииПодразделения.Добавить();
		Нстр.Подразделение = ЭтотОбъект.PCRU_Подразделение;
	КонецЕсли; 
	
	Объект.ОсновноеПодразделение  = ЭтотОбъект.PCRU_Подразделение;
	
	УстановитьПараметровСписков();
	
	
КонецПроцедуры

&НаКлиенте
Процедура Pcru_PCRU_ПодразделениеПриИзмененииПосле(Элемент)
	Pcru_PCRU_ПодразделениеПриИзмененииПослеНаСервере();
	ВидДокументаПриИзменении(Элемент);
	
КонецПроцедуры


&НаКлиенте
Процедура Pcru_ФайлыОткрытьДляПросмотраПеред(Команда)
	аДООбщееСервер.СохранитьНастройкуПользователя("Документ", "ПоследняяФайловаяОперация", "Открыть файл");	
КонецПроцедуры

