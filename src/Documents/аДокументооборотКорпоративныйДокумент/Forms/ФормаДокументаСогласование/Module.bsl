&НаКлиенте
Перем ИдетПроцессАктивизацииСтроки;




&НаСервере
Процедура СуммаДокументаПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	СуммаДокументаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыПодписи(Команда)
	ФормаПодписей=ПолучитьФорму("ФормаПодписей");
	ФормаПодписей.ОткрытьМодально();
КонецПроцедуры

&НаСервере
Процедура СогласоватьНаСервере()
	аДОКорпоративныеПроцессы.СтартоватьБизнесПроцессПоДокументуИШаблону(ЭтаФорма.Объект.Ссылка, Справочники.аДокументооборотВидыПроцессов.НайтиПоНаименованию("Согласование заявки на оплату"));
КонецПроцедуры

&НаКлиенте
Процедура Согласовать(Команда)
	СогласоватьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РольЕсть_аДокументыРедактирование=ПравоДоступа("Редактирование", Метаданные.Документы.аДокументооборотКорпоративныйДокумент);	
	
	
	ОткрыватьФайлыДокументовДляПросмотра = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиПользователя",
	"ОткрыватьФайлыДокументовДляПросмотра",
	Ложь);

	
КонецПроцедуры

//*************************************************************



&НаКлиенте
Процедура Обработчик_ОкончаниеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	УстановитьВидимостьКнопкиЗакрытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавить(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ФайлыДобавитьЗавершение", ЭтотОбъект), НСтр("en='Please save the document first. Save it now?';ru='Сначала запишите документ. Записать сейчас?'"), РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ФайлыДобавитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
		
	Иначе
		Попытка
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		Исключение
			аДООбщееКлиент.СообщитьОбОшибке(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ФайлыДобавитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавитьФрагмент()
	
	Перем ПараметрыВыполнения, ФормаВариантаСозданияФайла;
	
	УстановитьКнопкуФайлОсновноеДействие("Добавить");
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыВыполнения.Вставить("ФормаВладелец", ЭтаФорма);
	ПараметрыВыполнения.Вставить("РежимСоздания", 2); //из файла (1 - по шаблону, 3 - со сканера)
	ПараметрыВыполнения.Вставить("ОткрыватьКарточкуПослеСоздания", Истина);
	
	ФормаВариантаСозданияФайла = РаботаСФайламиСлужебныйКлиентПовтИсп.ФормаВыбораВариантаСозданияНовогоФайла();
	
	ПараметрыВыполнения.Вставить("Форма", ФормаВариантаСозданияФайла);
	
	УстановитьОповещениеФормы(ФормаВариантаСозданияФайла , Новый ОписаниеОповещения("ФайлДобавитьВДокументВыбраннымРежимом", ЭтотОбъект, ПараметрыВыполнения));
	
	ФормаВариантаСозданияФайла.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКнопкуФайлОсновноеДействие(НазваниеКоманды)
	//
	//Если НазваниеКоманды=Неопределено Тогда
	//	НазваниеКоманды="Добавить";
	//КонецЕсли;
	//
	//Если НазваниеКоманды="Добавить" Тогда
	//	КомандаИсточник=Элементы.ФайлыДокументаФайлыДобавить;
	//	Элементы.ФайлыДокументаФайлыЗакончитьРедактирование.Видимость=Ложь;
	//	ВидимостьЭлемента=Элементы["ФайлыДокументаФайлыДобавить"].Видимость;
	//	
	//ИначеЕсли НазваниеКоманды="Открыть файл" Тогда
	//	КомандаИсточник=Элементы.ФайлыДокументаФайлыОткрыть;
	//	УстановитьВидимостьКнопкиЗакрытия();
	//	ВидимостьЭлемента=Элементы["ФайлыДокументаФайлыОткрыть"].Видимость;
	//	
	//ИначеЕсли НазваниеКоманды="Сканировать" Тогда
	//	КомандаИсточник=Элементы.ФайлыДокументаФайлыСканировать;
	//	Элементы.ФайлыДокументаФайлыЗакончитьРедактирование.Видимость=Ложь;
	//	ВидимостьЭлемента=Элементы["ФайлыДокументаФайлыСканировать"].Видимость;
	//	
	//ИначеЕсли НазваниеКоманды="Удалить" Тогда
	//	КомандаИсточник=Элементы.ФайлыДокументаФайлыУдалить;
	//	Элементы.ФайлыДокументаФайлыЗакончитьРедактирование.Видимость=Ложь;
	//	ВидимостьЭлемента=Элементы["ФайлыДокументаФайлыУдалить"].Видимость;
	//	
	//ИначеЕсли НазваниеКоманды="Открыть карточку" Тогда
	//	КомандаИсточник=Элементы.СсылкиНаФайлыФайлыКарточка;
	//	Элементы.ФайлыДокументаФайлыЗакончитьРедактирование.Видимость=Ложь;
	//	ВидимостьЭлемента=Элементы["СсылкиНаФайлыФайлыКарточка"].Видимость;
	//	
	//Иначе
	//	Возврат;
	//	
	//КонецЕсли;
	//
	//Элементы.ФайлыФайлыОсновноеДействие.Видимость=ВидимостьЭлемента;
	//Если ВидимостьЭлемента Тогда 
	//	Элементы.ФайлыФайлыОсновноеДействие.Заголовок=КомандаИсточник.Заголовок;
	//	Элементы.ФайлыФайлыОсновноеДействие.ИмяКоманды=КомандаИсточник.ИмяКоманды;
	//	Элементы.ФайлыДействие.Отображение=ОтображениеКнопки.Картинка;
	//Иначе
	//	Элементы.ФайлыДействие.Отображение=ОтображениеКнопки.КартинкаИТекст;
	//КонецЕсли;
	//
КонецПроцедуры

// Устанавливает обработчик закрытия формы, полученной при помощи ПолучитьФорму().
&НаКлиенте
Процедура УстановитьОповещениеФормы(Форма, Обработчик) Экспорт
	
	Если Обработчик <> Неопределено Тогда
		// Установка обработчика закрытия формы.
		Форма.ОписаниеОповещенияОЗакрытии = Обработчик;
		// Форма, возвращающая значение, должна:
		Если Форма.ВладелецФормы = Неопределено Тогда
			// Без установленного владельца - блокировать весь интерфейс.
			Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		Иначе
			// С установленным владельцем - блокировать окно владельца или весь интерфейс.
			Если Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый Тогда
				Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьКнопкиЗакрытия();
	КоличествоЗанятыхФайлов = РаботаСФайламиСлужебныйВызовСервера.ПолучитьКоличествоЗанятыхФайлов(Объект.Ссылка, ТекущийПользователь);
	
	ВидимостьКнопки=(КоличествоЗанятыхФайлов >0);
	
	//Элементы.ФайлыДокументаФайлыЗакончитьРедактирование.Видимость=ВидимостьКнопки;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДобавитьВДокументВыбраннымРежимом(Результат, ПараметрыВыполнения) Экспорт 
	
	Если ПараметрыВыполнения.Свойство("Форма") Тогда
		ФлагНеОткрыватьКарточкуПослеСозданияФайлаВФормеВыбора = НЕ ПараметрыВыполнения.Форма.ОткрыватьКарточкуПослеСоздания;
		ПараметрыВыполнения.Форма=Неопределено;
	Иначе
		ФлагНеОткрыватьКарточкуПослеСозданияФайлаВФормеВыбора = НЕ ПараметрыВыполнения.ОткрыватьКарточкуПослеСоздания;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", ФлагНеОткрыватьКарточкуПослеСозданияФайлаВФормеВыбора); //добавлено для совместимости с БСП
	Если ФлагНеОткрыватьКарточкуПослеСозданияФайла <> ФлагНеОткрыватьКарточкуПослеСозданияФайлаВФормеВыбора Тогда
		//пользователь изменил флажок
		ФлагНеОткрыватьКарточкуПослеСозданияФайла=ФлагНеОткрыватьКарточкуПослеСозданияФайлаВФормеВыбора;
		аДООбщееСервер.СохранитьНастройкуПользователя("НастройкиОткрытияФайлов", "НеОткрыватьКарточкуПослеСозданияФайла", ФлагНеОткрыватьКарточкуПослеСозданияФайла);
		
	КонецЕсли;
	
	Если Результат<>КодВозвратаДиалога.Отмена Тогда
		Модифицированность=Истина;
		РежимСоздания=Результат;
		Если РежимСоздания=1 Тогда 
			//добавим ссылку на шаблон выбрав его из справочника
			ПараметрыФормы = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Истина, Ложь);
			ФормаВыбораШаблона = ПолучитьФорму("Справочник.Файлы.Форма.аФормаСпискаШаблонов", ПараметрыФормы);
			ФормаВыбораШаблона.Заголовок = "Выбор шаблона";
			
			ПараметрыВыполнения=Новый Структура;
			УстановитьОповещениеФормы(ФормаВыбораШаблона, Новый ОписаниеОповещения("ВыборШаблонаФайлаЗавершение", ЭтотОбъект, ПараметрыВыполнения));
			ФормаВыбораШаблона.Открыть();
			Возврат;
			
		ИначеЕсли РежимСоздания=2 Тогда 
			//добавление обычного файла
			ОбработчикРезультатаДобавленияСДиска=Новый ОписаниеОповещения("ФайлДобавитьПослеДобавленияФайлаСДиска", ЭтотОбъект, ПараметрыВыполнения);
			РаботаСФайламиКлиент.ДобавитьФайл(ОбработчикРезультатаДобавленияСДиска, ПараметрыВыполнения.ВладелецФайла, ПараметрыВыполнения.ФормаВладелец, РежимСоздания, ФлагНеОткрыватьКарточкуПослеСозданияФайла);
			
		ИначеЕсли РежимСоздания = 3 Тогда // Считать со сканера
			ПараметрыВыполнения.Вставить("ОбработчикРезультата", Новый ОписаниеОповещения("ФайлДобавитьПослеДобавленияФайлаСДиска", ЭтотОбъект, ПараметрыВыполнения)); 
			РаботаСФайламиСлужебныйКлиент.ДобавитьСоСканера(ПараметрыВыполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВТабличнуюЧасть(СсылкаНаФайл)
	//проверим, добавляли ли такой файл ранее
	Если Объект.СсылкиНаФайлы.НайтиСтроки(Новый Структура("Файл", СсылкаНаФайл)).Количество()>0 Тогда
		Возврат; //файл найден
	КонецЕсли;
	
	НоваяСтрока=Объект.СсылкиНаФайлы.Добавить();
	НоваяСтрока.Файл=СсылкаНаФайл;
	
	//установим строку активной
	Элементы.СсылкиНаФайлы.ТекущаяСтрока=Объект.СсылкиНаФайлы.Количество();
	
КонецПроцедуры

Процедура УстановитьЗаголовокФайлы()
	Элементы.ГруппаДополнительныеФайлы.Заголовок=НСтр("en='Files (';ru='Файлы ('")+Формат(Объект.СсылкиНаФайлы.Количество(), "ЧН=; ЧГ=")+")";
	
КонецПроцедуры


&НаКлиенте
Процедура ВыборШаблонаФайлаЗавершение(ВыбранныйШаблон, ПараметрыВыполнения) Экспорт 
	Если ВыбранныйШаблон=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлВТабличнуюЧасть(ВыбранныйШаблон);
	УстановитьЗаголовокФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДобавитьПослеДобавленияФайлаСДиска(Модуль, ПараметрыВыполнения) Экспорт 
	
	Состояние("Обновление списка файлов...");
	ПодключитьОбработчикОжидания("ОбновитьФайлыОтложенно", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСсылкиНаФайлы()
	
	ДокументСсылка=ЭтаФорма.РеквизитФормыВЗначение("Объект").Ссылка;
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ВладелецФайла", ДокументСсылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокФайловВРеквизитахДокумента=Новый СписокЗначений;
	
	Для Каждого ЭлементРеквизита Из СписокДополнительныхРеквизитов Цикл
		ИмяРеквизита=ЭлементРеквизита.Значение;
		Попытка
			ЗначениеРеквизита=ЭтаФорма[ИмяРеквизита];
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(ЗначениеРеквизита)=Тип("СправочникСсылка.Файлы") 
			И ЗначениеРеквизита.ВладелецФайла=ДокументСсылка
			Тогда
			СписокФайловВРеквизитахДокумента.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	СписокШаблонов=Новый СписокЗначений;
	Для Каждого СтрокаФайла Из Объект.СсылкиНаФайлы Цикл
		ФайлСтроки=СтрокаФайла.Файл;
		Если ФайлСтроки.ВладелецФайла=Справочники.ПапкиФайлов.Шаблоны Тогда
			Если СписокШаблонов.НайтиПоЗначению(ФайлСтроки)=Неопределено Тогда
				СписокШаблонов.Добавить(ФайлСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Объект.СсылкиНаФайлы.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		ФайлДокумента=Выборка.Ссылка;
		Если СписокФайловВРеквизитахДокумента.НайтиПоЗначению(ФайлДокумента)<>Неопределено Тогда
			//данный файл уже есть в реквизитах
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=Объект.СсылкиНаФайлы.Добавить();
		НоваяСтрока.Файл=ФайлДокумента;
		
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокШаблонов Цикл
		НоваяСтрока=Объект.СсылкиНаФайлы.Добавить();
		НоваяСтрока.Файл=ЭлементСписка.Значение;
	КонецЦикла;
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрыть(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ФайлыОткрытьЗавершение", ЭтотОбъект), НСтр("en='System needs to save the document. Save now?';ru='Для продолжения необходимо записать документ! Записать сейчас?'"), РежимДиалогаВопрос.ДаНет, 60,,НСтр("ru='► Корпоративный документооборот';en='► Corporate workflow'"));
		Возврат;
		
	КонецЕсли;
	
	ФайлыОткрытьОкончаниеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	ФайлыОткрытьОкончаниеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыЗакончитьРедактирование(Команда)
	
	//СтрокаФайла=Элементы.ФайлыДокумента;
	СтрокаФайла=Элементы.СсылкиНаФайлы;
	Если СтрокаФайла.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаФайл=СтрокаФайла.ТекущиеДанные.Файл;
	
	Если СтрокаФайла.ТекущиеДанные=Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Unknown file to open.';ru='Не указан файл документа для открытия.'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	ФайлРедактируетПользователь=ПолучитьРедактирующегоФайл(СсылкаНаФайл);
	
	ХранитьВерсииФайла=аДООбщееСервер.ПолучитьЗначениеРеквизитаОбъекта(СсылкаНаФайл, "ХранитьВерсии");
	РедактируетТекущийПользователь=(ФайлРедактируетПользователь=ТекущийПользователь);
	
	Обработчик = Новый ОписаниеОповещения("Обработчик_ОкончаниеРедактированияФайла", ЭтотОбъект);
	
	РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(
	Обработчик,
	СсылкаНаФайл,
	ЭтаФорма.УникальныйИдентификатор,
	ХранитьВерсииФайла,
	РедактируетТекущийПользователь,
	ФайлРедактируетПользователь);
	
	////КомандыРаботыСФайламиКлиент.ЗакончитьРедактирование(
	//РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактирование(
	//	СсылкаНаФайл,
	//	ЭтаФорма.УникальныйИдентификатор,
	//	ХранитьВерсииФайла,
	//	РедактируетТекущийПользователь,
	//	ФайлРедактируетПользователь);
	//	
	ТекущийФайлРедактирует=ФайлРедактируетПользователь;
	
	Элементы.СсылкиНаФайлы.Обновить();
	
	УстановитьВидимостьКнопкиЗакрытия();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиНаФайлыПриАктивизацииСтроки(Элемент)
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	Если Элементы.СсылкиНаФайлы.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдетПроцессАктивизацииСтроки Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаФайл=Элементы.СсылкиНаФайлы.ТекущиеДанные.Файл;
	
	Если Найти(СокрЛП(СсылкаНаФайл), "<Объект не найден>")>0 Тогда
		Возврат;
		
	КонецЕсли;
	
	//получим данные файла
	Если НЕ ЗначениеЗаполнено(СсылкаНаФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла=РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляОткрытия(СсылкаНаФайл, , ЭтаФорма.УникальныйИдентификатор);
	
	Если МенюФайлыНастройкаВключена И (МенюФайлыАктивныйФайлШаблон<>ДанныеФайла.ЗаполнятьДанными)Тогда
		НастроитьМенюФайлы(СсылкаНаФайл);
		МенюФайлыАктивныйФайлШаблон=ДанныеФайла.ЗаполнятьДанными;
	КонецЕсли;
	
	Если НЕ ФлагИспользоватьПредпросмотр Тогда
		УстановитьСтраницуПредпросмотра("СтраницаИнформация", СсылкаНаФайл);
		Возврат;
		
	КонецЕсли;
	
	//определим по расширению что делать с файлом
	РасширениеФайла=ДанныеФайла.Расширение;
	
	ИдетПроцессАктивизацииСтроки=Истина;
	
	Если аДООбщееКлиентСерверПС.ПросмотрКакКартинка(РасширениеФайла) Тогда		
		УстановитьСтраницуПредпросмотра("СтраницаКартинка", СсылкаНаФайл);
		ПоказатьКартинку(ДанныеФайла);
		
	ИначеЕсли аДООбщееКлиентСерверПС.ПросмотрКакHTML(РасширениеФайла) Тогда
		УстановитьСтраницуПредпросмотра("СтраницаHTML", СсылкаНаФайл);
		ПолеHTMLГотовКФормированию=Ложь; //сброс в Истина после готовности документа
		ПоказатьHTML(ДанныеФайла);
		
	Иначе //не чем просматривать, установим страницу информции
		УстановитьСтраницуПредпросмотра("СтраницаИнформация", СсылкаНаФайл);
		
	КонецЕсли;	
	
	ИдетПроцессАктивизацииСтроки=Ложь;
	
КонецПроцедуры                                                       

&НаКлиенте
Процедура УстановитьСтраницуПредпросмотра(ИмяВидимойСтраницы, СсылкаНаФайл)
	
	Если ИмяВидимойСтраницы="СтраницаИнформация" Тогда
		ОбновитьДанныеТекущегоФайла(СсылкаНаФайл);
		Элементы.СтраницаHTML.Видимость=Ложь;
		Элементы.СтраницаКартинка.Видимость=Ложь;
		Элементы.СтраницаИнформация.Видимость=Истина;
		
	ИначеЕсли ИмяВидимойСтраницы="СтраницаHTML" Тогда
		Элементы.СтраницаИнформация.Видимость=Ложь;
		Элементы.СтраницаКартинка.Видимость=Ложь;
		Элементы.СтраницаHTML.Видимость=Истина;
		
	ИначеЕсли ИмяВидимойСтраницы="СтраницаКартинка" Тогда
		Элементы.СтраницаИнформация.Видимость=Ложь;
		Элементы.СтраницаHTML.Видимость=Ложь;
		Элементы.СтраницаКартинка.Видимость=Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТекущегоФайла(СсылкаНаФайл)
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Файлы.Код КАК Код,
	|	Файлы.Автор КАК Автор,
	|	Файлы.ТекущаяВерсияАвтор КАК ТекущаяВерсияАвтор,
	|	Файлы.ТекущаяВерсияДатаСоздания КАК ТекущаяВерсияДатаСоздания,
	|	Файлы.ТекущаяВерсияНомерВерсии КАК ТекущаяВерсияНомерВерсии,
	|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение,
	|	Файлы.ТекущаяВерсияРазмер КАК ТекущаяВерсияРазмер,
	|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
	|	Файлы.Редактирует КАК Редактирует,
	|	Файлы.Описание КАК Описание,
	|	Файлы.аЗаполнятьДанными КАК ЗаполнятьДанными,
	|	Файлы.ТекущаяВерсия.ТипХраненияФайла КАК ТипХраненияФайла,
	|	Файлы.ДатаСоздания КАК ДатаСоздания,
	|	Файлы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Ссылка = &ФайлСсылка");
	Запрос.УстановитьПараметр("ФайлСсылка", СсылкаНаФайл);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	СтруктураФайла=Новый Структура;
	
	Если Выборка.Следующий() Тогда
		ТекущийФайлКод=Выборка.Код;
		ТекущийФайлАвтор=Выборка.Автор;
		ТекущийФайлВерсияАвтор=Выборка.ТекущаяВерсияАвтор;
		ТекущийФайлВерсияДатаСоздания=Выборка.ТекущаяВерсияДатаСоздания;
		ТекущийФайлВерсияНомер=Выборка.ТекущаяВерсияНомерВерсии;
		ТекущийФайлВерсияРасширение=Выборка.ТекущаяВерсияРасширение;
		ТекущийФайлВерсияРазмер=Выборка.ТекущаяВерсияРазмер;
		ТекущийФайлРедактирует=Выборка.Редактирует;
		ТекущийФайлОписание=Выборка.Описание;
		ТекущийФайлВерсияТипХраненияФайла=Выборка.ТипХраненияФайла;
		ТекущийФайлДатаСоздания=Выборка.ДатаСоздания;
		ТекущийФайлХранитьВерсии=Выборка.ХранитьВерсии;
		ТекущийФайлНаименование=Выборка.Наименование;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьМенюФайлы(ВыбранныйФайл=Неопределено, СбросНастроек=Ложь)
	
	Если ВыбранныйФайл=Неопределено Тогда
		НастройкаДляШаблона=Ложь;
	Иначе
		НастройкаДляШаблона=ВыбранныйФайл.аЗаполнятьДанными;
	КонецЕсли;
	
	Для Каждого СтрокаНастройки Из ВидДокумента.ФайлыДокумента Цикл
		ИмяЭлементаМеню=СтрокаНастройки.ИмяЭлементаМеню;
		
		Если СбросНастроек Тогда
			ЭлементВиден=Истина;
		Иначе
			ЭлементВиден=?(НастройкаДляШаблона, СтрокаНастройки.ВидимостьДляШаблона, СтрокаНастройки.ВидимостьДляФайла);
		КонецЕсли;
		
		Если ИмяЭлементаМеню="ФайлыДокументаФайлыПредпросмотрСКартинкой" Тогда
			ПунктМенюПредпросмотрВиден=ЭлементВиден;
		Иначе
			Элементы[ИмяЭлементаМеню].Видимость=ЭлементВиден;
		КонецЕсли;
		
	КонецЦикла;
	
	//обработаем другие, зависимые элементы
	
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыОткрыть"].Видимость=Элементы["ФайлыДокументаФайлыОткрыть"].Видимость;
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыКарточка"].Видимость=Элементы["СсылкиНаФайлыФайлыКарточка"].Видимость;
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыДобавить"].Видимость=Элементы["ФайлыДокументаФайлыДобавить"].Видимость;
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыОткрытьДляПросмотра"].Видимость=	Элементы["СсылкиНаФайлыФайлыОткрытьДляПросмотра"].Видимость;
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыСканировать"].Видимость=Элементы["ФайлыДокументаФайлыСканировать"].Видимость;
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыУдалить"].Видимость=Элементы["ФайлыДокументаФайлыУдалить"].Видимость;
	Элементы["СсылкиНаФайлыКонтекстноеМенюФайлыОбновить"].Видимость=Элементы["СсылкиНаФайлыФайлыОбновить"].Видимость;
	
	//обработаем пункт меню Предпросмотр
	УстановитьПредпросмотрНаСервере();
	
	НастройкаПунктовМенюПроизводилась=Истина;
	
	УстановитьКнопкуФайлОсновноеДействие(Неопределено);
	
	Если НЕ РольЕсть_аДокументыРедактирование Тогда
		Элементы.СсылкиНаФайлыФайлыКарточка.Доступность=Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагПредпросмотрРазмерКартинкиЧислоПриИзменении(Элемент)
	Если ФлагПредпросмотрРазмерКартинкиЧисло=0 Тогда
		//0 - реальный размер
		Элементы.СтрокаАдресаКартинкиПредпросмотра.РазмерКартинки=РазмерКартинки.РеальныйРазмер;
		
	Иначе
		//1 - пропроциональный
		Элементы.СтрокаАдресаКартинкиПредпросмотра.РазмерКартинки=РазмерКартинки.Пропорционально;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКартинку(ДанныеФайла)
	
	РасширениеПодключено=ПодключитьРасширениеРаботыСФайлами();
	Если НЕ РасширениеПодключено Тогда
		Состояние(НСтр("en='Not connected with the extension files.';ru='Не подключено расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	ВерсияФайла=ДанныеФайла.ТекущаяВерсия;
	СтрокаАдресаКартинкиПредпросмотра=РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияФайла, УникальныйИдентификатор);
	
	ФлагПредпросмотрРазмерКартинкиЧислоПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредпросмотрНаСервере()
	
	Если ПунктМенюПредпросмотрВиден Тогда
		ВидимостьПредпросмотраСКартинкой=ФлагИспользоватьПредпросмотр;
		ВидимостьПредпросмотраБезКартинки=НЕ ФлагИспользоватьПредпросмотр;
	Иначе
		ВидимостьПредпросмотраСКартинкой=Ложь;
		ВидимостьПредпросмотраБезКартинки=Ложь;      
		ФлагИспользоватьПредпросмотр=Ложь;
	КонецЕсли;
	
	Элементы.ФайлыДокументаФайлыПредпросмотр.Видимость=ВидимостьПредпросмотраБезКартинки;
	Элементы.ФайлыДокументаФайлыПредпросмотрСКартинкой.Видимость=ВидимостьПредпросмотраСКартинкой;
	
	Элементы.СсылкиНаФайлыКонтекстноеМенюФайлыПредпросмотр.Видимость=ВидимостьПредпросмотраБезКартинки ;
	Элементы.СсылкиНаФайлыКонтекстноеМенюФайлыПредпросмотрСКартинкой.Видимость=ВидимостьПредпросмотраСКартинкой ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьHTML(ДанныеФайла)
	
	РасширениеПодключено=ПодключитьРасширениеРаботыСФайлами();
	Если НЕ РасширениеПодключено Тогда
		Состояние(НСтр("en='File extension not installed.';ru='Не подключено расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	ПутьВЛокальномКаталоге="";
	РаботаСФайламиСлужебныйКлиент.ПолучитьФайлВерсииВРабочийКаталог(Новый ОписаниеОповещения("Оповещение_ФайлПолученВЛокальныйКаталог", ЭтотОбъект), ДанныеФайла, ПутьВЛокальномКаталоге);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьОкончаниеФрагмент()
	
	Перем СтрокаФайла;
	
	УстановитьКнопкуФайлОсновноеДействие("Открыть файл");
	
	СтрокаФайла=Элементы.СсылкиНаФайлы.ТекущиеДанные;
	
	Если СтрокаФайла=Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='File was not specified for opening.';ru='Не указан файл документа для открытия.'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	Если ДокументПодписан Тогда
		ОткрыватьФайлыДокументовДляПросмотра=Истина;
	КонецЕсли;
	
	Если ОткрыватьФайлыДокументовДляПросмотра Тогда
		//откроем для просмотра
		ОткрытьФайлДокумента(СтрокаФайла.Файл, Истина);
		Состояние("Файл открыт только для просмотра");
	Иначе
		Если РольЕсть_аДокументыРедактирование Тогда
			ОткрытьФайлДокумента(СтрокаФайла.Файл);
		Иначе
			ОткрытьФайлДокумента(СтрокаФайла.Файл, Истина);
			Состояние("Файл открыт только для просмотра");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьКнопкиЗакрытия();
	
	ТекущийФайлРедактирует=ПолучитьРедактирующегоФайл(СтрокаФайла.Файл);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРедактирующегоФайл(СсылкаНаФайл)
	Возврат СсылкаНаФайл.Редактирует;
КонецФункции


&НаКлиенте
Процедура ОткрытьФайлДокумента(ВыбраннаяСтрока, ДляПросмотра=Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ДляПросмотра Тогда
		КакОткрывать = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
		
		Если КакОткрывать = "ОткрыватьКарточку" Тогда
			ПоказатьЗначение(Неопределено, ВыбраннаяСтрока);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ВыбраннаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	
	Если ДанныеФайла=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДляПросмотра Тогда
		Если НЕ ДанныеФайла.ЗаполнятьДанными Тогда
			//открытие обычного файла
			РаботаСФайламиКлиент.Открыть(ДанныеФайла);
		Иначе
			ПечатьКорпоративныхДокументов(Объект.Ссылка,  ВыбраннаяСтрока);		
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		//файл не занят для редактирования
		
		Если ДанныеФайла.ЗаполнятьДанными Тогда
			//это шаблон файла
			ПараметрыОткрытия=Новый Структура;
			ПараметрыОткрытия.Вставить("ДанныеФайла", ДанныеФайла);
			ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьФайлДокументаЗавершениеВопросаОШаблоне", ЭтотОбъект, ПараметрыОткрытия), НСтр("en='File will be created by the template. Do you want to continue?';ru='Файл будет сформирован на основании шаблона. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена,,,аОбщееКлиентПС.ЗаголовокДиалога());
			Возврат; //далее открываем если нужно в обработчике оповещения	
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытиеФайлаИзДокумента(ДанныеФайла);
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытиеФайлаИзДокумента(ДанныеФайла)
	
	Если НЕ ДанныеФайла.ЗаполнятьДанными Тогда
		//открытие не шаблона, а обычного файла		
		Обработчик = Новый ОписаниеОповещения("Обработчик_ОкончаниеРедактированияФайла", ЭтотОбъект);
		РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Обработчик, ДанныеФайла.Ссылка, ЭтаФорма.УникальныйИдентификатор);
		
	Иначе
		Если ЭтаФорма.Модифицированность Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытиеФайлаИзДокументаВопросОЗаписиЗавершение", ЭтотОбъект, Новый Структура("ДанныеФайла", ДанныеФайла)), НСтр("en='System needs to save the document. Do you want to continue?';ru='Для продолжения необходимо записать документ! Продолжить?'"), РежимДиалогаВопрос.ДаНет, 60,,НСтр("ru='► Корпоративный документооборот';en='► Corporate workflow'"));
			Возврат;
			
		КонецЕсли;
		
		ОткрытиеФайлаИзДокументаФрагмент(ДанныеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФайлаИзДокументаВопросОЗаписиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Попытка
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
	ОткрытиеФайлаИзДокументаФрагмент(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФайлаИзДокументаФрагмент(Знач ДанныеФайла)
	
	ПечатьКорпоративныхДокументов(Объект.Ссылка, ДанныеФайла.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВЖурналСобытийФормированиеПечатнойФормы(ТекстСообщения, ДокументСсылка, ФайлСсылка)
	
	ЗаписьЖурналаРегистрации("Формирование по шаблону.", УровеньЖурналаРегистрации.Информация, ДокументСсылка, ФайлСсылка, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКорпоративныхДокументов(ДокументСсылка, ФайлСсылка) Экспорт
	
	ТекстСообщения = НСтр("en='Forming the print form ...';ru='Выполняется формирование печатной формы...'");
	Состояние(ТекстСообщения);
	
	//получим данные
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Формирование печатной формы начато. Получение данных макета.", ДокументСсылка, ФайлСсылка);
	
	МакетИДанныеОбъекта=ПолучитьМакетИДанныеДокумента(ФайлСсылка);
	
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Вывод макета.", ДокументСсылка, ФайлСсылка);
	
	аДОРаботаСФайламиКлиент.НапечататьКорпоративныйДокумент(ДокументСсылка, ФайлСсылка, МакетИДанныеОбъекта, МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
	
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Формирование закончено.", ДокументСсылка, ФайлСсылка);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетИДанныеДокумента(ФайлСсылка)
	ДокументСсылка=ЭтаФорма.РеквизитФормыВЗначение("Объект");
	МакетИДанныеОбъекта=Документы.аДокументооборотКорпоративныйДокумент.ПолучитьДанныеПечати(ДокументСсылка, ФайлСсылка);
	МакетИДанныеОбъекта.Вставить("ЛокальныйКаталогФайловПечати", УправлениеПечатью.ПолучитьЛокальныйКаталогФайловПечати());
	Возврат МакетИДанныеОбъекта;
КонецФункции



&НаКлиенте
Процедура ФайлыОбновить(Команда)
	
	//обновим список файлов документа
	ОбновитьСсылкиНаФайлы();
	
	//обновим предпросмотр
	//СсылкиНаФайлыПриАктивизацииСтроки(Неопределено);
	
	Состояние(НСтр("ru='Список файлов обновлен';en='List of files updated'"));
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьФайлыОтложенно() Экспорт
	ФайлыОбновить(Неопределено);
	УстановитьЗаголовокФайлы();
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	УстановитьЗаголовокФайлы();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьФайлыОтложенно();
КонецПроцедуры

&НаКлиенте
Процедура СсылкиНаФайлыПередУдалением(Элемент, Отказ)
		Если Элемент=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	////проверим, доступно ли действие в контекстном меню
	//Если НЕ Элементы.ФайлыДокументаФайлыУдалить.Видимость Тогда
	//	Отказ=Истина;
	//	Состояние("Удаление запрещено в настройке вида документов.");
	//	Возврат;
	//КонецЕсли;
	//
	Если ТипЗнч(Элемент)=Тип("ДанныеФормыЭлементКоллекции") Тогда
		УдаляемыйФайл=Элемент.Файл;
	Иначе
		УдаляемыйФайл=Элемент.ТекущиеДанные.Файл;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьФайлДокументаЗавершение", ЭтотОбъект, Новый Структура("УдаляемыйФайл, Элемент", УдаляемыйФайл, Элемент)), НСтр("en='Do you want to delete the file ""';ru='Удалить файл ""'")+СокрЛП(УдаляемыйФайл)+"""?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, аОбщееКлиентПС.ЗаголовокДиалога());
	
	Отказ=Истина; //удаление будет произведено в обработчике
	

КонецПроцедуры

&НаСервере
Функция УстановитьПометкуУдаления(ФайлСсылка);
	
	Если ФайлСсылка.ВладелецФайла<>Объект.Ссылка Тогда
		Возврат Истина; //просто удаляем из списка, с самим шаблоном ни чего не делаем
	КонецЕсли;
	
	//пометим на удаление файл
	ФайлОбъект=ФайлСсылка.Ссылка.ПолучитьОбъект();
	Попытка
		ФайлОбъект.УстановитьПометкуУдаления(Истина, Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УдалитьФайлДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыйФайл = ДополнительныеПараметры.УдаляемыйФайл;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если ТипЗнч(Элемент)=Тип("ДанныеФормыЭлементКоллекции") Тогда
		ИндексФайла=Элемент.НомерСтроки-1;
	Иначе
		ИндексФайла=Элемент.ТекущиеДанные.НомерСтроки-1;
	КонецЕсли;
	
	Если УстановитьПометкуУдаления(УдаляемыйФайл) Тогда
		Объект.СсылкиНаФайлы.Удалить(ИндексФайла);
		
	КонецЕсли;		
	
	Модифицированность=Истина;
	
	УстановитьКнопкуФайлОсновноеДействие("Удалить");
	
	УстановитьЗаголовокФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиНаФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//откроем файл
	СтандартнаяОбработка=Ложь;
	ФайлыОткрыть(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииСрв();
	УстановитьНомерДокумента();

КонецПроцедуры


&НаСервере
Процедура ПодразделениеПриИзмененииСрв()
	Объект.ОрганизацииПодразделения.Очистить();
	Стр = Объект.ОрганизацииПодразделения.Добавить();
	Стр.Подразделение  = Объект.ОсновноеПодразделение;
КонецПроцедуры


&НаКлиенте
Процедура УстановитьНомерДокумента()
	
	СтруктураНомера=аДОРаботаСДокументами.СформироватьНомерДокумента(Объект, Ложь); //НомерЧисло, СтрокаНомера, ВидДокументаНумератора, ОрганизацияНумератора
	
	ИспользуемыйНумератор=СтруктураНомера.ФорматНумератора;
	
	Если СокрЛП(Объект.Номер)<>СокрЛП(СтруктураНомера.СтрокаНомера) Тогда
		Объект.Номер=СтруктураНомера.СтрокаНомера;
		НомерБылИзменен=Истина;
		Объект.РегистрационныйНомер=СтруктураНомера.СтрокаНомера;
	КонецЕсли;
	
	
КонецПроцедуры


ИдетПроцессАктивизацииСтроки=Ложь;
