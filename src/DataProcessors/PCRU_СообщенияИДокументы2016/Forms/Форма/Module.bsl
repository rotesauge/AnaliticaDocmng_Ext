&НаКлиенте
Перем ВремяПоследнегоОбновления;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначения.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь=аДОИнтерфейсКБСП.ТекущийПользователь();
	
	Пользователь=СокрЛП(ТекущийПользователь);
	//НеПоказыватьСообщенияЗначение=аДООбщееСервер.ЗагрузитьНастройкуПользователя("РабочийСтол", "НеПоказыватьСообщенияСистемыНаРабочемСтоле", , Пользователь);
	КоличествоПросмотренныхДокументовМакс=аДООбщееСервер.ЗагрузитьНастройкуПользователя("РабочийСтол", "КоличествоПросмотренныхДокументов", , Пользователь);	
	Если КоличествоПросмотренныхДокументовМакс=Неопределено ИЛИ КоличествоПросмотренныхДокументовМакс=0 Тогда
		КоличествоПросмотренныхДокументовМакс=10;
	КонецЕсли;
		
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.аДокументооборотКорпоративныйДокумент) Тогда
		Элементы.ГруппаКомандыПросмотренныеДокументы.Видимость=Ложь;
		Элементы.ПросмотренныеДокументы.Видимость=Ложь;
	Иначе
		УстановитьЗапросСпискаДокументов();
	КонецЕсли;
	
	//Если НеПоказыватьСообщенияЗначение=Неопределено Тогда
	//	ПоказыватьСообщения=Истина;
	//Иначе
	//	ПоказыватьСообщения=НЕ НеПоказыватьСообщенияЗначение;
	//КонецЕсли;
	
	//Элементы.ГруппаСообщенияПользователя.Видимость=ПоказыватьСообщения;

	УстановитьОтображениеКорпоративногоЧата();
		
	УстановитьПараметрыСписков();
		
	УстановитьАвтообновление();
	
	ПрочитатьНастройкиСервером();
	
	//Если Элементы.ГруппаКорпоративныйЧат.Видимость Тогда
	//	
	//	СформироватьОбластьДоступаКорпоративногоЧата();		
	//	СформироватьСписокСообщенийЧата();
	//	
	//КонецЕсли;
	
	ОтборПоПолучателю=Неопределено; //покажем все сообщения
	
КонецПроцедуры

Процедура УстановитьАвтообновление()
	
	ИспользоватьАвтообновлениеРабочегоСтола=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РабочийСтол", "ИспользоватьАвтообновлениеРабочегоСтола");
	
	Если ИспользоватьАвтообновлениеРабочегоСтола=Неопределено Тогда
		ИспользоватьАвтообновлениеРабочегоСтола=Истина;
	КонецЕсли;
	
	Если ИспользоватьАвтообновлениеРабочегоСтола Тогда
		ПериодАвтообновленияРабочегоСтолаСекунд=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РабочийСтол", "ПериодАвтообновленияРабочегоСтолаСекунд",30);
	КонецЕсли;
	
	УстановитьАвтообновлениеСписков(ИспользоватьАвтообновлениеРабочегоСтола, ПериодАвтообновленияРабочегоСтолаСекунд);
	
КонецПроцедуры

Процедура УстановитьОтображениеКорпоративногоЧата()
	
	ИспользоватьКорпоративныйЧат=Константы.аКорпоративныйЧатИспользование.Получить();
	
	Если ИспользоватьКорпоративныйЧат Тогда
		Пользователь=СокрЛП(ТекущийПользователь);
		ОтображатьКорпоративныйЧатНаРабочемСтолеЗначение=аДООбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныйЧат", "ОтображатьКорпоративныйЧатНаРабочемСтоле", , Пользователь);
		Если ОтображатьКорпоративныйЧатНаРабочемСтолеЗначение=Неопределено Тогда
			ОтображатьКорпоративныйЧатНаРабочемСтоле=Ложь;
		Иначе
			ОтображатьКорпоративныйЧатНаРабочемСтоле=ОтображатьКорпоративныйЧатНаРабочемСтолеЗначение;
		КонецЕсли;
		
		//Элементы.ГруппаКорпоративныйЧат.Видимость=ОтображатьКорпоративныйЧатНаРабочемСтоле;
		
		//УстановитьКоличествоПользователейЧата();		
		
	Иначе
		//Элементы.ГруппаКорпоративныйЧат.Видимость=Ложь
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКоличествоПользователейЧата()

	КоличествоПользователей=аДОКорпоративныйЧатСервер.ПолучитьКоличествоПользователейВЧате();
	Элементы.ДекорацияПользователиЧата.Заголовок=НСтр("ru='Пользователи в чате ('; en='Users in chat (';")+Формат(КоличествоПользователей, НСтр("ru='ЧЦ=10; ЧН=нет; ЧГ='; en='ЧЦ=10; ЧН=0; ЧГ=';"))+")";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАвтообновлениеСписков(ИспользоватьАвтообновлениеРабочегоСтола, ПериодАвтообновленияРабочегоСтолаСекунд)
	
	//Если ПоказыватьСообщения Тогда
		//обновление уведомленией
		
		Элементы.СписокСообщений.АвтоОбновление=ИспользоватьАвтообновлениеРабочегоСтола;
		Элементы.СписокСообщений.ПериодАвтоОбновления=ПериодАвтообновленияРабочегоСтолаСекунд;
	//КонецЕсли;
	
	//обновление просмотренных докуметов (обновляетя по событиям этого же пользователя)
	//Элементы.СписокПросмотренныхДокументов.АвтоОбновление=ИспользоватьАвтообновлениеРабочегоСтола;
	//Элементы.СписокПросмотренныхДокументов.ПериодАвтоОбновления=ПериодАвтообновленияРабочегоСтолаСекунд;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСписков()
	
	УстановитьПараметрыПросмотренныхДокументов();
	УстановитьПараметрыСообщений();
		ЭтаФорма.МатрицаЗаместителей.Параметры.УстановитьЗначениеПараметра("Сотрудник", ТекущийПользователь);
    ЭтаФорма.СписокНовостей.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
	ЭтаФорма.МатрицаЗаместителей.Параметры.УстановитьЗначениеПараметра("ТекДата", ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыПросмотренныхДокументов()
	ЭтаФорма.СписокПросмотренныхДокументов.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСообщений()
	ЭтаФорма.СписокСообщений.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
КонецПроцедуры

Процедура УстановитьОтображениеДекорацийПросмотренныхДокументов()
	Элементы.ДекорацияПросмотренныеДокументыСгруппироватьПоСостоянию.Гиперссылка=НЕ ГруппировкаПросмотренныеДокументыСостояние;
	Элементы.ДекорацияПросмотренныеДокументыСгруппироватьПоВиду.Гиперссылка=НЕ ГруппировкаПросмотренныеДокументыВиды;
	
	Элементы.ДекорацияПросмотренныеДокументыНетГрупп.Видимость=(ГруппировкаПросмотренныеДокументыСостояние ИЛИ ГруппировкаПросмотренныеДокументыВиды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ГруппировкаПросмотренныеДокументыВиды=аДООбщееСервер.ЗагрузитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаПросмотренныеДокументыВиды", ТекущийПользователь);
	ГруппировкаПросмотренныеДокументыСостояние=аДООбщееСервер.ЗагрузитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаПросмотренныеДокументыСостояние", ТекущийПользователь);
	
	ГруппировкаСообщенияПоОтправителю=аДООбщееСервер.ЗагрузитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаСообщенияПоОтправителю", ТекущийПользователь);
		
	УстановитьГруппировкиСписков();
	
КонецПроцедуры

Процедура УстановитьГруппировкиСписков()
	
	Если ГруппировкаПросмотренныеДокументыВиды Тогда
		аДООбщееСервер.СгруппироватьСписок(ЭтаФорма.СписокПросмотренныхДокументов, "ВидДокумента");
	КонецЕсли;
	
	Если ГруппировкаПросмотренныеДокументыСостояние Тогда
		аДООбщееСервер.СгруппироватьСписок(ЭтаФорма.СписокПросмотренныхДокументов, "СостояниеДокумента");
	КонецЕсли;
	
	УстановитьОтображениеДекорацийПросмотренныхДокументов();
	
	Если ГруппировкаСообщенияПоОтправителю Тогда
		аДООбщееСервер.СгруппироватьСписок(ЭтаФорма.СписокСообщений, "ПользовательОтправитель");
		УстановитьОтображениеДекорацийСпискаСообщений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПросмотренныеДокументыОбновитьНажатие(Элемент)
	
	//Состояние(НСтр("en='Updating the list of scanned documents ...';ru='Обновление списка просмотренных документов...'"));
	УстановитьПараметрыПросмотренныхДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПросмотренныеДокументыСгруппироватьПоСостояниюНажатие(Элемент)
	Если НЕ ГруппировкаПросмотренныеДокументыСостояние Тогда
		ГруппировкаПросмотренныеДокументыСостояние=Истина;
		аДООбщееСервер.СгруппироватьСписок(ЭтаФорма.СписокПросмотренныхДокументов, "СостояниеДокумента");
		УстановитьОтображениеДекорацийПросмотренныхДокументов();
		аДООбщееСервер.СохранитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаПросмотренныеДокументыСостояние", ГруппировкаПросмотренныеДокументыСостояние, ТекущийПользователь);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПросмотренныеДокументыСгруппироватьПоВидуНажатие(Элемент)
	Если НЕ ГруппировкаПросмотренныеДокументыВиды Тогда
		ГруппировкаПросмотренныеДокументыВиды=Истина;
		аДООбщееСервер.СгруппироватьСписок(ЭтаФорма.СписокПросмотренныхДокументов, "ВидДокумента");
		УстановитьОтображениеДекорацийПросмотренныхДокументов();
		аДООбщееСервер.СохранитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаПросмотренныеДокументыВиды", ГруппировкаПросмотренныеДокументыВиды, ТекущийПользователь);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПросмотренныеДокументыНетГруппНажатие(Элемент)
	
	аДООбщееСервер.СгруппироватьСписок(ЭтаФорма.СписокПросмотренныхДокументов, "СостояниеДокумента", Ложь);	
	аДООбщееСервер.СгруппироватьСписок(ЭтаФорма.СписокПросмотренныхДокументов, "ВидДокумента", Ложь);		
	
	ГруппировкаПросмотренныеДокументыВиды=Ложь;
	ГруппировкаПросмотренныеДокументыСостояние=Ложь;
	
	аДООбщееСервер.СохранитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаПросмотренныеДокументыВиды", ГруппировкаПросмотренныеДокументыВиды, ТекущийПользователь);
	аДООбщееСервер.СохранитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаПросмотренныеДокументыСостояние", ГруппировкаПросмотренныеДокументыСостояние, ТекущийПользователь);	
	
	УстановитьОтображениеДекорацийПросмотренныхДокументов();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ПросмотренДокумент" И Параметр=ТекущийПользователь Тогда
		//Состояние(НСтр("en='Updating the list of scanned documents ...';ru='Обновление списка просмотренных документов...'"));
		УстановитьПараметрыПросмотренныхДокументов();
		
	ИначеЕсли ИмяСобытия="ПросмотреноСообщение" И Параметр=ТекущийПользователь Тогда
		УстановитьПараметрыСообщений();
		
	ИначеЕсли ИмяСобытия="КорпоративныйЧат" И (Параметр="ВходПользователя" ИЛИ Параметр="ВыходПользователя") Тогда
		УстановитьКоличествоПользователейЧата();
		
	ИначеЕсли ИмяСобытия="КорпоративныйЧат" И (Параметр="НовоеСообщение" ИЛИ Параметр="ОбновитьКорпоративныйЧат" ИЛИ Параметр="ОбновитьКорпоративныйЧатНаРабочемСтоле") Тогда
		СформироватьСписокСообщенийЧата();
		
	ИначеЕсли ИмяСобытия="ИзменилисьНастройкиОбновленияРабочегоСтола" Тогда
		УстановитьАвтообновление();		
		
	КонецЕсли; //имя параметра

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокСообщенийУдалитьНажатие(Элемент)
	
	Если ТипЗнч(Элементы.СписокСообщений.ТекущаяСтрока)<>Тип("РегистрСведенийКлючЗаписи.аДокументооборотСообщения") Тогда
		Состояние(НСтр("en='Select the message to delete.';ru='Выберите сообщение для удаления.'"));
		Возврат;
		
	КонецЕсли;

	КоличествоВыделенныхСтрок=Элементы.СписокСообщений.ВыделенныеСтроки.Количество();
	
	Если КоличествоВыделенныхСтрок=0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Please select one or more lines.';ru='Сначала выберите одну или несколько строк.'"), 60, аОбщееКлиентПС.ЗаголовокДиалога());		
		Возврат;
			
	ИначеЕсли КоличествоВыделенныхСтрок=1 Тогда
		ТекстСообщения="Удалить выделенное сообщение?";
		
	Иначе
		ТекстСообщения="Удалить выделенные сообщения?";
		
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ДекорацияСписокСообщенийУдалитьНажатиеЗавершение", ЭтотОбъект), ТекстСообщения, РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокСообщенийУдалитьНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    СообщениеПользователяУдалить();
    
    //обновим список сообщений
    УстановитьПараметрыСообщений();

КонецПроцедуры

&НаСервере
Процедура СообщениеПользователяУдалить()
	
	Если Элементы.СписокСообщений.ТекущаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//UID=Элементы.СписокСообщений.ТекущаяСтрока.UID;
	
	КоличествоВыделенныхСтрок=Элементы.СписокСообщений.ВыделенныеСтроки.Количество();
	
	Для НомерЭлемента=0 По КоличествоВыделенныхСтрок-1 Цикл
		СтрокаТЧ=Элементы.СписокСообщений.ВыделенныеСтроки[НомерЭлемента];
		Если ТипЗнч(СтрокаТЧ)<>Тип("РегистрСведенийКлючЗаписи.аДокументооборотСообщения") Тогда
			Продолжить;
		КонецЕсли;
		
		UID=Элементы.СписокСообщений.ВыделенныеСтроки[НомерЭлемента].UID;
		
		РегСообщений=РегистрыСведений.аДокументооборотСообщения.СоздатьНаборЗаписей();
		РегСообщений.Отбор.UID.Установить(UID);
		РегСообщений.Прочитать();
		
		Попытка 
			РегСообщений.Очистить();
			РегСообщений.Записать();
		Исключение 
			аДООбщееСервер.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокСообщенийОбновитьНажатие(Элемент)
	
	УстановитьПараметрыСообщений();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокСообщенийПоОтправителюНажатие(Элемент)
	
	Если НЕ ГруппировкаСообщенияПоОтправителю Тогда
		ГруппировкаСообщенияПоОтправителю=Истина;
		аДООбщееСервер.СгруппироватьСписок(ЭтаФорма.СписокСообщений, "ПользовательОтправитель");
		УстановитьОтображениеДекорацийСпискаСообщений();
	КонецЕсли;
	
	аДООбщееСервер.СохранитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаСообщенияПоОтправителю", ГруппировкаСообщенияПоОтправителю, ТекущийПользователь);		

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокСообщенийНетГруппНажатие(Элемент)
	
	аДООбщееСервер.СгруппироватьСписок(ЭтаФорма.СписокСообщений, "ПользовательОтправитель", Ложь);	
	
	ГруппировкаСообщенияПоОтправителю=Ложь;
	
	аДООбщееСервер.СохранитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаСообщенияПоОтправителю", ГруппировкаСообщенияПоОтправителю, ТекущийПользователь);
	
	УстановитьОтображениеДекорацийСпискаСообщений();

КонецПроцедуры

Процедура УстановитьОтображениеДекорацийСпискаСообщений()
	
	Элементы.ДекорацияСписокСообщенийПоОтправителю.Гиперссылка=НЕ ГруппировкаСообщенияПоОтправителю;
	
	Элементы.ДекорацияСписокСообщенийНетГрупп.Видимость=(ГруппировкаСообщенияПоОтправителю ИЛИ ГруппировкаСообщенияПоОтправителю);
	
КонецПроцедуры
           
&НаКлиенте
Процедура СписокСообщенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ТипЗнч(Элементы.СписокСообщений.ТекущаяСтрока)<>Тип("РегистрСведенийКлючЗаписи.аДокументооборотСообщения") Тогда
		Состояние(НСтр("en='Select the message to open it.';ru='Выберите сообщение для открытия.'"));
		Возврат;
	КонецЕсли;
	
	//откроем общую форму с нашим сообщением
	ПараметрыФормы=Новый Структура;
	
	СтрокаТЧ=Элемент.ТекущиеДанные;
	ПараметрыФормы.Вставить("UID", СтрокаТЧ.UID);
	
	ОткрытьФорму("ОбщаяФорма.аДОСообщениеПользователю", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСообщенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокСообщенийПередНачаломИзменения(Элемент, Отказ)
	//откроем форму сообщения
	
	СтрокаТЧ=Элемент.ТекущиеДанные;
	
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("UID", СтрокаТЧ.UID);
	ПараметрыФормы.Вставить("ЗапретОткрытияСсылки", Истина);
	
	ОткрытьФорму("ОбщаяФорма.аДОСообщениеПользователю", ПараметрыФормы);
	
	Отказ=Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиСервером()
	ОтборПоПолучателю=аДООбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныйЧат.Список", "ОтборПоПолучателю");	
	
	ПользовательНастройки=СокрЛП(ТекущийПользователь);
	
	КорпоративныйЧатВариантВыводаСтрок=аДООбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныйЧат", "КорпоративныйЧатВариантВыводаСтрок", , ПользовательНастройки);	
	КорпоративныйЧатКоличествоСообщенийМакс=аДООбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныйЧат", "КорпоративныйЧатКоличествоСообщенийНаРабочемСтоле", , ПользовательНастройки);	
	Если КорпоративныйЧатКоличествоСообщенийМакс=Неопределено ИЛИ КорпоративныйЧатКоличествоСообщенийМакс=0 Тогда
		КорпоративныйЧатКоличествоСообщенийМакс=10;
	КонецЕсли;

	КорпоративныйЧатВыводитьГоризонтальныеЛинии=аДООбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныйЧат", "ВыводитьГоризонтальныеЛинии", , ПользовательНастройки);
	КорпоративныйЧатПериодОбновленияСпискаСекунд=аДООбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныйЧат", "КорпоративныйЧатПериодОбновленияРабочийСтол", , ПользовательНастройки);			
	КорпоративныйЧатПоказыватьТолькоНовыеСообщения=аДООбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныйЧат", "ПоказыватьТолькоНовыеСообщения", , ПользовательНастройки);	

	Если КорпоративныйЧатПериодОбновленияСпискаСекунд=0 Тогда
		КорпоративныйЧатПериодОбновленияСпискаСекунд=30;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЛичныеПапки(Команда)
		
	ТекущийПользователь=аДОИнтерфейсКБСП.ТекущийПользователь();
	ПараметрыФормы = Новый Структура("Владелец, НеПоказыватьФлагВариантаОткрытия", ТекущийПользователь, Истина);
		
	Попытка
		//откроем в новом окне
		ОткрытьФорму("Справочник.аДокументооборотЛичныеПапкиПользователей.ФормаСписка", ПараметрыФормы);
	Исключение
		аДООбщееКлиент.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПользователиЧатаНажатие(Элемент)
	ФормаСписка=ПолучитьФорму("РегистрСведений.аКорпоративныйЧатПользователи.ФормаСписка");
	ФормаСписка.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////
&НаСервере
Процедура СформироватьСписокСообщенийЧата()
	
	//выполним запрос к регистру сведений корпоративного чата
	ПолучатьСвоиСообщения=Ложь;
	УпрощенныйВариант=Ложь;
	
	Если КорпоративныйЧатПоказыватьТолькоНовыеСообщения Тогда 
		ТекстЗапроса=аДОКорпоративныйЧатСервер.ПолучитьТекстЗапросаТолькоНовыеСообщения(КорпоративныйЧатКоличествоСообщенийМакс, ПолучатьСвоиСообщения, УпрощенныйВариант);
		
	Иначе
		ТекстЗапроса=аДОКорпоративныйЧатСервер.ПолучитьТекстЗапросаОбычный(КорпоративныйЧатКоличествоСообщенийМакс, ПолучатьСвоиСообщения, УпрощенныйВариант);
		
	КонецЕсли;
						
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОбластьДоступаСписок", КорпоративныйЧатОбластьДоступаСписок);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	//сформируем текст форматированного документа ввиде html

	ТекстСпискаСообщенийHTML="";
	
	СтрокаТекстаНачало="<html><head><meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">
						|<title></title>
						|</head>
						|<body style=""{margin: 8px; padding: 0px; overflow: hidden;}"" onload='document.all.pageend.scrollIntoView(true)'>
						|";
						
	СтрокаТекстаОкончание="</body></html>";
	
	ЗаголовокОкна="";
	
	ПерваяСтрока=Истина;
	
	ТегРазделителяСообщений=?(КорпоративныйЧатВыводитьГоризонтальныеЛинии, "<hr>", "");
	
	Пока Выборка.Следующий() Цикл
		АвторСообщения=Выборка.АвторСообщения;
		ДатаОтправки=Выборка.ДатаОтправки;
		
		НастройкаЦвета=аДООбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныйЧат", "КорпоративныйЧатЦветСвоихСообщений", , СокрЛП(АвторСообщения));
		
		СообщениеФорматированныйДокумент=Выборка.ХранилищеТекста.Получить();
		
		ТекстСообщенияHTML="";
		СообщениеФорматированныйДокумент.ПолучитьHTML(ТекстСообщенияHTML, Новый Структура);
		
		Если ПерваяСтрока Тогда
			ЗаголовокОкна=СообщениеФорматированныйДокумент.ПолучитьТекст();
		КонецЕсли;		
		
		ТекстСообщенияHTML=аДОКорпоративныйЧатСервер.ПолучитьСодержаниеТега(ТекстСообщенияHTML, "<body>", "</body>");
		ТекстСообщенияHTML=СтрЗаменить(ТекстСообщенияHTML, "<p>", "<br>");
		ТекстСообщенияHTML=СтрЗаменить(ТекстСообщенияHTML, "</p>", "");
		
		Если ЗначениеЗаполнено(АвторСообщения) Тогда
			СтрокаАвтора=аДООбщееСервер.ПадежКраткоеФИО(АвторСообщения, Перечисления.аПадежи.Именительный);
		Иначе
			СтрокаАвтора=Выборка.АвторСообщенияТекст;
		КонецЕсли;
		
		СтрокаДаты=Формат(ДатаОтправки,"ДФ='HH:mm | dd.MM.yy'");

		Если НастройкаЦвета=Неопределено Тогда
			СтрокаЦвета="";
			
		Иначе
			СтрокаЦвета="color="+аДОКорпоративныйЧатСервер.ПолучитьHTMLЦвет(НастройкаЦвета);
			
		КонецЕсли;
		
		СтрокаАвтора=СтрЗаменить(СтрокаАвтора, "<", "");
		СтрокаАвтора=СтрЗаменить(СтрокаАвтора, ">", "");
		
		Если ЗначениеЗаполнено(АвторСообщения) Тогда
			Если АвторСообщения=ТекущийПользователь Тогда
				СтрокаАвтораТег=СтрокаАвтора;
			Иначе
				ИдентификаторАвтораСообщения=СокрЛП(АвторСообщения.УникальныйИдентификатор());
				СтрокаАвтораТег="<a href=""#user_"+ИдентификаторАвтораСообщения+""">"+СтрокаАвтора+"</a>";
			КонецЕсли;
			
		Иначе
			СтрокаАвтораТег="<b>Системное сообщение</b>";
			
		КонецЕсли;
		
		Если КорпоративныйЧатВариантВыводаСтрок="Вариант1" Тогда
			//Сформируем блок сообщения по Варианту 1 		
			БлокИнформацииСообщенияHTML="<font face=Arial size=1 "+СтрокаЦвета+">"+СтрокаДаты+" "+СтрокаАвтораТег+"</font>";
			
			ТекстСообщенияHTML="<font face=Arial size=2>"+ТекстСообщенияHTML+"</font>";
			
			БлокСообщенияHTML=БлокИнформацииСообщенияHTML+ТекстСообщенияHTML+"<br><br>";
			
			ТекстСпискаСообщенийHTML=ТегРазделителяСообщений+БлокСообщенияHTML+ТекстСпискаСообщенийHTML;
			
		Иначе
			//Сформируем блок сообщения по Варианту 2
			БлокИнформацииСообщенияHTML="<font face=Arial size=1 "+СтрокаЦвета+">"+СтрокаАвтораТег+" "+СтрокаДаты+"</font>";
			ТекстСообщенияHTML="<font face=Arial size=2>"+ТекстСообщенияHTML+"</font>";
			
			БлокСообщенияHTML=ТекстСообщенияHTML+" "+БлокИнформацииСообщенияHTML+"<br>";
			
			ТекстСпискаСообщенийHTML=ТегРазделителяСообщений+БлокСообщенияHTML+ТекстСпискаСообщенийHTML;
			
		КонецЕсли;
			
		ПерваяСтрока=Ложь;
		
	КонецЦикла;
	
	ТекстСпискаСообщенийHTML=ТекстСпискаСообщенийHTML+"<div id='pageend'></div>"; //используется для автоматической прокрутки страницы вниз
	
	ТекстСпискаСообщенийHTML=СтрокаТекстаНачало+ТекстСпискаСообщенийHTML+СтрокаТекстаОкончание;
	
	//выведем список сообщений	
	
	СписокСообщенийHTML=ТекстСпискаСообщенийHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновитьЧатНажатие(Элемент)
	СформироватьСписокСообщенийЧата();
	Состояние(НСтр("en='Message list updated';ru='Список сообщений обновлен'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКорпоративныйЧат(Команда)
	ПараметрыФормы = Новый Структура("", );
	ОткрытьФорму("Обработка.аКорпоративныйЧат.Форма.ФормаКорпоративногоЧата", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура СписокСообщенийHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если ДанныеСобытия=Неопределено ИЛИ ДанныеСобытия.Href=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	Попытка
		НавигационнаяСсылка=СокрЛП(ДанныеСобытия.Anchor.hash);
		
	Исключение
		Состояние(НСтр("en='Failed to link.';ru='Не удалось перейти по ссылке.'"));
		Возврат;
		
	КонецПопытки;
	
	НачалоСсылки=Найти(НавигационнаяСсылка, "#user_");
	Если НачалоСсылки>0 Тогда
		//это ссылка на пользователя
		ИдентификаторПользователя=Сред(НавигационнаяСсылка, НачалоСсылки+6);
		Если НЕ ПустаяСтрока(ИдентификаторПользователя) Тогда
			
			ПользовательСсылка=аДООбщееСервер.ПолучитьПользователяПоИдентификатору(ИдентификаторПользователя);
			Если НЕ ПользовательСсылка.Пустая() Тогда
				
				СтандартнаяОбработка=Ложь;
				
				//Если Вопрос(НСтр("en='Open Corporate Chat for answers?';ru='Открыть корпоративный чат для ответа?'"), РежимДиалогаВопрос.ДаНет,,,аОбщееКлиентПС.ЗаголовокДиалога())=КодВозвратаДиалога.Нет Тогда
				//	Возврат;
				//
				//КонецЕсли;
				
				ПараметрыФормы=Новый Структура("Адресат", ПользовательСсылка);
				ФормаКорпоративногоЧата=ПолучитьФорму("Обработка.аКорпоративныйЧат.Форма.ФормаКорпоративногоЧата", ПараметрыФормы);
				ФормаКорпоративногоЧата.Открыть();

				НовоеСообщениеДоступность=ПользовательСсылка;
				
				Состояние(НСтр("ru='Получателем установлен ';")+СокрЛП(ПользовательСсылка));
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		НачалоСсылки=Найти(НавигационнаяСсылка, "#myRef/");
		Если НачалоСсылки>0 Тогда
			//это ссылка на объект
			
			НавигационнаяСсылка=Сред(НавигационнаяСсылка, НачалоСсылки+7);
			Если НЕ ПустаяСтрока(НавигационнаяСсылка) Тогда
				Если Найти(НавигационнаяСсылка, "1cib/")>0 Тогда
					СтандартнаяОбработка=Ложь;
					ТекстСсылки=СокрЛП(ДанныеСобытия.Anchor.innerText);
					Состояние(НСтр("en='Opening ""';ru='Открытие ""'")+ТекстСсылки+НСтр("ru='""...';"));
					ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли; //ссылка на объект
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьЗапросСпискаДокументов()
	СписокПросмотренныхДокументов.ТекстЗапроса=СтрЗаменить(СписокПросмотренныхДокументов.ТекстЗапроса, "ПЕРВЫЕ 10", "ПЕРВЫЕ "+Формат(КоличествоПросмотренныхДокументовМакс, "ЧЦ=2; ЧН="));
	
КонецПроцедуры


&НаСервере
Процедура ВнестиЗаместителяНаСервере(СсылкаНаСпр)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	pcru_ЗаместителиСотрудника.Ссылка
	|ИЗ
	|	Справочник.pcru_ЗаместителиСотрудника КАК pcru_ЗаместителиСотрудника
	|ГДЕ
	|	pcru_ЗаместителиСотрудника.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник",ПараметрыСеанса.ТекущийПользователь );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	   СсылкаНаСпр = Выборка.Ссылка;
	  Возврат;
    КонецЦикла;
    Спроб = Справочники.pcru_ЗаместителиСотрудника.СоздатьЭлемент();
	Спроб.Сотрудник = ПараметрыСеанса.ТекущийПользователь;
	Спроб.Записать();
    СсылкаНаСпр = Спроб.Ссылка;
	 // Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ВнестиЗаместителя(Команда)
	СсылкаНаСпр = Неопределено;
	ВнестиЗаместителяНаСервере(СсылкаНаСпр);
	ПоказатьЗначение(,СсылкаНаСпр);
КонецПроцедуры
		