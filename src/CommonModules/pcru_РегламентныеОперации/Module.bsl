

Процедура ПолучитьПользователейГруппы()
	
	КомандаАДО    = Новый COMОбъект("ADODB.Command");
	СоединениеАДО = Новый COMОбъект("ADODB.Connection");
	СоединениеАДО.Provider = "ADSDSOObject";
	Попытка
		СоединениеАДО.Open("Active Directory Provider");    
	Исключение
		Сообщить("Ошибка при открытии Active Directory Provider: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	КомандаАДО.ActiveConnection = СоединениеАДО;
	Попытка
		RootDSE = ПолучитьCOMОбъект("LDAP://RootDSE");
	Исключение
		Сообщить("Ошибка ПолучитьCOMОбъект(LDAP://RootDSE): " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	ТекущийДомен = RootDSE.Get("defaultNamingContext");
	Сообщить("ТекущийДомен: " + ТекущийДомен);
	Попытка
		ОбъектТекущегоДомена = ПолучитьCOMОбъект("LDAP://" + ТекущийДомен); 
	Исключение
		Сообщить("Ошибка ПолучитьCOMОбъект "+"LDAP://" + ТекущийДомен+": " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	ИмяДомена = ОбъектТекущегоДомена.dc;
	КомандаАДО.CommandText = "<LDAP://OU=Internal_Users," + ТекущийДомен + ">" + ";(&(objectCategory=person)(objectClass=user)(!(userAccountControl:1.2.840.113556.1.4.803:=2)));sAMAccountName,userAccountControl,displayName,department,mail,telephoneNumber,title;subtree";
	//                                                                             
	КомандаАДО.Properties("Page Size").Value     = 1000;
	КомандаАДО.Properties("Timeout").Value       = 300;
	КомандаАДО.Properties("Cache Results").Value = Ложь;
	КомандаАДО.Properties("SearchScope").Value   = 4;
	Попытка
		ВыборкаАДО = КомандаАДО.Execute();  
	Исключение
		Сообщить("Ошибка Execute(): " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	Пока НЕ ВыборкаАДО.EOF Цикл
		ПользовательДомена = Новый Структура;
		Если ВыборкаАДО.Fields("userAccountControl").Value = 514 ИЛИ
			ВыборкаАДО.Fields("userAccountControl").Value = 546 ИЛИ
			ВыборкаАДО.Fields("userAccountControl").Value = 66050 Тогда
		Иначе
			ДобавитьПользователя(СокрЛП(ВыборкаАДО.Fields("sAMAccountName").Value),
			"\\"+ИмяДомена+"\"+СокрЛП(ВыборкаАДО.Fields("sAMAccountName").Value),
			СокрЛП(ВыборкаАДО.Fields("displayName").Value),
			СокрЛП(ВыборкаАДО.Fields("department").Value),
			СокрЛП(ВыборкаАДО.Fields("title").Value),
			СокрЛП(ВыборкаАДО.Fields("telephoneNumber").Value),
			СокрЛП(ВыборкаАДО.Fields("mail").Value));
			// Запишем еще и справочник пользователя
			Сообщить("ИмяПользователя " + СокрЛП(ВыборкаАДО.Fields("displayName").Value));
			Сообщить("ИмяАккаунта "     + СокрЛП(ВыборкаАДО.Fields("sAMAccountName").Value));
			Сообщить("Подразделение "   + СокрЛП(ВыборкаАДО.Fields("department").Value));
			Сообщить("Почта "           + СокрЛП(ВыборкаАДО.Fields("mail").Value));
			Сообщить("Телефон "         + СокрЛП(ВыборкаАДО.Fields("telephoneNumber").Value));
			Сообщить("Должность "       + СокрЛП(ВыборкаАДО.Fields("title").Value));
			//			Сообщить("НеЗаблокирован");
		КонецЕсли;
		ВыборкаАДО.MoveNext();
	КонецЦикла;
	ВыборкаАДО.Close();
	СоединениеАДО.Close();
КонецПроцедуры


Процедура УдалениеНедействительльных()
	КомандаАДО    = Новый COMОбъект("ADODB.Command");
	СоединениеАДО = Новый COMОбъект("ADODB.Connection");
	СоединениеАДО.Provider = "ADSDSOObject";
	Попытка
		СоединениеАДО.Open("Active Directory Provider");    
	Исключение
		Сообщить("Ошибка при открытии Active Directory Provider: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	КомандаАДО.ActiveConnection = СоединениеАДО;
	Попытка
		RootDSE = ПолучитьCOMОбъект("LDAP://RootDSE");
	Исключение
		Сообщить("Ошибка ПолучитьCOMОбъект(LDAP://RootDSE): " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	ТекущийДомен = RootDSE.Get("defaultNamingContext");
	Сообщить("ТекущийДомен: " + ТекущийДомен);
	Попытка
		ОбъектТекущегоДомена = ПолучитьCOMОбъект("LDAP://" + ТекущийДомен); 
	Исключение
		Сообщить("Ошибка ПолучитьCOMОбъект "+"LDAP://" + ТекущийДомен+": " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	ИмяДомена = ОбъектТекущегоДомена.dc;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Наименование КАК Код,
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование <> ""Admin"" и Пользователи.Наименование <> ""Aleksandr A. Demidenko"" ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КомандаАДО.CommandText = "<LDAP://OU=Internal_Users," + ТекущийДомен + ">" + ";(&(objectCategory=person)(objectClass=user)(displayName="+Выборка.Код+") (!(userAccountControl:1.2.840.113556.1.4.803:=2)) );displayName,title;subtree";
		КомандаАДО.Properties("Page Size").Value     = 100;
		КомандаАДО.Properties("Timeout").Value       = 30;
		КомандаАДО.Properties("Cache Results").Value = Ложь;
		КомандаАДО.Properties("SearchScope").Value   = 3;
		Попытка
			ВыборкаАДО = КомандаАДО.Execute();  
		Исключение
			Сообщить("Ошибка Execute(): " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		Если ВыборкаАДО.EOF Тогда
			//Запрос = Новый Запрос;
			//Запрос.Текст = "ВЫБРАТЬ
			//|	аДокументооборотЗадача.Ссылка КАК Ссылка,
			//|	Подразделения.РуководительПодразделения КАК РуководительПодразделения
			//|ИЗ
			//|	Задача.аДокументооборотЗадача КАК аДокументооборотЗадача
			//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Подразделения КАК Подразделения
			//|		ПО аДокументооборотЗадача.Сотрудник.Подразделение = Подразделения.Ссылка
			//|ГДЕ
			//|	аДокументооборотЗадача.Исполнитель = &Исполнитель";
			//Запрос.УстановитьПараметр("Исполнитель",Выборка.Ссылка);
			//Выборка2 = Запрос.Выполнить().Выбрать();
			//Пока Выборка2.Следующий() Цикл
			//	Задача = Выборка2.Ссылка.ПолучитьОбъект();
			//	Задача.Исполнитель = Выборка2.РуководительПодразделения;
			//	Задача.Записать();
			//КонецЦикла;
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Об.Недействителен = Истина;
			Об.записать();
			//.Удалить();
		КонецЕсли;
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	КонецЦикла;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	ВыборкаАДО.Close();
	СоединениеАДО.Close();
КонецПроцедуры


Функция ДобавитьПользователя(ИмяПользователя, ДоменноеИмя, ПолноеИмя,НаименованиеПодразделения,НаименованиеДолжности,Телефон,ЭлПочта) 
	Пользователь = Новый Структура;
	Пользователь.Вставить("ПользовательОС",ДоменноеИмя);
	Пользователь.Вставить("Имя",ИмяПользователя);
	ЗаполнитьСправочникПользователя(Пользователь,ПОлноеИмя,НаименованиеПодразделения,НаименованиеДолжности,Телефон,ЭлПочта);
	Возврат Истина;
КонецФункции

// Процедура заполняет помимо прочего справочник пользователя
Процедура ЗаполнитьСправочникПользователя(ПользовательИБ,ПОлноеИмя,НаименованиеПодразделения,НаименованиеДолжности,Телефон,ЭлПочта) Экспорт
	
	
	Попытка
		//	НачатьТранзакцию();
		
		АккаунтОС = ПользовательИБ.ПользовательОС;
		
		Попытка
			Пользователь1С = Справочники.Пользователи.НайтиПоНаименованию(ПОлноеИмя);//НайтиПользователя1С(ПользовательИБ.Имя);
		Исключение                                    
			Пользователь1С = Неопределено;
			//Возврат;
		КонецПопытки; 
		
		Если ЗначениеЗаполнено(Пользователь1С) Тогда
			
			ПользовательОбъект = Пользователь1С.ПолучитьОбъект();
			
			мз = РегистрыСведений.аДокументооборотПараметрыПользователей.СоздатьМенеджерЗаписи();
			мз.Пользователь  = Пользователь1С;
			мз.Параметр = ПланыВидовХарактеристик.аДокументооборотПараметрыПользователей.НайтиПоНаименованию("Сообщения принимать в эл. почту"); 	
			мз.Значение = Истина; 	
			мз.Записать(Истина);
			
			мз = РегистрыСведений.аДокументооборотПараметрыПользователей.СоздатьМенеджерЗаписи();
			мз.Пользователь  = Пользователь1С;
			мз.Параметр = ПланыВидовХарактеристик.аДокументооборотПараметрыПользователей.НайтиПоНаименованию("Сообщения адрес эл. почты"); 	
			мз.Значение =  ЭлПочта;
			мз.Записать(Истина);
			
			Возврат;
		Иначе
			ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
		КонецЕсли;
		
		//ПользовательОбъект.ИдентификаторПользователяИБ = ПользовательИБ.Имя;
		ПользовательОбъект.Наименование = ПОлноеИмя;
		
		Попытка
			ФЛ = Справочники.ФизическиеЛица.НайтиПоНаименованию(ПОлноеИмя);
		Исключение                                    
			ФЛ = Неопределено;
			//Возврат;
		КонецПопытки; 
		Если ЗначениеЗаполнено(ФЛ) Тогда
			ПользовательОбъект.аФизическоеЛицо =  ФЛ;
		Иначе
			ФЛО = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ФЛО.Наименование = ПОлноеИмя;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Должности.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Должности КАК Должности
			|ГДЕ
			|	Должности.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Наименование",НаименованиеДолжности);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Должность = Неопределено;
			Если Выборка.Следующий() Тогда
				Должность = Выборка.Ссылка;
			Иначе	
				ДолжностьОбъект = Справочники.Должности.СоздатьЭлемент();
				ДолжностьОбъект.Наименование = НаименованиеДолжности;
				ДолжностьОбъект.Записать();
				Должность = ДолжностьОбъект.Ссылка;
			КонецЕсли;
			ФЛО.аДолжность = Должность;
			ФЛО.аДолжностьТекст =  НаименованиеДолжности;
			ФЛО.Записать();
			ПользовательОбъект.аФизическоеЛицо =  ФЛО.Ссылка;
		КонецЕсли; 
		
		//контактная информация пользователя
		Если ЗначениеЗаполнено(ЭлПочта) Тогда
			СтрокиEmail = ПользовательОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя));
			Если СтрокиEmail.Количество() > 0 Тогда
				СтрокаEmail = СтрокиEmail[0];
			Иначе
				СтрокаEmail = ПользовательОбъект.КонтактнаяИнформация.Добавить();
				СтрокаEmail.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
			КонецЕсли;
			СтрокаEmail.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтрокаEmail.Представление = ЭлПочта;
			СтрокаEmail.АдресЭП = ЭлПочта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Телефон) Тогда
			СтрокиТелефон = ПользовательОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонПользователя));
			Если СтрокиТелефон.Количество() > 0 Тогда
				СтрокаТелефон = СтрокиТелефон[0];
			Иначе
				СтрокаТелефон = ПользовательОбъект.КонтактнаяИнформация.Добавить();
				СтрокаТелефон.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
			КонецЕсли;
			СтрокаТелефон.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтрокаТелефон.Представление = Телефон;
			СтрокаТелефон.НомерТелефона = Телефон;
		КонецЕсли;
		
		
		//описание пользователя БД
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		
		ОписаниеПользователяИБ.Имя = ПользовательИБ.Имя;
		ОписаниеПользователяИБ.ПолноеИмя = ПОлноеИмя;
		ОписаниеПользователяИБ.АутентификацияСтандартная = Ложь;
		ОписаниеПользователяИБ.АутентификацияOpenID = Ложь;
		ОписаниеПользователяИБ.АутентификацияОС = Истина;
		ОписаниеПользователяИБ.ПользовательОС = АккаунтОС;
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
		ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
		//ОписаниеПользователяИБ.Язык = Язык;
		//ОписаниеПользователяИБ.РежимЗапуска = РежимЗапуска;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		
		ПользовательОбъект.Недействителен = Ложь;
		
		
		Попытка
			
			ПользовательОбъект.Записать();
			
		Исключение
			Возврат;
		КонецПопытки;  
		
		// профили пользователя
		
		ТПР = Новый ТаблицаЗначений;
		тпр.Колонки.Добавить("Пометка");
		тпр.Колонки.Добавить("Профиль");
		СТрТПР = ТПР.Добавить();		
		СТрТПР.Пометка = Истина;
		СТрТПР.Профиль = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию("Базовые права пользователей");
		
		ОбновитьПраваПользователя(ПользовательОбъект.Ссылка, ТПР);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Подразделения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	Подразделения.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование",НаименованиеПодразделения);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Подразделение = Неопределено;
		Если Выборка.Следующий() Тогда
			Подразделение = Выборка.Ссылка;
			_Подразделение	= Подразделение.ПолучитьОбъект();
			НайденнаяСтрока = _Подразделение.Сотрудники.Найти(ПользовательОбъект.Ссылка);
			Если НайденнаяСтрока = Неопределено Тогда
				СтрП = _Подразделение.Сотрудники.Добавить();
				СтрП.Пользователь = ПользовательОбъект.Ссылка;
			КонецЕсли;
		Иначе	
			_Подразделение = Справочники.Подразделения.СоздатьЭлемент();
			_Подразделение.Наименование = НаименованиеПодразделения;
			СтрП = _Подразделение.Сотрудники.Добавить();
			СтрП.Пользователь = ПользовательОбъект.Ссылка;
		КонецЕсли;
		
		_Подразделение.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РолиИсполнителей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование",НаименованиеДолжности);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Должность = Неопределено;
		Если Выборка.Следующий() Тогда
			РОль = Выборка.Ссылка;
		Иначе	
			РОльОбъект = Справочники.РолиИсполнителей.СоздатьЭлемент();
			РОльОбъект.Наименование = НаименованиеДолжности;
			РОльОбъект.ИспользуетсяБезОбъектовАдресации = истина;
			РОльОбъект.Записать();
			РОль = РОльОбъект.Ссылка;
		КонецЕсли;
		
		мз = РегистрыСведений.аДокументооборотИсполнителиРолей.СоздатьМенеджерЗаписи();
		мз.Период = ТекущаяДата();
		мз.РольИсполнителя = РОль;
		мз.Исполнитель  = ПользовательОбъект.Ссылка;
		мз.ОсновнойОбъектАдресации = _Подразделение.Ссылка; 	
		мз.Записать(Истина);
		
		//	ЗафиксироватьТранзакцию();
		
	Исключение 
		ОписаниеОшибки = ОписаниеОшибки();
		//		ОтменитьТранзакцию();
		//		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры   

&НаСервере
Функция НайтиПользователя1С(ИдентификаторПользователяИБ)
	
	Если Не ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	
КонецФункции

//процедура создана на базе типовой процедуры ЗаписатьИзмененияНаСервере модуля общей формы ПраваДоступаУпрощенно
&НаСервере
Процедура ОбновитьПраваПользователя(Пользователь, ПрофилиПользователя)
	
	// Получение списка изменений.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	//Запрос.УстановитьПараметр("Профили", ПрофилиПользователя);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникПрофили.Ссылка КАК Профиль,
	|	СправочникПрофили.Наименование КАК ПрофильНаименование,
	|	ИСТИНА КАК Пометка,
	|	НЕОПРЕДЕЛЕНО КАК ПерсональнаяГруппаДоступа
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК СправочникПрофили
	|ГДЕ
	|	СправочникПрофили.Наименование = ""Базовые права пользователей""";
	
	//НачатьТранзакцию();
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
				ЗаблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
				ГруппаДоступаОбъект = Выборка.ПерсональнаяГруппаДоступа.ПолучитьОбъект();
			Иначе
				// Создание персональной группы доступа.
				ГруппаДоступаОбъект = Справочники.ГруппыДоступа.СоздатьЭлемент();
				ГруппаДоступаОбъект.Родитель     = Справочники.ГруппыДоступа.РодительПерсональныхГруппДоступа();
				ГруппаДоступаОбъект.Наименование = Выборка.ПрофильНаименование;
				ГруппаДоступаОбъект.Пользователь = Пользователь;
				ГруппаДоступаОбъект.Профиль      = Выборка.Профиль;
			КонецЕсли;
			
			Если Выборка.Профиль = Справочники.ПрофилиГруппДоступа.Администратор Тогда
				
				Если Выборка.Пометка Тогда
					Если ГруппаДоступаОбъект.Пользователи.Найти(
						Пользователь, "Пользователь") = Неопределено Тогда
						
						ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
					КонецЕсли;
				Иначе
					ОписаниеПользователя =  ГруппаДоступаОбъект.Пользователи.Найти(
					Пользователь, "Пользователь");
					
					Если ОписаниеПользователя <> Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Удалить(ОписаниеПользователя);
						
						Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
							// Проверка пустого списка пользователей ИБ в группе доступа Администраторы.
							НайденПользовательИБ = Ложь;
							Для каждого ОписаниеПользователя ИЗ ГруппаДоступаОбъект.Пользователи Цикл
								Если ЗначениеЗаполнено(ОписаниеПользователя.Пользователь)
									И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
									ОписаниеПользователя.Пользователь.ИдентификаторПользователяИБ)
									<> Неопределено Тогда
									
									НайденПользовательИБ = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если НЕ НайденПользовательИБ Тогда
								ВызватьИсключение
								НСтр("ru = 'Профиль Администратор должен быть хотя бы у одного пользователя,
								|которому разрешен доступ к информационной базе.'");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ГруппаДоступаОбъект.Пользователи.Очистить();
				Если Выборка.Пометка Тогда
					ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
				КонецЕсли;
				
			КонецЕсли;
			ГруппаДоступаОбъект.Записать();
			
			Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
				РазблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
			КонецЕсли;
		КонецЦикла;
		//ЗафиксироватьТранзакцию();
		Модифицированность = Ложь;
	Исключение
		//ОтменитьТранзакцию();
		ЕстьОшибки = Истина;
		ВызватьИсключение ("Ошибка про создании/обновлении прав пользователя " + Пользователь + ": " + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Процедура заполняет помимо прочего справочник пользователя
Процедура ЗаполнитьСправочникПользователя_old(ПользовательИБ,ПОлноеИмя,НаименованиеПодразделения,НаименованиеДолжности,Телефон,ЭлПочта) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.код = &Логин1С";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Логин1С", ПользовательИБ.Имя);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ПользовательОбъект = Результат.Пользователь.ПолучитьОбъект(); 
	Иначе 
		ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент(); 
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование",НаименованиеПодразделения);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Подразделение = Неопределено;
	Если Выборка.Следующий() Тогда
		Подразделение = Выборка.Ссылка;
	Иначе	
		_Подразделение = Справочники.Подразделения.СоздатьЭлемент();
		_Подразделение.Наименование = НаименованиеПодразделения;
		_Подразделение.Записать();
		Подразделение = _Подразделение.Ссылка;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Должности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Должности КАК Должности
	|ГДЕ
	|	Должности.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование",НаименованиеДолжности);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Должность = Неопределено;
	Если Выборка.Следующий() Тогда
		Должность = Выборка.Ссылка;
	Иначе	
		ДолжностьОбъект = Справочники.Должности.СоздатьЭлемент();
		ДолжностьОбъект.Наименование = НаименованиеДолжности;
		ДолжностьОбъект.Записать();
		Должность = ДолжностьОбъект.Ссылка;
	КонецЕсли;
	//	ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент(); 
	ПользовательОбъект.Логин1С = ПользовательИБ.Имя;
	ПользовательОбъект.код = ПользовательИБ.Имя;
	ПользовательОбъект.Наименование = ПОлноеИмя;
	ПользовательОбъект.Должность    = Должность;
	ПользовательОбъект.Подразделение = Подразделение;
	ПользовательОбъект.Телефоны = Телефон;
	ПользовательОбъект.ЭлПочтаДляУведомлений = ЭлПочта;
	ПользовательОбъект.ДополнительныеСвойства.Вставить("АутентификацияОС", ПользовательИБ.АутентификацияОС);        
	ПользовательОбъект.ДополнительныеСвойства.Вставить("АутентификацияСтандартная", ПользовательИБ.АутентификацияСтандартная);        
	ПользовательОбъект.ДополнительныеСвойства.Вставить("ПоказыватьВСпискеВыбора", ПользовательИБ.ПоказыватьВСпискеВыбора);        
	ПользовательОбъект.ДополнительныеСвойства.Вставить("ЗапрещеноИзменятьПароль", ПользовательИБ.ЗапрещеноИзменятьПароль);        
	ПользовательОбъект.ДополнительныеСвойства.Вставить("ПользовательОС", ПользовательИБ.ПользовательОС);        
	ПользовательОбъект.Записать();
	
	
	Запись = РегистрыСведений.аНастройкиПользователей.СоздатьМенеджерЗаписи();
	Запись.Пользователь = ПользовательОбъект.Ссылка;
	Запись.Настройка = ПланыВидовХарактеристик.аНастройкиПользователей.АдресЭлПочтыДляУведомлений;
	Запись.Значение  = ЭлПочта;
	Запись.Записать();
	
	Запись = РегистрыСведений.аНастройкиПользователей.СоздатьМенеджерЗаписи();
	Запись.Пользователь = ПользовательОбъект.Ссылка;
	Запись.Настройка = ПланыВидовХарактеристик.аНастройкиПользователей.ПоказыватьЛичнуюПанельПользователяПриЗапуске;
	Запись.Значение  = Истина;
	Запись.Записать();
	
	
КонецПроцедуры   

Процедура pcruUsersSync() Экспорт
	ПолучитьПользователейГруппы();
	//	УдалениеНедействительльных();
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Процедура pcruUsersSync2() Экспорт
	//	ЗагрузкаОтпусковИзЗуп();
	//	ЗавершениеЗависшихЗадач();
	///	ЗаменаПрямая();
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗавершениеЗависшихЗадач()Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотЗадача.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.аДокументооборотЗадача КАК аДокументооборотЗадача
	|ГДЕ
	|	аДокументооборотЗадача.БизнесПроцесс.Завершен
	|	И аДокументооборотЗадача.Выполнена = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗадачаОб = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОб.Удалить();
		
	КонецЦикла;
	
	
КонецПроцедуры // ()

Процедура ЗагрузкаОтпусковИзЗуп()
	// Формируем строку подключения
	СтрокаПодключения =
	"srvr='RUSPBPACC01'; ref='1c_zup'; usr='User'; pwd='1Cadmin';";
	ComConnector = ПолучитьCOMОбъектПоВерсииПлатформы();
	СообщениеПользователю = Новый СообщениеПользователю;
	
	Попытка
		ComConnection = COMConnector.Connect(СтрокаПодключения);
	Исключение
		СообщениеПользователю.Текст = "Ошибка подключения: " + ОписаниеОшибки();
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецПопытки;
	
	ЗапросВН = ComConnection.NewObject("Запрос");
	ЗапросВН.Текст = "	  
	|ВЫБРАТЬ
	|	Отпуск.Номер КАК Номер,
	|	""Отпуск"" КАК ТипДокумента,
	|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачала,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончания,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	Отпуск.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО (Отпуск.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка)
	|			И (ФизическиеЛицаКонтактнаяИнформация.Вид.Наименование = ""Адрес электронной почты сотрудника"")
	|ГДЕ
	|	Отпуск.ДатаНачалаОсновногоОтпуска >= &ТекДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛист.Номер,
	|	""Больничный"",
	|	БольничныйЛист.ДатаНачала,
	|	БольничныйЛист.ДатаОкончания,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление,
	|	БольничныйЛист.Ссылка
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО (БольничныйЛист.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка)
	|			И (ФизическиеЛицаКонтактнаяИнформация.Вид.Наименование = ""Адрес электронной почты сотрудника"")
	|ГДЕ
	|	БольничныйЛист.ДатаНачала >= &ТекДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускБезСохраненияОплаты.Номер,
	|	""ОтпускЗаСвойСчет"",
	|	ОтпускБезСохраненияОплаты.ДатаНачала,
	|	ОтпускБезСохраненияОплаты.ДатаОкончания,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление,
	|	ОтпускБезСохраненияОплаты.Ссылка
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО (ОтпускБезСохраненияОплаты.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка)
	|			И (ФизическиеЛицаКонтактнаяИнформация.Вид.Наименование = ""Адрес электронной почты сотрудника"")
	|ГДЕ
	|	ОтпускБезСохраненияОплаты.ДатаНачала >= &ТекДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|    ВЫБРАТЬ
	|	Командировка.Номер КАК Номер,
	|	""Командировка"" КАК ТипДокумента,
	|	Командировка.ДатаНачала КАК ДатаНачала,
	|	Командировка.ДатаОкончания КАК ДатаОкончания,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	Командировка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Командировка КАК Командировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО (Командировка.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка)
	|			И (ФизическиеЛицаКонтактнаяИнформация.Вид.Наименование = ""Адрес электронной почты сотрудника"")
	|ГДЕ
	|	 Командировка.ДатаНачала >= &ТекДата  
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрогулНеявка.Номер,
	|	""Неявка"",
	|	ПрогулНеявка.ДатаНачала,
	|	ПрогулНеявка.ДатаОкончания,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление,
	|	ПрогулНеявка.Ссылка
	|ИЗ
	|	Документ.ПрогулНеявка КАК ПрогулНеявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО (ПрогулНеявка.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка)
	|			И (ФизическиеЛицаКонтактнаяИнформация.Вид.Наименование = ""Адрес электронной почты сотрудника"")
	|ГДЕ
	|	ПрогулНеявка.ДатаНачала >= НачалоПериода(&ТекДата,Неделя)";
	ЗапросВН.УстановитьПараметр("ТекДата",ТекущаяДата());
	РезультатВН = ЗапросВН.Выполнить();
	ВыборкаВН = РезультатВН.Выбрать();
	Пока ВыборкаВН.Следующий() Цикл
		Если не ЗначениеЗаполнено(ВыборкаВН.Представление)  Тогда
			Продолжить;
		КонецЕсли; 
		//***************************************************************
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	аДокументооборотМатрицаЗаместителей.Сотрудник,
		|	аДокументооборотМатрицаЗаместителей.Примечание
		|ИЗ
		|	РегистрСведений.аДокументооборотМатрицаЗаместителей КАК аДокументооборотМатрицаЗаместителей
		|ГДЕ
		|	аДокументооборотМатрицаЗаместителей.Примечание = &Примечание";
		Запрос.УстановитьПараметр("Примечание",ВыборкаВН.ТипДокумента+" "+ВыборкаВН.Номер);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Продолжить;
		КонецЕсли;   		    
		//***************************************************************
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПользователиКонтактнаяИнформация.Ссылка
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Представление = &Представление";
		Запрос.УстановитьПараметр("Представление",ВыборкаВН.Представление);
		Выборка = Запрос.Выполнить().Выбрать();
		Кого = Неопределено;
		Если Выборка.Следующий() Тогда
			Кого = Выборка.Ссылка;
		КонецЕсли; 
		
		Если не ЗначениеЗаполнено(Кого)  Тогда
			Продолжить;
		КонецЕсли; 
		//***************************************************************
		Кем = Неопределено;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	pcru_ЗаместителиСотрудникаЗаместители.Заместитель
		|ИЗ
		|	Справочник.pcru_ЗаместителиСотрудника.Заместители КАК pcru_ЗаместителиСотрудникаЗаместители
		|ГДЕ
		|	pcru_ЗаместителиСотрудникаЗаместители.Ссылка.Сотрудник = &Сотрудник";
		Запрос.УстановитьПараметр("Сотрудник",Кого);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Кем = Выборка.Заместитель;
		КонецЕсли; 
		//***************************************************************
		Если не ЗначениеЗаполнено(Кем)  Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПодразделенияСотрудники.Ссылка.Руководитель как  Руководитель
			|ИЗ
			|	Справочник.Подразделения.Сотрудники КАК ПодразделенияСотрудники
			|ГДЕ
			|	ПодразделенияСотрудники.Пользователь = &Сотрудник";
			Запрос.УстановитьПараметр("Сотрудник",Кого);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Кем = Выборка.Руководитель;
			КонецЕсли; 
		КонецЕсли; 
		//***************************************************************
		Если не ЗначениеЗаполнено(Кем)  Тогда
			Продолжить;
		КонецЕсли; 
		МЗ = РегистрыСведений.аДокументооборотМатрицаЗаместителей.СоздатьМенеджерЗаписи();
		МЗ.Период = ВыборкаВН.ДатаНачала;
		МЗ.ДатаОкончания = КонецДня(ВыборкаВН.ДатаОкончания);
		МЗ.ЗамещаемыйСотрудник = Кого;
		МЗ.Заместитель = Кем;
		МЗ.Примечание = ВыборкаВН.ТипДокумента+" "+ВыборкаВН.Номер;
		МЗ.ПричинаЗамены = ВыборкаВН.ТипДокумента;
		МЗ.Записать(Истина);
	КонецЦикла;
	
	
	
	
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗаменаПрямая()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотЗадача.Ссылка КАК Ссылка,
	|	аДокументооборотМатрицаЗаместителейСрезПоследних.Заместитель КАК Заместитель,
	|	аДокументооборотМатрицаЗаместителейСрезПоследних.ПричинаЗамены КАК ПричинаЗамены,
	|	аДокументооборотМатрицаЗаместителейСрезПоследних.Примечание,
	|	аДокументооборотЗадача.ТочкаКБП,
	|	аДокументооборотЗадача.Исполнитель
	|ИЗ
	|	РегистрСведений.аДокументооборотМатрицаЗаместителей.СрезПоследних(
	|			,
	|			&ТД <= ДатаОкончания
	|				И &ТД >= Период) КАК аДокументооборотМатрицаЗаместителейСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.аДокументооборотЗадача КАК аДокументооборотЗадача
	|		ПО аДокументооборотМатрицаЗаместителейСрезПоследних.ЗамещаемыйСотрудник = аДокументооборотЗадача.Исполнитель
	|			И (НЕ аДокументооборотЗадача.Выполнена)
	|ГДЕ
	|	аДокументооборотМатрицаЗаместителейСрезПоследних.ЗамещаемыйСотрудник <> аДокументооборотМатрицаЗаместителейСрезПоследних.Заместитель";
	Запрос.УстановитьПараметр("ТД",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			Объект  =   Выборка.Ссылка.Получитьобъект();
			Объект.Исполнитель=Выборка.Заместитель;
			Объект.Записать();
			аДОЗадачиПроцессов.ЗафиксироватьЗаменуИсполнителяПереадресциейВТочкеВыборка(Выборка.ТочкаКБП, Выборка.Исполнитель, Выборка.Заместитель);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	
	
КонецПроцедуры // Замена()


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Процедура ЗагрузкаКонтрагентовИзБухгалтерииТолькоНовые() Экспорт
	ЗагрузкаОтпусковИзЗуп();
	ЗаменаПрямая();
	//+asevryugin@PCRU.LOCAL, 2019-12-05 04:41:54
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотЗадача.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.аДокументооборотЗадача КАК аДокументооборотЗадача
	|ГДЕ
	|	аДокументооборотЗадача.БизнесПроцесс.Завершен
	|	И аДокументооборотЗадача.Выполнена = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗадачаОб = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОб.ВыполнитьЗадачу();
		ЗадачаОб.Записать();
		//
		Запись =  РегистрыСведений.pcru_ПараметрыВыданныхЗадач.СоздатьМенеджерЗаписи();
		Запись.Задача =  ЗадачаОб.Ссылка;
		Запись.Прочитать();
		Запись.Удалить();
	КонецЦикла;
	//+/asevryugin@PCRU.LOCAL, 2019-12-05 04:41:54
КонецПроцедуры

Функция ПолучитьCOMОбъектПоВерсииПлатформы() Экспорт
	
	// Определяем имя COM-объекта по версии платформы
	ИмяComОбъекта = "";
	Инфо = Новый СистемнаяИнформация;
	Если СтрНайти(Инфо.ВерсияПриложения, "8.3") > 0 Тогда
		ИмяComОбъекта = "V83.COMConnector";
	ИначеЕсли СтрНайти(Инфо.ВерсияПриложения, "8.2") > 0 Тогда
		ИмяComОбъекта = "V82.COMConnector";
	Иначе
		ВызватьИсключение "Не удалось определить версию платформы";
	КонецЕсли;
	
	// Инициализируем COM-объект и соединение
	COMConnector = Новый COMОбъект(ИмяComОбъекта);
	
	Возврат COMConnector;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ЗагрузкаДокументовИзСтаройБазы() Экспорт
	Возврат;
	// Формируем строку подключения
	СтрокаПодключения =
	"srvr='RUSPBPACC01'; ref='docmng'; usr='1csend'; pwd='1csend';";
	ComConnector = ПолучитьCOMОбъектПоВерсииПлатформы();
	СообщениеПользователю = Новый СообщениеПользователю;
	
	Попытка
		ComConnection = COMConnector.Connect(СтрокаПодключения);
	Исключение
		СообщениеПользователю.Текст = "Ошибка подключения: " + ОписаниеОшибки();
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецПопытки;
	
	Запрос = ComConnection.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
	| аДокументооборотДокумент.Ссылка КАК Ссылка,
	| 	аДокументооборотДокумент.ВерсияДанных КАК ВерсияДанных,
	| 	аДокументооборотДокумент.ПометкаУдаления КАК ПометкаУдаления,
	| 	аДокументооборотДокумент.Номер КАК Номер,
	| 	аДокументооборотДокумент.Дата КАК Дата,
	| 	аДокументооборотДокумент.Проведен КАК Проведен,
	| 	аДокументооборотДокумент.Автор КАК Автор,
	| 	аДокументооборотДокумент.ВажностьДокумента КАК ВажностьДокумента,
	| 	аДокументооборотДокумент.ВариантХраненияФайлов КАК ВариантХраненияФайлов,
	| 	аДокументооборотДокумент.Версия КАК Версия,
	| 	аДокументооборотДокумент.ВидДокумента КАК ВидДокумента,
	| 	аДокументооборотДокумент.ВиртуальныйКаталог КАК ВиртуальныйКаталог,
	| 	аДокументооборотДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента,
	| 	аДокументооборотДокумент.ДокументВАрхивеПодразделения КАК ДокументВАрхивеПодразделения,
	| 	аДокументооборотДокумент.ДокументОснование КАК ДокументОснование,
	| 	аДокументооборотДокумент.ДополнительныйНомер КАК ДополнительныйНомер,
	| 	аДокументооборотДокумент.ИзображениеРазмерКБ КАК ИзображениеРазмерКБ,
	| 	аДокументооборотДокумент.ИзображениеХранилище КАК ИзображениеХранилище,
	| 	аДокументооборотДокумент.ИмяОсновногоИзображения КАК ИмяОсновногоИзображения,
	| 	аДокументооборотДокумент.КоличествоЛистовВсего КАК КоличествоЛистовВсего,
	| 	аДокументооборотДокумент.КоличествоЛистовЛитерных КАК КоличествоЛистовЛитерных,
	| 	аДокументооборотДокумент.Комментарий КАК Комментарий,
	| 	аДокументооборотДокумент.Контрагент КАК Контрагент,
	| 	аДокументооборотДокумент.КонтрагентКонтактноеЛицо КАК КонтрагентКонтактноеЛицо,
	| 	аДокументооборотДокумент.КорпоративнаяПапка КАК КорпоративнаяПапка,
	| 	аДокументооборотДокумент.МестоРегистрации КАК МестоРегистрации,
	| 	аДокументооборотДокумент.МестоХраненияДокумента КАК МестоХраненияДокумента,
	| 	аДокументооборотДокумент.НаименованиеДокумента КАК НаименованиеДокумента,
	| 	аДокументооборотДокумент.НоменклатураДел КАК НоменклатураДел,
	| 	аДокументооборотДокумент.НомерДокументаВАрхиве КАК НомерДокументаВАрхиве,
	| 	аДокументооборотДокумент.НомерЦифры КАК НомерЦифры,
	| 	аДокументооборотДокумент.ОграничитьДоступРабочейГруппой КАК ОграничитьДоступРабочейГруппой,
	| 	аДокументооборотДокумент.Организация КАК Организация,
	| 	аДокументооборотДокумент.ОсновнойПолучатель КАК ОсновнойПолучатель,
	| 	аДокументооборотДокумент.ОсновнойФайлИмя КАК ОсновнойФайлИмя,
	| 	аДокументооборотДокумент.ОсновнойФайлИмяДляОткрытия КАК ОсновнойФайлИмяДляОткрытия,
	| 	аДокументооборотДокумент.ОсновнойФайлХранилище КАК ОсновнойФайлХранилище,
	| 	аДокументооборотДокумент.ОсновнойФайлЭтоШаблон КАК ОсновнойФайлЭтоШаблон,
	| 	аДокументооборотДокумент.ПередаватьДанныеВШаблон КАК ПередаватьДанныеВШаблон,
	| 	аДокументооборотДокумент.Подразделение КАК Подразделение,
	| 	аДокументооборотДокумент.ПоследовательныйОбход КАК ПоследовательныйОбход,
	| 	аДокументооборотДокумент.Проект КАК Проект,
	| 	аДокументооборотДокумент.РезолюцияАвтор КАК РезолюцияАвтор,
	| 	аДокументооборотДокумент.РезолюцияДата КАК РезолюцияДата,
	| 	аДокументооборотДокумент.РезолюцияИсполнениеДатаПлан КАК РезолюцияИсполнениеДатаПлан,
	| 	аДокументооборотДокумент.РезолюцияИсполнениеДатаФакт КАК РезолюцияИсполнениеДатаФакт,
	| 	аДокументооборотДокумент.РезолюцияКонтролер КАК РезолюцияКонтролер,
	| 	аДокументооборотДокумент.РезолюцияТекст КАК РезолюцияТекст,
	| 	аДокументооборотДокумент.РезолюцияШаблон КАК РезолюцияШаблон,
	| 	аДокументооборотДокумент.СодержаниеДокумента КАК СодержаниеДокумента,
	| 	аДокументооборотДокумент.СостояниеДокумента КАК СостояниеДокумента,
	| 	аДокументооборотДокумент.СостояниеДокументаПредыдущее КАК СостояниеДокументаПредыдущее,
	| 	аДокументооборотДокумент.СотрудникРегистратор КАК СотрудникРегистратор,
	| 	аДокументооборотДокумент.СправочникУчетнойСистемы1 КАК СправочникУчетнойСистемы1,
	| 	аДокументооборотДокумент.СправочникУчетнойСистемы2 КАК СправочникУчетнойСистемы2,
	| 	аДокументооборотДокумент.СправочникУчетнойСистемы3 КАК СправочникУчетнойСистемы3,
	| 	аДокументооборотДокумент.СуммаДокумента КАК СуммаДокумента,
	| 	аДокументооборотДокумент.ТипДокумента КАК ТипДокумента,
	| 	аДокументооборотДокумент.ТиповаяГруппаСотрудников КАК ТиповаяГруппаСотрудников,
	| 	аДокументооборотДокумент.ХранитьДоДаты КАК ХранитьДоДаты,
	| 	аДокументооборотДокумент.ШаблонБланкаДокументооборота КАК ШаблонБланкаДокументооборота,
	| 	аДокументооборотДокумент.ШаблонВзаимодействияСКонтрагентом КАК ШаблонВзаимодействияСКонтрагентом,
	| 	аДокументооборотДокумент.СрокДействияДокумента КАК СрокДействияДокумента,
	| 	аДокументооборотДокумент.ПослеОкончанияДействия КАК ПослеОкончанияДействия,
	| 	аДокументооборотДокумент.ПослеОкончанияСоздатьПоручениеОтветственному КАК ПослеОкончанияСоздатьПоручениеОтветственному,
	| 	аДокументооборотДокумент.ПослеОкончанияСоздатьПоручениеЗаДней КАК ПослеОкончанияСоздатьПоручениеЗаДней,
	| 	аДокументооборотДокумент.ПослеОкончанияСоздатьПоручениеТекст КАК ПослеОкончанияСоздатьПоручениеТекст,
	| 	аДокументооборотДокумент.ПослеОкончанияСоздатьПоручениеПримечание КАК ПослеОкончанияСоздатьПоручениеПримечание,
	|   аДокументооборотДокумент.Подписан КАК Подписан,
	|   аДокументооборотДокумент.Бит_ГруппаСогласования КАК Бит_ГруппаСогласования,
	| 	аДокументооборотДокумент.Бит_СрокДействияДокументаНеОграничен КАК Бит_СрокДействияДокументаНеОграничен,
	| 	аДокументооборотДокумент.Бит_ДатаДоговора КАК Бит_ДатаДоговора,
	| 	аДокументооборотДокумент.Бит_НомерДоговораВБухгалтерии КАК Бит_НомерДоговораВБухгалтерии,
	| 	аДокументооборотДокумент.Бит_Классификатор КАК Бит_Классификатор,
	| 	аДокументооборотДокумент.Бит_ПримечаниеКОсновномуФайлу КАК Бит_ПримечаниеКОсновномуФайлу,
	| 	аДокументооборотДокумент.ДополнительноеСоглашение КАК ДополнительноеСоглашение,
	| 	аДокументооборотДокумент.Бит_ИсполнительДляКорреспонденции КАК Бит_ИсполнительДляКорреспонденции,
	| 	аДокументооборотДокумент.БИТ_ДатаДляКорреспонденции КАК БИТ_ДатаДляКорреспонденции,
	| 	аДокументооборотДокумент.битКонтрагентКому КАК битКонтрагентКому,
	| 	аДокументооборотДокумент.битВыполнитьКДате КАК битВыполнитьКДате,
	| 	аДокументооборотДокумент.Типовой КАК Типовой,
	| 	аДокументооборотДокумент.пкру_ЭтоТендер КАК пкру_ЭтоТендер,
	| 	аДокументооборотДокумент.пкру_ОписаниеТендера КАК пкру_ОписаниеТендера,
	| 	аДокументооборотДокумент.пкру_ОкончательныйСчет КАК пкру_ОкончательныйСчет,
	| 	аДокументооборотДокумент.пкру_Предоплата КАК пкру_Предоплата,
	| 	аДокументооборотДокумент.пкру_ЧастичныйПлатеж КАК пкру_ЧастичныйПлатеж,
	| 	аДокументооборотДокумент.пкру_CostCentr КАК пкру_CostCentr,
	| 	аДокументооборотДокумент.пкру_СтатьяРасходов КАК пкру_СтатьяРасходов,
	| 	аДокументооборотДокумент.pcru_ВРамкахБюджета КАК pcru_ВРамкахБюджета,
	| 	аДокументооборотДокумент.pcru_ПричинаПодписания КАК pcru_ПричинаПодписания,
	| 	аДокументооборотДокумент.РабочаяГруппа.(
	| 		Ссылка КАК Ссылка,
	| 		НомерСтроки КАК НомерСтроки,
	| 		Пользователь КАК Пользователь,
	| 		Подразделение КАК Подразделение,
	| 		ДоступОткрыт КАК ДоступОткрыт
	| 	) КАК РабочаяГруппа,
	| 	аДокументооборотДокумент.ДополнительныеФайлы.(
	| 		Ссылка КАК Ссылка,
	| 		НомерСтроки КАК НомерСтроки,
	| 		Наименование КАК Наименование,
	| 		Месторасположение КАК Месторасположение,
	| 		ХранилищеФайлов КАК ХранилищеФайлов,
	| 		КоличествоЛистовВсего КАК КоличествоЛистовВсего,
	| 		КоличествоЛистовЛитерных КАК КоличествоЛистовЛитерных,
	| 		pcru_ТипФайла КАК pcru_ТипФайла
	| 	) КАК ДополнительныеФайлы,
	| 	аДокументооборотДокумент.Задачи.(
	| 		Ссылка КАК Ссылка,
	| 		НомерСтроки КАК НомерСтроки
	| 	) КАК Задачи,
	| 	аДокументооборотДокумент.РаботаСКонтрагентом.(
	| 		Ссылка КАК Ссылка,
	| 		НомерСтроки КАК НомерСтроки,
	| 		Дата КАК Дата,
	| 		Информация КАК Информация,
	| 		Примечание КАК Примечание
	| 	) КАК РаботаСКонтрагентом,
	| 	аДокументооборотДокумент.РаботаПоШаблонуВзаимодействия.(
	| Ссылка КАК Ссылка,
	| НомерСтроки КАК НомерСтроки,
	| 		ОписаниеЗадачи КАК ОписаниеЗадачи,
	| 		Выполнено КАК Выполнено,
	| 		Ответственный КАК Ответственный
	| 	) КАК РаботаПоШаблонуВзаимодействия,
	| 	аДокументооборотДокумент.ЖурналПередачи.(
	| 		Ссылка КАК Ссылка,
	| 		НомерСтроки КАК НомерСтроки,
	| 		СотрудникПередал КАК СотрудникПередал,
	| 		СотрудникПринял КАК СотрудникПринял,
	| 	Дата КАК Дата,
	| 		Примечание КАК Примечание,
	| 	Комментарий КАК Комментарий
	| 	) КАК ЖурналПередачи,
	| 	аДокументооборотДокумент.СписокПолучателей.(
	| 		Ссылка КАК Ссылка,
	| 		НомерСтроки КАК НомерСтроки,
	| 		Получатель КАК Получатель,
	| 		Примечание КАК Примечание,
	| 		ЗаменяющийПользователя КАК ЗаменяющийПользователя,
	| 		ВОтпуске КАК ВОтпуске
	| 	) КАК СписокПолучателей,
	| 	аДокументооборотДокумент.СписокИсполнителей.(
	| 		Ссылка КАК Ссылка,
	| 		НомерСтроки КАК НомерСтроки,
	| 		Исполнитель КАК Исполнитель,
	| 		Примечание КАК Примечание,
	| 		ПроцентИсполнения КАК ПроцентИсполнения,
	| 		ВыполнитьКДате КАК ВыполнитьКДате,
	| 		ТекстПоручения КАК ТекстПоручения,
	| 		ЗаменяющийПользователя КАК ЗаменяющийПользователя
	| ) КАК СписокИсполнителей,
	| 	аДокументооборотДокумент.ДополнительныеРеквизиты.(
	| 		Ссылка КАК Ссылка,
	| 		НомерСтроки КАК НомерСтроки,
	| 		ДополнительныйРеквизит КАК ДополнительныйРеквизит,
	| 		ЗначениеРеквизита КАК ЗначениеРеквизита
	| 	) КАК ДополнительныеРеквизиты,
	| 	аДокументооборотДокумент.ПодписиПользователей.(
	| 		Ссылка КАК Ссылка,
	| 		НомерСтроки КАК НомерСтроки,
	| 		Пользователь КАК Пользователь,
	| 		ДатаВремяПодписи КАК ДатаВремяПодписи
	| 	) КАК ПодписиПользователей,
	| 	аДокументооборотДокумент.пкру_РаспределениеЗатрат.(
	| 		Ссылка КАК Ссылка,
	| 		НомерСтроки КАК НомерСтроки,
	| 		пкру_CostCentr КАК пкру_CostCentr,
	| 		пкру_СтатьяРасходов КАК пкру_СтатьяРасходов,
	| 		Сумма КАК Сумма
	| 	) КАК пкру_РаспределениеЗатрат,
	| 	аДокументооборотДокумент.Приложения.(
	| 		Ссылка КАК Ссылка,
	| 		НомерСтроки КАК НомерСтроки,
	| 		Приложение КАК Приложение,
	| 		ВидПриложения КАК ВидПриложения
	| 	) КАК Приложения
	| ИЗ
	| 	Документ.аДокументооборотДокумент КАК аДокументооборотДокумент";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		сс = Документы.аДокументооборотКорпоративныйДокумент.НайтиПоНомеру(Выборка.Номер);	
		Если ЗначениеЗаполнено(сс) Тогда
			НовДок = сс.ПолучитьОбъект();
		Иначе
			НовДок = Документы.аДокументооборотКорпоративныйДокумент.СоздатьДокумент(); 
		КонецЕсли; 	
		
		
		НовДок.Номер = Выборка.Номер;
		НовДок.Дата = Выборка.Дата;
		НовДок.Автор = Справочники.Пользователи.НайтиПоНаименованию(Выборка.Автор.Description);
		НовДок.ВажностьДокумента= Справочники.аДокументооборотВажностьОбъекта.НайтиПоНаименованию(Выборка.ВажностьДокумента.Description);
		НовДок.ВидДокумента= Справочники.аДокументооборотВидыДокументов.НайтиПоНаименованию(Выборка.ВидДокумента.Description);
		НовДок.ГрифДоступа = Справочники.аДокументооборотГрифыДоступа.НайтиПоНаименованию("Стандартный");
		НовДок.ДатаОкончанияДействияДокумента= Выборка.Дата;
		НовДок.ДокументВАрхиве= Выборка.Дата;
		НовДок.КорпоративнаяПапка= Справочники.аДокументооборотКорпоративныеПапки.НайтиПоНаименованию("01. Документы организации");
		НовДок.НаименованиеДокумента= Выборка.НаименованиеДокумента;
		
		НовДок.ОсновноеПодразделение= Справочники.Подразделения.НайтиПоНаименованию(Выборка.Подразделение.Description);
		НовСтр = НовДок.ОрганизацииПодразделения.Добавить();
		НовСтр.Подразделение = НовДок.ОсновноеПодразделение;
		
		НовДок.ОсновнойКонтрагент = Справочники.Контрагенты.НайтиПоНаименованию(Выборка.Контрагент.Description);
		НовСтрКД = НовДок.КонтрагентыДоговоры.Добавить();
		НовСтрКД.Контрагент =НовДок.ОсновнойКонтрагент;
		НовСтрКД.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(Выборка.ДоговорКонтрагента.Description);
		НовДок.ОткрыватьВПростомРежиме= Ложь;
		НовДок.ПрисутствуютПолучатели = Истина;
		НовДок.РазрешитьИзмененияТолькоАвтором = Ложь;
		НовДок.РегистрационныйНомер= Выборка.Номер;
		НовДок.СодержаниеДокумента= Выборка.СодержаниеДокумента;
		НовДок.СуммаДокумента= Выборка.СуммаДокумента;
		НовДок.ТипДокумента= Справочники.аДокументооборотТипыНосителейДокументов.НайтиПоНаименованию("Оригинал документа");
		НовДок.ТипХраненияФайлов= Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		//НовДок.ХранилищеТекстаСодержания= Выборка.Дата;
		НовДок.Резолюция= Выборка.РезолюцияТекст;
		НовДок.ДокументВАрхиве = Ложь;
		НовДок.пкру_РаспределениеЗатрат.очистить();
		Для каждого СтрокаТЧ Из Выборка.пкру_РаспределениеЗатрат.Unload() Цикл
			НоваяСтрока = 	НовДок.пкру_РаспределениеЗатрат.Добавить();
			НоваяСтрока.пкру_CostCentr = Справочники.пкру_CostCentr.НайтиПоНаименованию(СтрокаТЧ.пкру_CostCentr.Description);
			Если не ЗначениеЗаполнено(НоваяСтрока.пкру_CostCentr) Тогда
				НКЦ =  Справочники.пкру_CostCentr.СоздатьЭлемент();
				НКЦ.Наименование = СтрокаТЧ.пкру_CostCentr.Description;
				НКЦ.Записать();
				НоваяСтрока.пкру_CostCentr =  НКЦ.Ссылка;
			КонецЕсли; 
			НоваяСтрока.пкру_СтатьяРасходов = Справочники.пкру_СтатьиРасходов.НайтиПоНаименованию(СтрокаТЧ.пкру_СтатьяРасходов.Description);
			Если не ЗначениеЗаполнено(НоваяСтрока.пкру_СтатьяРасходов) Тогда
				НКЦ =  Справочники.пкру_СтатьиРасходов.СоздатьЭлемент();
				НКЦ.Наименование = СтрокаТЧ.пкру_СтатьяРасходов.Description;
				НКЦ.Записать();
				НоваяСтрока.пкру_СтатьяРасходов =  НКЦ.Ссылка;
			КонецЕсли; 
			НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
		КонецЦикла; 
		
		НовДок.СписокПолучателей.очистить();
		
		Для каждого СтрокаТЧ Из Выборка.СписокИсполнителей.Unload() Цикл
			НоваяСтрока = НовДок.СписокПолучателей.Добавить();
			НоваяСтрока.Получатель = Справочники.Пользователи.НайтиПоНаименованию(СтрокаТЧ.Исполнитель.Description);
		КонецЦикла;                                                            
		
		НовДок.Записать(РежимЗаписиДокумента.Запись);	
		
		Для каждого СтрокаТЧ Из НовДок.СписокПолучателей Цикл
			МЗ = РегистрыСведений.аДОПользователиОбъектов.СоздатьМенеджерЗаписи();
			МЗ.Объект = НовДок.Ссылка;
			МЗ.Пользователь = СтрокаТЧ.Получатель;
			МЗ.Записать(Истина);
		КонецЦикла;                                                            
		
		НовДок.СсылкиНаФайлы.Очистить();
		
		Если Выборка.ОсновнойФайлИмяДляОткрытия <> "" Тогда
			Если Лев(Выборка.ОсновнойФайлИмяДляОткрытия,2) = "\\" Тогда
				Попытка
					СсылкаНаФайл = аДОРаботаСФайлами.СоздатьФайлВладельца(Выборка.ОсновнойФайлИмяДляОткрытия, НовДок.Ссылка); 
					СтркаФайл = НовДок.СсылкиНаФайлы.Добавить();
					СтркаФайл.Файл = СсылкаНаФайл;
					СтркаФайл.Статус = Справочники.аДокументооборотСтатусыФайловДокументов.Основной;
				Исключение
				КонецПопытки; 
			Иначе
				Попытка
					ИмяФ = КаталогВременныхФайлов()+Выборка.ОсновнойФайлИмяДляОткрытия; 
					Выборка.ОсновнойФайлХранилище.Get().Write(ИмяФ);
					СсылкаНаФайл = аДОРаботаСФайлами.СоздатьФайлВладельца(ИмяФ, НовДок.Ссылка); 
					НовДок.СсылкиНаФайлы.Очистить();
					СтркаФайл = НовДок.СсылкиНаФайлы.Добавить();
					СтркаФайл.Файл = СсылкаНаФайл;
					СтркаФайл.Статус = Справочники.аДокументооборотСтатусыФайловДокументов.Основной;
					УдалитьФайлы(ИмяФ);
				Исключение
				КонецПопытки; 
			КонецЕсли; 
		КонецЕсли; 
		
		НовДок.Записать(РежимЗаписиДокумента.Запись);	
	КонецЦикла;
	
	// Договора Контагентов.
	
	
	
	
КонецПроцедуры

Процедура ВосстановлениеЗатрат() Экспорт
	//	Возврат;
	// Формируем строку подключения
	СтрокаПодключения =
	"srvr='RUSPBPACC01'; ref='Docmng_new_test'; usr='Admin'; pwd='vTFXSSWX';";
	ComConnector = ПолучитьCOMОбъектПоВерсииПлатформы();
	СообщениеПользователю = Новый СообщениеПользователю;
	
	Попытка
		ComConnection = COMConnector.Connect(СтрокаПодключения);
	Исключение
		СообщениеПользователю.Текст = "Ошибка подключения: " + ОписаниеОшибки();
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецПопытки;
	
	Запрос = ComConnection.NewObject("Запрос");
	//Запрос.Текст = "ВЫБРАТЬ
	//|	аДокументооборотДокумент.Ссылка КАК Ссылка,
	//|	аДокументооборотДокумент.Ссылка.Номер КАК Номер,
	//|	аДокументооборотДокумент.пкру_CostCentr.Наименование КАК пкру_CostCentr,
	//|	аДокументооборотДокумент.пкру_СтатьяРасходов.Наименование КАК пкру_СтатьяРасходов,
	//|	аДокументооборотДокумент.Сумма КАК Сумма
	//|ИЗ
	//|	Документ.аДокументооборотКорпоративныйДокумент.пкру_РаспределениеЗатрат КАК аДокументооборотДокумент";
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотДокумент.Ссылка КАК Ссылка,
	| 	аДокументооборотДокумент.пкру_РаспределениеЗатрат.(
	| 		Ссылка КАК Ссылка,
	| 		НомерСтроки КАК НомерСтроки,
	| 		пкру_CostCentr КАК пкру_CostCentr,
	| 		пкру_СтатьяРасходов КАК пкру_СтатьяРасходов,
	| 		Сумма КАК Сумма
	| 	) КАК пкру_РаспределениеЗатрат,
	|	аДокументооборотДокумент.Номер КАК Номер
	|ИЗ
	|	Документ.аДокументооборотКорпоративныйДокумент КАК аДокументооборотДокумент";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ComConnection.ОбходРезультатаЗапроса.ПоГруппировкам);
	ТекНомер = "";
	НовДок = Неопределено;
	Пока Выборка.Следующий() Цикл
		Запрос1 = Новый Запрос;
		Запрос1.Текст = "ВЫБРАТЬ
		|	аДокументооборотКорпоративныйДокумент.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.аДокументооборотКорпоративныйДокумент КАК аДокументооборотКорпоративныйДокумент
		|ГДЕ
		|	аДокументооборотКорпоративныйДокумент.Номер ПОДОБНО &Номер";
		Запрос1.УстановитьПараметр("Номер",СокрЛП(Выборка.Номер)+"%");
		Выборка1 = Запрос1.Выполнить().Выбрать();
		Пока Выборка1.Следующий() Цикл
			сс =  Выборка1.Ссылка;
			НовДок = сс.ПолучитьОбъект();
			НовДок.пкру_РаспределениеЗатрат.Очистить();
			Для каждого СтрокаТЧ Из Выборка.пкру_РаспределениеЗатрат.Unload() Цикл
				НоваяСтрока = 	НовДок.пкру_РаспределениеЗатрат.Добавить();
				НоваяСтрока.пкру_CostCentr = Справочники.пкру_CostCentr.НайтиПоНаименованию(СтрокаТЧ.пкру_CostCentr.Description);
				НоваяСтрока.пкру_СтатьяРасходов = Справочники.пкру_СтатьиРасходов.НайтиПоНаименованию(СтрокаТЧ.пкру_СтатьяРасходов.Description);
				НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
			КонецЦикла; 
			Попытка
			
			НовДок.Записать();
				
			
			Исключение
			
			КонецПопытки; 
		КонецЦикла;
	КонецЦикла;
	// Договора Контагентов.
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура pcru_ActiveUser() Экспорт
	МассивСоединений=ПолучитьСоединенияИнформационнойБазы();
	
	//построим таблицу пользователей
	ТаблицаПользователей=Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Пользователь");
	ТаблицаПользователей.Колонки.Добавить("НомерСоединения");
	//ТаблицаПользователей.Колонки.Добавить("ДатаВремяПодключения", Тип("Дата"));
	
	Нз = РегистрыСведений.pcru_ActiveUsers.СоздатьНаборЗаписей();
	Нз.Очистить();
	КоличествоСоединений=МассивСоединений.Количество();
	Для НомерСоединения=0 По КоличествоСоединений-1 Цикл
		АктивноеСоединение=МассивСоединений[НомерСоединения];
		Если СокрЛП(ТипЗнч(АктивноеСоединение))<>"Активное соединение" Тогда
			Продолжить;
		КонецЕсли;
		АктивныйПользователь=АктивноеСоединение.Пользователь;
		НоваяСтрока                 = Нз.Добавить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		Запрос.УстановитьПараметр("ИдентификаторПользователяИБ",АктивныйПользователь.УникальныйИдентификатор);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока.Пользователь    = Выборка.Ссылка;	
		КонецЦикла;
		Если  не ЗначениеЗаполнено(НоваяСтрока.Пользователь)  Тогда
			НоваяСтрока.Пользователь    = АктивныйПользователь.ПолноеИмя;
		КонецЕсли; 
		Если  не ЗначениеЗаполнено(НоваяСтрока.Пользователь)  Тогда
			НоваяСтрока.Пользователь    = "Регламентное Задание";
		КонецЕсли; 
		Если  АктивноеСоединение.ИмяПриложения = "1CV8" Тогда
			НоваяСтрока.ТипСоединения   = 0;
		КонецЕсли; 
		Если  АктивноеСоединение.ИмяПриложения = "Designer" Тогда
			НоваяСтрока.ТипСоединения   = 1;
		КонецЕсли; 
		Если  АктивноеСоединение.ИмяПриложения = "BackgroundJob" Тогда
			НоваяСтрока.ТипСоединения   = 2;
		КонецЕсли; 
		НоваяСтрока.НомерСоединения = АктивноеСоединение.НомерСоединения;
	КонецЦикла;
	Нз.Записать(Истина);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотКорпоративныйБизнесПроцесс.Ссылка
	|ИЗ
	|	БизнесПроцесс.аДокументооборотКорпоративныйБизнесПроцесс КАК аДокументооборотКорпоративныйБизнесПроцесс
	|ГДЕ
	|	аДокументооборотКорпоративныйБизнесПроцесс.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	аДокументооборотЗадача.Ссылка
	|ИЗ
	|	Задача.аДокументооборотЗадача КАК аДокументооборотЗадача
	|ГДЕ
	|	аДокументооборотЗадача.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	аДокументооборотТочкиКорпоративныхПроцессов.Ссылка
	|ИЗ
	|	Справочник.аДокументооборотТочкиКорпоративныхПроцессов КАК аДокументооборотТочкиКорпоративныхПроцессов
	|ГДЕ
	|	аДокументооборотТочкиКорпоративныхПроцессов.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().Удалить();	
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалениеПустыхСтрок()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотСогласованиеГруппойРецензенты.Ссылка КАК Ссылка,
	|	аДокументооборотСогласованиеГруппойРецензенты.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	БизнесПроцесс.аДокументооборотСогласованиеГруппой.Рецензенты КАК аДокументооборотСогласованиеГруппойРецензенты
	|ГДЕ
	|	аДокументооборотСогласованиеГруппойРецензенты.Рецензент = &Рецензент";
	Запрос.УстановитьПараметр("Рецензент",Справочники.Пользователи.ПустаяСсылка() );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		об = Выборка.ссылка.получитьобъект();
		Для каждого Строка Из об.Рецензенты Цикл 
			Если  не ЗначениеЗаполнено(Строка.Рецензент) тогда
				об.Рецензенты.Удалить(Строка); 
			конецесли
		КонецЦикла; 
		об.Записать();
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


