// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СтруктуруВСтрокуJSON(Структура) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,Структура);//,,"ПреобразованиеJSON","Pcru_WSWORKS"); 
	Возврат ЗаписьJSON.Закрыть();
КонецФункции // СтруктуруВСтрокуJSON()

//<Свойство> - в параметр передается имя свойства, если выполняется запись структуры или соответствия,
//<Значение> - в параметр передается исходное значение,
//<ДополнительныеПараметры> - дополнительные параметры, которые указаны в вызове метода ЗаписатьJSON,
//<Отказ> - отказ от записи свойства.
Функция ПреобразованиеJSON(Свойство,Значение,ДополнительныеПараметры,Отказ) Экспорт
	МД_Реквизиты = Значение.Метаданные().Реквизиты;
	Стр = Новый Структура;
	Для Каждого МетаРеквизит Из МД_Реквизиты Цикл
		Если ТипЗнч(Значение[МетаРеквизит.Имя]) = Тип("Строка") Тогда
			Стр.Вставить(МетаРеквизит.Имя,Значение[МетаРеквизит.Имя]);
		ИначеЕсли ТипЗнч(Значение[МетаРеквизит.Имя]) = Тип("Число") Тогда
			Стр.Вставить(МетаРеквизит.Имя,Значение[МетаРеквизит.Имя]);
		ИначеЕсли ТипЗнч(Значение[МетаРеквизит.Имя]) = Тип("Дата") Тогда
			Стр.Вставить(МетаРеквизит.Имя,Значение[МетаРеквизит.Имя]);
		ИначеЕсли ТипЗнч(Значение[МетаРеквизит.Имя]) = Тип("ТаблицаЗначений" ) Тогда
			МассТЧ = Новый Массив;
			Для каждого ЭлементТЧ Из Значение[МетаРеквизит.Имя] Цикл
				СтрТЧ  = Новый Структура;
				Для каждого КолонкаТЧ Из Значение[МетаРеквизит.Имя].Колонки Цикл
					Если ТипЗнч(ЭлементТЧ[КолонкаТЧ.Имя]) = Тип("Строка") Тогда
						СтрТЧ.Вставить(КолонкаТЧ.Имя,ЭлементТЧ[КолонкаТЧ.Имя]);
					ИначеЕсли ТипЗнч(ЭлементТЧ[КолонкаТЧ.Имя]) = Тип("Число") Тогда
						СтрТЧ.Вставить(КолонкаТЧ.Имя,ЭлементТЧ[КолонкаТЧ.Имя]);
					ИначеЕсли ТипЗнч(ЭлементТЧ[КолонкаТЧ.Имя]) = Тип("Дата") Тогда
						СтрТЧ.Вставить(КолонкаТЧ.Имя,ЭлементТЧ[КолонкаТЧ.Имя]);
					Иначе
						СтрТЧ.Вставить(КолонкаТЧ.Имя,ПреобразованиеJSON(Свойство,ЭлементТЧ[КолонкаТЧ.Имя],ДополнительныеПараметры,Отказ));
					КонецЕсли;  
					СтрТЧ.Вставить(КолонкаТЧ.Имя,ЭлементТЧ[КолонкаТЧ.Имя]);
				КонецЦикла;
				Масстч.Добавить(СтрТЧ);
			КонецЦикла;
			Стр.Вставить(МетаРеквизит.Имя,Масстч);
		Иначе
			Стр.Вставить(МетаРеквизит.Имя,ПреобразованиеJSON(Свойство,Значение,ДополнительныеПараметры,Отказ));
		КонецЕсли;  
	КонецЦикла;
	Возврат Стр;
	
КонецФункции // СтруктуруВСтрокуJSON()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОтправитьСчетВУМФО(Ссылка)Экспорт
	СтруктураОтвета                                                                  = Новый Структура;
	Запрос                                                                           = Новый Запрос;
	Запрос.Текст                                                                     = "ВЫБРАТЬ
	|	аДокументооборотКорпоративныйДокумент.СуммаДокумента КАК СуммаДокумента,
	|	аДокументооборотКорпоративныйДокументОрганизацииПодразделения.Подразделение.Наименование КАК ПодразделениеНаименование,
	|	аДокументооборотКорпоративныйДокументОрганизацииПодразделения.Подразделение.Код КАК ПодразделениеКод,
	|	аДокументооборотКорпоративныйДокументКонтрагентыДоговоры.Контрагент.ИНН КАК КонтрагентИНН,
	|	ЕСТЬNULL(аДокументооборотКорпоративныйДокументКонтрагентыДоговоры.ДоговорКонтрагента.Наименование,                                               """") КАК ДоговорКонтрагентаНаименование,
	|	аДокументооборотКорпоративныйДокумент.ВидДокумента.Наименование КАК ТипДокументаНаименование,
	|	аДокументооборотКорпоративныйДокумент.ДатаОкончанияДействияДокумента КАК ДатаОкончанияДействияДокумента,
	|	аДокументооборотКорпоративныйДокумент.НаименованиеДокумента КАК НаименованиеДокумента,
	|	аДокументооборотКорпоративныйДокумент.Номер КАК Номер
	|ИЗ
	|	Документ.аДокументооборотКорпоративныйДокумент КАК аДокументооборотКорпоративныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.аДокументооборотКорпоративныйДокумент.КонтрагентыДоговоры КАК аДокументооборотКорпоративныйДокументКонтрагентыДоговоры
	|		ПО (аДокументооборотКорпоративныйДокументКонтрагентыДоговоры.Ссылка           = аДокументооборотКорпоративныйДокумент.Ссылка)
	|			И (аДокументооборотКорпоративныйДокументКонтрагентыДоговоры.НомерСтроки      = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.аДокументооборотКорпоративныйДокумент.ОрганизацииПодразделения КАК аДокументооборотКорпоративныйДокументОрганизацииПодразделения
	|		ПО аДокументооборотКорпоративныйДокумент.Ссылка                               = аДокументооборотКорпоративныйДокументОрганизацииПодразделения.Ссылка
	|			И (аДокументооборотКорпоративныйДокументОрганизацииПодразделения.НомерСтроки = 1)
	|ГДЕ
	|	аДокументооборотКорпоративныйДокумент.Ссылка                                   = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	аДокументооборотКорпоративныйДокументпкру_РаспределениеЗатрат.Сумма КАК Сумма,
	|	аДокументооборотКорпоративныйДокументпкру_РаспределениеЗатрат.пкру_CostCentr.Наименование КАК пкру_CostCentr,
	|	аДокументооборотКорпоративныйДокументпкру_РаспределениеЗатрат.пкру_СтатьяРасходов.Наименование КАК пкру_СтатьяРасходов,
	|	аДокументооборотКорпоративныйДокументпкру_РаспределениеЗатрат.ТипЗатрат КАК ТипЗатрат
	|ИЗ
	|	Документ.аДокументооборотКорпоративныйДокумент.пкру_РаспределениеЗатрат КАК аДокументооборотКорпоративныйДокументпкру_РаспределениеЗатрат
	|ГДЕ
	|	аДокументооборотКорпоративныйДокументпкру_РаспределениеЗатрат.Ссылка           = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",                                                                                                                Ссылка );
	МассивРезультатов                                                                = Запрос.ВыполнитьПакет();
	Выборка1                                                                         = МассивРезультатов[0].Выбрать();
	Пока Выборка1.Следующий() Цикл
		СтруктураОтвета.Вставить("Номер",   Выборка1.Номер);
		СтруктураОтвета.Вставить("Сумма",   Выборка1.СуммаДокумента);
		СтруктураОтвета.Вставить("НомерДокумента",    Выборка1.НаименованиеДокумента);
		СтруктураОтвета.Вставить("Дата",              Выборка1.ДатаОкончанияДействияДокумента);
		СтруктураОтвета.Вставить("Подразделение",     Выборка1.ПодразделениеКод);
		СтруктураОтвета.Вставить("Контрагент",        Выборка1.КонтрагентИНН);
		СтруктураОтвета.Вставить("ДоговорКонтрагента",Выборка1.ДоговорКонтрагентаНаименование);
		СтруктураОтвета.Вставить("ТипДокумента",      Выборка1.ТипДокументаНаименование);
	КонецЦикла;
	МассивСтрок                                                                      = Новый Массив;
	Выборка2                                                                         = МассивРезультатов[1].Выбрать();
	Пока Выборка2.Следующий() Цикл
		СтруктураСтроки                                                              = Новый Структура;
		СтруктураСтроки.Вставить("Сумма",Выборка2.Сумма);
		СтруктураСтроки.Вставить("CostCentr",Выборка2.пкру_CostCentr);
		СтруктураСтроки.Вставить("СтатьяРасходов",Выборка2.пкру_СтатьяРасходов);
		СтруктураСтроки.Вставить("ТипЗатрат", Строка(Выборка2.ТипЗатрат));
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	СтруктураОтвета.Вставить("Таблица",МассивСтрок);
	СтрокаJSON                                                                       = СтруктуруВСтрокуJSON(СтруктураОтвета);
	Определение                                                                      = Новый WSОпределения("http://ruspbpacc01/UMFO/ws/ws1.1cws?wsdl","WS","WS159753");
	Прокси                                                                           = Новый WSПрокси(Определение,"http://ruspbpacc01/DocumentWorkflow","pcru_ex_Exchange","pcru_ex_ExchangeSoap" );
	Прокси.Пользователь                                                              = "WS";      
	Прокси.Пароль                                                                    = "WS159753";
	Результат                                                                        = Прокси.CreateBill(СтрокаJSON);
	Сообщить(Результат);

КонецФункции // ОтправитьСчетВУМФО()
