
Функция ЕстьСтартованныеБП(СсылкаНаОбъект) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотСсылкиПроцессов.БизнесПроцесс
	|ИЗ
	|	РегистрСведений.аДокументооборотСсылкиПроцессов КАК аДокументооборотСсылкиПроцессов
	|ГДЕ
	|	аДокументооборотСсылкиПроцессов.БизнесПроцесс.Стартован
	|	И НЕ аДокументооборотСсылкиПроцессов.БизнесПроцесс.Завершен
	|	И аДокументооборотСсылкиПроцессов.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект",СсылкаНаОбъект );
	Возврат не  Запрос.Выполнить().Пустой();
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПрерватьСогласование(Документ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотСсылкиПроцессов.БизнесПроцесс
	|ИЗ
	|	РегистрСведений.аДокументооборотСсылкиПроцессов КАК аДокументооборотСсылкиПроцессов
	|ГДЕ
	|	аДокументооборотСсылкиПроцессов.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗавершитьБизнесПроцесс(Выборка.БизнесПроцесс);
	КонецЦикла;
КонецПроцедуры // ПрерватьСогласование()

Функция ЗавершитьБизнесПроцесс(БизнесПроцесс) Экспорт
	ЗадачаБП=аДОКорпоративныеПроцессы.ПолучитьЗадачуВыполненияБП(БизнесПроцесс);
	
	ТекДата=ТекущаяДата();
	
	Если ЗначениеЗаполнено(ЗадачаБП) Тогда
		ЗадачаОбъект=ЗадачаБП.ПолучитьОбъект();
		ЗадачаОбъект.ДатаВыполненияФакт=ТекДата;
		Попытка
			ЗадачаОбъект.ВыполнитьЗадачу();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотЗадача.Ссылка
	|ИЗ
	|	Задача.аДокументооборотЗадача КАК аДокументооборотЗадача
	|ГДЕ
	|	аДокументооборотЗадача.БизнесПроцесс = &БизнесПроцесс";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.ДатаВыполненияФакт=ТекДата;
		Попытка
			ЗадачаОбъект.ВыполнитьЗадачу();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Если НЕ БизнесПроцесс.Завершен Тогда
		БизнесПроцессОбъект=БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Завершен=Истина;
		БизнесПроцессОбъект.ДатаЗавершения=ТекДата;
		Попытка
			БизнесПроцессОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СоздатьЗадачиПоПоручению(СсылкаНаПроцесс,СтруктураРеквизитовПроцесса,СтруктураПараметровПроцесса,СписокОбъектов,ЗавершитьПроцесс)Экспорт
	
	
	БПОбъект = СсылкаНаПроцесс.СетьМаршрутныхТочек[5].ТочкаВход.ПолучитьОбъект();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	pcru_ПорученияГлавамОтделов.Документ,
	|	pcru_ПорученияГлавамОтделов.НомерСтрокиДокумента,
	|	pcru_ПорученияГлавамОтделов.Отдел,
	|	pcru_ПорученияГлавамОтделов.Результат,
	|	pcru_ПорученияГлавамОтделов.Исполнитель,
	|	pcru_ПорученияГлавамОтделов.СрокВыполнения,
	|	pcru_ПорученияГлавамОтделов.Принято,
	|	pcru_ПорученияГлавамОтделов.Задача,
	|	pcru_ПорученияГлавамОтделов.КлючСвязи,
	|	pcru_ПорученияГлавамОтделов.Отдел.Руководитель как исполнитель
	|ИЗ
	|	РегистрСведений.pcru_ПорученияГлавамОтделов КАК pcru_ПорученияГлавамОтделов
	|ГДЕ
	|	pcru_ПорученияГлавамОтделов.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ",СписокОбъектов[0].Значение );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	БПОбъект.ИсполнителиТочки.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяЗадача = БПОбъект.ИсполнителиТочки.Добавить();
		НоваяЗадача.ТочкаАдресации = Выборка.исполнитель;
		НоваяЗадача.ИднИсполнителя=аДООбщееСервер.СформироватьИднИсполнителя(НоваяЗадача.ТочкаАдресации);
		
		НоваяЗадача.ИндивидуальныйТекстЗадания = Выборка.Задача;
		Если ЗначениеЗаполнено(Выборка.СрокВыполнения) Тогда
			НоваяЗадача.СрокВыполненияДатаВремя = Выборка.СрокВыполнения;
		Иначе
			НоваяЗадача.СрокВыполненияЧасов = 8;
			НоваяЗадача.НеИспользоватьГрафикРаботы = Истина;
		КонецЕсли; 
		//1 - параллельное, 0 - последовательное	 
		НоваяЗадача.ВидНаправленияПараллельное = 1;
		НоваяЗадача.ЭтоЗадачаРуководителю = Ложь;
	КонецЦикла;
	
	БПОбъект.Записать();
	//	аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.Ссылка,
	// аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.НомерСтроки,
	//	аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.ТочкаАдресации,
	//	аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.ОтчетИсполнителя,
	//|	аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.СрокВыполненияТекст,
	//|	аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.ИндивидуальныйТекстЗадания,
	//|	аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.ИндивидуальноеНаименованиеЗадания,
	//|	аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.СрокВыполненияЧасов,
	//|	аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.ВидНаправленияПараллельное,
	//|	аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.НеИспользоватьГрафикРаботы,
	//|	аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.ИднИсполнителя,
	//|	аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.СрокВыполненияДатаВремя,
	//|	аДокументооборотКорпоративныйБизнесПроцессОсновныеИсполнители.ЭтоЗадачаРуководителю
	
	
КонецПроцедуры // СоздатьЗадачиПоПоручению()

// <Описание процедуры>
//Если контрагент = Комус, статья расходов =1312,1311,1361,1321,1315,1331,1316,1332,1333,1362,1364,1394 то добавить Иванов Сергей (офис Координатор)
Функция ПроверкаСогласованияКоменданта(СсылкаНаПроцесс,СтруктураРеквизитовПроцесса,СтруктураПараметровПроцесса,СписокОбъектов,ЗавершитьПроцесс)Экспорт
	Рез = Ложь;
	
	Если СписокОбъектов[0].Значение.ОсновнойКонтрагент.Наименование = "Комус-Петербург ООО" Тогда
		Рез =  Истина;
	КонецЕсли; 	
	
	Для каждого СтрокаРаспределения Из СписокОбъектов[0].Значение.пкру_РаспределениеЗатрат Цикл
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1312"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1311"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1361"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1321"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1315"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1331"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1332"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1316"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1333"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1362"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1364"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1394"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		
	КонецЦикла; 
	
	
	Возврат Рез;
	
КонецФункции // СоздатьЗадачиПоПоручению()

//Если статья расходов= 1132,1128, 1117,1135,1142,1121,1172,1133 то добавить Гайббадуллин Виктор

Функция ПроверкаСогласованияHDHRD(СсылкаНаПроцесс,СтруктураРеквизитовПроцесса,СтруктураПараметровПроцесса,СписокОбъектов,ЗавершитьПроцесс)Экспорт
	Рез = Ложь;
	
	Для каждого СтрокаРаспределения Из СписокОбъектов[0].Значение.пкру_РаспределениеЗатрат Цикл
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1132"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1128"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1117"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1135"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1142"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1121"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1172"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
		Если СтрокаРаспределения.пкру_СтатьяРасходов.Код = "1133"  Тогда
			Рез = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Рез;
КонецФункции // СоздатьЗадачиПоПоручению()

Функция ВыборОтдела(СсылкаНаПроцесс,СтруктураРеквизитовПроцесса,СтруктураПараметровПроцесса,СписокОбъектов,ЗавершитьПроцесс)Экспорт
	
	Если СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение.Код = "SD" Тогда
		Возврат 4;
	КонецЕсли;  
	
	Если СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение.Код = "MD" Тогда
		Возврат 7;
	КонецЕсли;  
	
	Если СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение.Код = "OD" Тогда //
		Возврат 5;
	КонецЕсли;  
	
	Если СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение.Код = "RD" Тогда  //
		Возврат 1;
	КонецЕсли;  
	
	Если СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение.Код = "LSD" Тогда //
		Возврат 2;                                                                               
	КонецЕсли;  
	
	Если СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение.Код = "ITD" Тогда  //
		Возврат 3;
	КонецЕсли;  
	
	Если СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение.Код = "CD" Тогда  //
		Возврат 6;
	КонецЕсли;  
	
	Если СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение.Код = "BAD" Тогда
		Возврат 8;
	КонецЕсли;  
	
	Если СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение.Код = "FD" Тогда
		Возврат 9;
	КонецЕсли;  
	//
	Если СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение.Код = "HRD" Тогда
		Возврат 10;
	КонецЕсли;  
	
	
	Возврат 0;
	
КонецФункции


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьЗначениеДопРеквизита(Документ,ИмяРеквизита) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотКорпоративныйДокументДополнительныеРеквизиты.ЗначениеРеквизита КАК ЗначениеРеквизита
	|ИЗ
	|	Документ.аДокументооборотКорпоративныйДокумент.ДополнительныеРеквизиты КАК аДокументооборотКорпоративныйДокументДополнительныеРеквизиты
	|ГДЕ
	|	аДокументооборотКорпоративныйДокументДополнительныеРеквизиты.Ссылка = &Ссылка
	|	И аДокументооборотКорпоративныйДокументДополнительныеРеквизиты.ДополнительныйРеквизит.ИмяРеквизитаДляФункций = &ИмяРеквизитаДляФункций";
	
	Запрос.УстановитьПараметр("Ссылка",Документ );
	Запрос.УстановитьПараметр("ИмяРеквизитаДляФункций",ИмяРеквизита );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.ЗначениеРеквизита;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЗначениеДопРеквизита()

Функция ВыполнениеПоручанияГлавОтделов(СсылкаНаПроцесс,СсылкаНаЗадачу,ИсполнительЗадачи,СтруктураРеквизитовПроцесса,СтруктураПараметровПроцесса,СписокОбъектов,СтруктураОтчетаИсполнителя,СтруктураПараметровЗадачи)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	pcru_ПорученияГлавамОтделов.Документ,
	|	pcru_ПорученияГлавамОтделов.НомерСтрокиДокумента,
	|	pcru_ПорученияГлавамОтделов.Отдел,
	|	pcru_ПорученияГлавамОтделов.Результат,
	|	pcru_ПорученияГлавамОтделов.Исполнитель,
	|	pcru_ПорученияГлавамОтделов.СрокВыполнения,
	|	pcru_ПорученияГлавамОтделов.Принято,
	|	pcru_ПорученияГлавамОтделов.Задача,
	|	pcru_ПорученияГлавамОтделов.КлючСвязи,
	|	pcru_ПорученияГлавамОтделов.Отдел.Руководитель как исполнитель
	|ИЗ
	|	РегистрСведений.pcru_ПорученияГлавамОтделов КАК pcru_ПорученияГлавамОтделов
	|ГДЕ
	|	pcru_ПорученияГлавамОтделов.Документ = &Документ и pcru_ПорученияГлавамОтделов.Задача = &Задача";
	
	Запрос.УстановитьПараметр("Документ",СписокОбъектов[0].Значение );
	Запрос.УстановитьПараметр("Задача",СсылкаНаЗадачу.ХранилищеТекстаЗадания.Получить().ПолучитьТекст() );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		
		МЗ = РегистрыСведений.pcru_ПорученияГлавамОтделов.СоздатьМенеджерЗаписи();
		МЗ.Документ = СписокОбъектов[0].Значение;
		МЗ.НомерСтрокиДокумента =  Выборка.НомерСтрокиДокумента;
		МЗ.Прочитать();
		//
		МЗ.Документ = СписокОбъектов[0].Значение;
		МЗ.НомерСтрокиДокумента =  Выборка.НомерСтрокиДокумента;
		
		МЗ.Отдел = Выборка.Отдел;
		МЗ.Результат = СтруктураОтчетаИсполнителя.ТекстовоеСообщение;
		МЗ.Исполнитель = ИсполнительЗадачи;
		МЗ.СрокВыполнения = Выборка.СрокВыполнения;
		МЗ.Принято = Выборка.Принято;
		МЗ.Задача = Выборка.Задача;
		МЗ.КлючСвязи = Выборка.КлючСвязи;
		
		МЗ.Записать(Истина);
		
	КонецЦикла;
	
	
КонецФункции
//pcru_БизнесПроцессы.ВыполнениеПоручанияГлавОтделов(СсылкаНаПроцесс,СсылкаНаЗадачу,ИсполнительЗадачи,СтруктураРеквизитовПроцесса,СтруктураПараметровПроцесса,СписокОбъектов,СтруктураОтчетаИсполнителя,СтруктураПараметровЗадачи);

Функция ПолучитьЦиклСогласования(СписокОбъектов) Экспорт
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Isnull(МАКСИМУМ(pcru_СогласованиеДокументов.ЦиклСогласования),0) КАК ЦиклСогласования
		|ИЗ
		|	РегистрСведений.pcru_СогласованиеДокументов КАК pcru_СогласованиеДокументов
		|ГДЕ
		|	pcru_СогласованиеДокументов.Документ = &Документ";
		
		Запрос.УстановитьПараметр("Документ",СписокОбъектов[0].Значение );
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Возврат Выборка.ЦиклСогласования + 1;
			
		КонецЦикла;
		
		Возврат 1;
		
	Исключение
		Возврат 1;
	КонецПопытки; 
	
КонецФункции // ПолучитьЗначениеДопРеквизита()

Процедура Бит_ПечатьЛистаСогласования(Ссылка,ТабДокумент = Неопределено ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	pcru_СогласованиеДокументов.Документ.Автор КАК Инициатор,
	|	pcru_СогласованиеДокументов.Документ.ДатаОкончанияДействияДокумента КАК КонтрольныйСрок,
	|	pcru_СогласованиеДокументов.Документ.НаименованиеДокумента КАК Пояснение,
	|	pcru_СогласованиеДокументов.БизнесПроцесс.Завершен КАК БизнесПроцессЗавершен,
	|	ИСТИНА КАК БизнесПроцессСогласовано,
	|	pcru_СогласованиеДокументов.ЦиклСогласования КАК ЦиклСогласования,
	|	pcru_СогласованиеДокументов.Исполнитель КАК Рецензент,
	|	ПодразделенияСотрудники.Ссылка КАК Подразделение,
	|	pcru_СогласованиеДокументов.ТекстовыйРезультат КАК ОтчетОВыполнении,
	|	pcru_СогласованиеДокументов.Документ.Комментарий КАК ПримечаниеИнициатора,
	|	pcru_СогласованиеДокументов.Согласовано КАК Результат1,
	|	pcru_СогласованиеДокументов.Задача.ДатаВыполненияФакт КАК ДатаВыполнения,
	|	ПодразделенияСотрудники.Ссылка.Код КАК Код,
	|	pcru_СогласованиеДокументов.Документ.ОсновнойКонтрагент КАК Контрагент,
	|	аДокументооборотКорпоративныйДокументКонтрагентыДоговоры.ДоговорКонтрагента.СрокДействия КАК Срокдействиядоговора,
	|	pcru_СогласованиеДокументов.Документ.СуммаДокумента КАК СуммаДоговора,
	|	ВЫБОР
	|		КОГДА pcru_СогласованиеДокументов.Согласовано
	|			ТОГДА ""Согласовано""
	|		ИНАЧЕ ""Не согласовано""
	|	КОНЕЦ КАК Результат
	|ИЗ
	|	РегистрСведений.pcru_СогласованиеДокументов КАК pcru_СогласованиеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.аДокументооборотСостояниеДокументов КАК аДокументооборотСостояниеДокументов
	|		ПО pcru_СогласованиеДокументов.Документ = аДокументооборотСостояниеДокументов.КорпоративныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подразделения.Сотрудники КАК ПодразделенияСотрудники
	|		ПО (ПодразделенияСотрудники.Пользователь = pcru_СогласованиеДокументов.Исполнитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.аДокументооборотКорпоративныйДокумент.КонтрагентыДоговоры КАК аДокументооборотКорпоративныйДокументКонтрагентыДоговоры
	|		ПО pcru_СогласованиеДокументов.Документ = аДокументооборотКорпоративныйДокументКонтрагентыДоговоры.Ссылка
	|			И pcru_СогласованиеДокументов.Документ.ОсновнойКонтрагент = аДокументооборотКорпоративныйДокументКонтрагентыДоговоры.Контрагент
	|ГДЕ
	|	pcru_СогласованиеДокументов.Документ = &Документ
	|	И pcru_СогласованиеДокументов.ЦиклСогласования В
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(pcru_СогласованиеДокументов.ЦиклСогласования) КАК ЦиклСогласования
	|			ИЗ
	|				РегистрСведений.pcru_СогласованиеДокументов КАК pcru_СогласованиеДокументов
	|			ГДЕ
	|				pcru_СогласованиеДокументов.Документ = &Документ)";
	Запрос.УстановитьПараметр("Документ", Ссылка);
	
	ОбходПоРецензентам = Запрос.Выполнить().Выбрать();
	
	ПерваяСтрока = Истина;
	
	//Макет = Документы.аДокументооборотКорпоративныйДокумент.ПолучитьМакет("ЛистСогласования");
	Макет = ПолучитьОбщийМакет("ЛистСогласования");
	ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
	ОбластьПодвалВерх=Макет.ПолучитьОбласть("ПодвалВерх");
	ОбластьПодвалСогласовано=Макет.ПолучитьОбласть("ПодвалСогласовано");
	ОбластьПодвалНиз=Макет.ПолучитьОбласть("ПодвалНиз");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	СОгласован = Истина;
	Пока ОбходПоРецензентам.Следующий() Цикл
		Если ПерваяСтрока Тогда
			ОбластьШапка.Параметры.Контрагент = ОбходПоРецензентам.Контрагент.Наименование;
			ОбластьШапка.Параметры.СуммаДоговора = ОбходПоРецензентам.СуммаДоговора;
			ОбластьШапка.Параметры.Срокдействиядоговора = ОбходПоРецензентам.Срокдействиядоговора;
			ОбластьШапка.Параметры.Иницатор=СокрЛП(ОбходПоРецензентам.Инициатор);
			ОбластьШапка.Параметры.КонтрольныйСрок=Формат(ОбходПоРецензентам.КонтрольныйСрок, "ДФ='dd.MM.yyyy HH:mm'");
			//ОбластьШапка.Параметры.Пояснение=СокрЛП(РезультатСогласование.Пояснение);
			ОбластьШапка.Параметры.НаименованиеДокумента=СокрЛП(Ссылка);
			ОбластьШапка.Параметры.Бит_ПояснительнаяЗаписка=СокрЛП(ОбходПоРецензентам.ПримечаниеИнициатора);
			
			//ОбластьШапка.Параметры.Бит_ГруппаДоговоров=СокрЛП(Бит_ГруппаСогласования);
			
			ТабДокумент.Вывести(ОбластьШапка);
			
			ПерваяСтрока = ложь;
		КонецЕсли;	
		
		Если не ОбходПоРецензентам.Результат1 Тогда
			СОгласован = Ложь;
		КонецЕсли; 
		
		ОбластьСтрока.Параметры.НомерЦикла=ОбходПоРецензентам.ЦиклСогласования ;	
		ОбластьСтрока.Параметры.Подразделение=ОбходПоРецензентам.Подразделение;
		ОбластьСтрока.Параметры.Рецензент=ОбходПоРецензентам.Рецензент;		
		ОбластьСтрока.Параметры.Рецензия=ОбходПоРецензентам.ОтчетОВыполнении;	
		ОбластьСтрока.Параметры.Результат=ОбходПоРецензентам.Результат;
		ОбластьСтрока.Параметры.ДатаВыполнения=ОбходПоРецензентам.ДатаВыполнения;
		ОбластьСтрока.Параметры.ПримечаниеИнициатора=ОбходПоРецензентам.ПримечаниеИнициатора;
		ТабДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла; 
	
	ТабДокумент.Вывести(ОбластьПодвалВерх);
	
	Если СОгласован Тогда
		ОбластьПодвалСогласовано.Параметры.ТекстСогласования="СОГЛАСОВАНО";
	Иначе	
		ОбластьПодвалСогласовано.Параметры.ТекстСогласования="НЕ СОГЛАСОВАНО";
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьПодвалСогласовано);
	
	ОбластьПодвалНиз.Параметры.ДатаФормирования=СокрЛП(ТекущаяДата());
	ТабДокумент.Вывести(ОбластьПодвалНиз);
	
	ТабДокумент.ОтображатьГруппировки=Ложь;
	ТабДокумент.ОтображатьЗаголовки=Ложь;
	ТабДокумент.ОтображатьСетку=Ложь;
	
	
	
	
КонецПроцедуры

Процедура pcru_ПечатьЛистаСогласования(Ссылка,ТабДокумент = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотСостояниеДокументов.СостояниеДокумента
	|ИЗ
	|	РегистрСведений.аДокументооборотСостояниеДокументов КАК аДокументооборотСостояниеДокументов
	|ГДЕ
	|	аДокументооборотСостояниеДокументов.КорпоративныйДокумент = &КорпоративныйДокумент";
	Запрос.УстановитьПараметр("КорпоративныйДокумент",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СостояниеДокумента <> Справочники.аДокументооборотСостояниеДокументов.Согласован Тогда
			Сообщить("Документ не Согласован!");
			Возврат;
		КонецЕсли; 	
		
	КонецЦикла;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	pcru_СогласованиеДокументов.Документ.Автор КАК Инициатор,
	              |	pcru_СогласованиеДокументов.Документ.ДатаОкончанияДействияДокумента КАК КонтрольныйСрок,
	              |	pcru_СогласованиеДокументов.Документ.НаименованиеДокумента КАК Пояснение,
	              |	pcru_СогласованиеДокументов.БизнесПроцесс.Завершен КАК БизнесПроцессЗавершен,
	              |	ИСТИНА КАК БизнесПроцессСогласовано,
	              |	pcru_СогласованиеДокументов.ЦиклСогласования КАК ЦиклСогласования,
	              |	pcru_СогласованиеДокументов.Исполнитель КАК Рецензент,
	              |	ПодразделенияСотрудники.Ссылка КАК Подразделение,
	              |	ПодразделенияСотрудники.Ссылка.Код КАК ПодразделениеКод,
	              |	pcru_СогласованиеДокументов.ТекстовыйРезультат КАК ОтчетОВыполнении,
	              |	pcru_СогласованиеДокументов.Документ.Комментарий КАК ПримечаниеИнициатора,
	              |	pcru_СогласованиеДокументов.Документ.Комментарий КАК Комментарий,
	              |	pcru_СогласованиеДокументов.Согласовано КАК Результат1,
	              |	pcru_СогласованиеДокументов.Задача.ДатаВыполненияФакт КАК ДатаВыполнения,
	              |	ПодразделенияСотрудники.Ссылка.Код КАК Код,
	              |	pcru_СогласованиеДокументов.Документ.ОсновнойКонтрагент КАК Контрагент,
	              |	аДокументооборотКорпоративныйДокументКонтрагентыДоговоры.ДоговорКонтрагента.СрокДействия КАК Срокдействиядоговора,
	              |	pcru_СогласованиеДокументов.Документ.СуммаДокумента КАК СуммаДоговора,
	              |	ВЫБОР
	              |		КОГДА pcru_СогласованиеДокументов.Согласовано
	              |			ТОГДА ""Согласовано""
	              |		ИНАЧЕ ""Не согласовано""
	              |	КОНЕЦ КАК Результат,
	              |	pcru_СогласованиеДокументов.Документ КАК Документ,
	              |	pcru_СогласованиеДокументов.Исполнитель.аФизическоеЛицо.аДолжность КАК РецензентДолжность
	              |ИЗ
	              |	РегистрСведений.pcru_СогласованиеДокументов КАК pcru_СогласованиеДокументов
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.аДокументооборотСостояниеДокументов КАК аДокументооборотСостояниеДокументов
	              |		ПО pcru_СогласованиеДокументов.Документ = аДокументооборотСостояниеДокументов.КорпоративныйДокумент
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подразделения.Сотрудники КАК ПодразделенияСотрудники
	              |		ПО (ПодразделенияСотрудники.Пользователь = pcru_СогласованиеДокументов.Исполнитель)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.аДокументооборотКорпоративныйДокумент.КонтрагентыДоговоры КАК аДокументооборотКорпоративныйДокументКонтрагентыДоговоры
	              |		ПО pcru_СогласованиеДокументов.Документ = аДокументооборотКорпоративныйДокументКонтрагентыДоговоры.Ссылка
	              |			И pcru_СогласованиеДокументов.Документ.ОсновнойКонтрагент = аДокументооборотКорпоративныйДокументКонтрагентыДоговоры.Контрагент
	              |ГДЕ
	              |	pcru_СогласованиеДокументов.Документ = &Документ"; 
	
	//"ВЫБРАТЬ
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.Инициатор КАК Инициатор,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.КонтрольныйСрок КАК КонтрольныйСрок,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.Пояснение КАК Пояснение,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.Завершен КАК БизнесПроцессЗавершен,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.Согласовано КАК БизнесПроцессСогласовано,
	//|	аДокументооборотСогласованиеГруппойСогласование.ЦиклСогласования КАК ЦиклСогласования,
	//|	аДокументооборотСогласованиеГруппойСогласование.Рецензент КАК Рецензент,
	//|	аДокументооборотСогласованиеГруппойСогласование.Рецензент.Подразделение КАК Подразделение,
	//|	аДокументооборотСогласованиеГруппойСогласование.Рецензент.Подразделение.Код КАК ПодразделениеКод,
	//|	аДокументооборотСогласованиеГруппойСогласование.СсылкаНаРецензию.ОтчетОВыполнении КАК ОтчетОВыполнении,
	//|	аДокументооборотСогласованиеГруппойСогласование.Примечание КАК ПримечаниеИнициатора,
	//|	ВЫБОР
	//|		КОГДА аДокументооборотСогласованиеГруппойСогласование.СсылкаНаРецензию ЕСТЬ NULL
	//|			ТОГДА ""На согласовании""
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА аДокументооборотСогласованиеГруппойСогласование.СсылкаНаРецензию.Завершен = ИСТИНА
	//|					ТОГДА ВЫБОР
	//|							КОГДА аДокументооборотСогласованиеГруппойСогласование.СсылкаНаРецензию.ВыходнойПараметр = ИСТИНА
	//|								ТОГДА ""Согласовано""
	//|							ИНАЧЕ ""Не согласовано""
	//|						КОНЕЦ
	//|				ИНАЧЕ ""На согласовании""
	//|			КОНЕЦ
	//|	КОНЕЦ КАК Результат,
	//|	ВЫБОР
	//|		КОГДА аДокументооборотЗадача.ДатаВыполнения ЕСТЬ NULL
	//|			ТОГДА ""-""
	//|		ИНАЧЕ аДокументооборотЗадача.ДатаВыполнения
	//|	КОНЕЦ КАК ДатаВыполнения,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.ДокументНаСогласование.Контрагент.Наименование КАК Контрагент,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.ДокументНаСогласование.СрокДействияДокумента КАК Срокдействиядоговора,
	//|	аДокументооборотЗадача.ДокументОснование.СуммаДокумента КАК СуммаДоговора,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.ДокументНаСогласование.пкру_ЭтоТендер КАК пкру_ЭтоТендер,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.ДокументНаСогласование.пкру_ОписаниеТендера КАК ОписаниеТендера,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.ДокументНаСогласование.Комментарий КАК Комментарий,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.ДокументНаСогласование.Номер КАК ДокументНаСогласованиеСсылка,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.ДокументНаСогласование.Бит_ГруппаСогласования КАК Бит_ГруппаСогласования,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.ДокументНаСогласование.pcru_ВРамкахБюджета КАК ВРамкахБюджета,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.ДокументНаСогласование.pcru_ПричинаПодписания КАК ПричинаПодписания,
	//|	аДокументооборотСогласованиеГруппойСогласование.Рецензент.Должность КАК РецензентДолжность
	//|ИЗ
	//|	БизнесПроцесс.аДокументооборотСогласованиеГруппой.Согласование КАК аДокументооборотСогласованиеГруппойСогласование
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.аДокументооборотЗадача КАК аДокументооборотЗадача
	//|		ПО аДокументооборотСогласованиеГруппойСогласование.СсылкаНаРецензию = аДокументооборотЗадача.БизнесПроцесс
	//|			И (аДокументооборотЗадача.Выполнена)
	//|			И (аДокументооборотЗадача.ПометкаУдаления = ЛОЖЬ)
	//|			И аДокументооборотСогласованиеГруппойСогласование.Рецензент = аДокументооборотЗадача.Исполнитель
	//|ГДЕ
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.ДокументНаСогласование = &парамСсылкаНаДокумент
	//|	И аДокументооборотСогласованиеГруппойСогласование.Ссылка.Стартован = ИСТИНА
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.Дата УБЫВ,
	//|	аДокументооборотСогласованиеГруппойСогласование.Ссылка.Номер УБЫВ,
	//|	ЦиклСогласования УБЫВ";
	Запрос.УстановитьПараметр("Документ",Ссылка);
	//Запрос.УстановитьПараметр("парамТочкаМаршрута", БизнесПроцессы.аДокументооборотПоручение.ТочкиМаршрута.ВыполнитьПоручение);
	ОбходПоРецензентам = Запрос.Выполнить().Выбрать();
	
	Отмечено = "☒";
	НеОтмечено = "☐";
		
	Если ОбходПоРецензентам.Количество() > 0 Тогда
		//Макет=  Документы.аДокументооборотКорпоративныйДокумент.ПолучитьМакет("ЛистСогласования1");
		Макет = ПолучитьОбщийМакет("ЛистСогласованияRusEng");
		ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
		ОбластьПодвалНиз=Макет.ПолучитьОбласть("ПодвалНиз");
		ТабДокумент = Новый ТабличныйДокумент;
		
		ОбластьШапка.Параметры.Фин=НеОтмечено;
		ОбластьШапка.Параметры.Ген=НеОтмечено;
		ОбластьШапка.Параметры.Юр=НеОтмечено;
		
		Пока  ОбходПоРецензентам.Следующий() Цикл			
			//Верх
			ОбластьШапка.Параметры.НаименованиеДокумента=СокрЛП(ОбходПоРецензентам.Пояснение);
			ОбластьШапка.Параметры.Контрагент = ОбходПоРецензентам.Контрагент;
			ОбластьШапка.Параметры.Бит_ГруппаДоговоров=СокрЛП(pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(Ссылка,"ПредметДоговора"));
			ОбластьШапка.Параметры.КонтрольныйСрок = Формат(pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(Ссылка,"ДатаДоговора"), "ДФ='dd.MM.yyyy HH:mm'");
			ОбластьШапка.Параметры.Срокдействиядоговора = ОбходПоРецензентам.Срокдействиядоговора;
			ОбластьШапка.Параметры.Иницатор=СокрЛП(ОбходПоРецензентам.Инициатор);
			//Детали договора / Contract details													   
			ОбластьШапка.Параметры.Причина=pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(Ссылка,"ПричинаПодписания");
			//
			ОбластьШапка.Параметры.Тендер=pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(Ссылка,"СвязанныеСтороны");//ОбходПоРецензентам.ОписаниеТендера;
			
			СвязанныеСтороны = pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(Ссылка,"СвязанныеСтороны");
			Если не ЗначениеЗаполнено(СвязанныеСтороны)  Тогда
				СвязанныеСтороны = Ложь;
			КонецЕсли; 
			
			Если СвязанныеСтороны Тогда
				ОбластьШапка.Параметры.СвязанныеСтороны="☒ YES                              ☐ NO";
			Иначе
				ОбластьШапка.Параметры.СвязанныеСтороны="☐ YES                              ☒ NO";
			КонецЕсли; 
			//
			ОбластьШапка.Параметры.Приложения="";
			ЕстьЮР = Ложь;
			ЕстьТД = Ложь;
			Запрос = Новый Запрос;
			
			
			Запрос.Текст = "ВЫБРАТЬ
			|	аДокументооборотКорпоративныйДокументПроизвольнаяТаблица.КолонкаСсылка1 как ПриложениеСсылка
			|ИЗ
			|	Документ.аДокументооборотКорпоративныйДокумент.ПроизвольнаяТаблица КАК аДокументооборотКорпоративныйДокументПроизвольнаяТаблица
			|ГДЕ
			|	аДокументооборотКорпоративныйДокументПроизвольнаяТаблица.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка",Ссылка );
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбластьШапка.Параметры.Приложения = ОбластьШапка.Параметры.Приложения + Выборка.ПриложениеСсылка +" ";
				ЕстьЮР = Ложь;
				ЕстьТД = Ложь;
			КонецЦикла;
			//
			Если ЕстьЮР = Истина Тогда
				ОбластьПодвалНиз.Параметры.ПрилЮЗ=Отмечено;
			Иначе
				ОбластьПодвалНиз.Параметры.ПрилЮЗ=НеОтмечено;
			КонецЕсли;
			//
			Если  ЕстьТД = Истина Тогда
				ОбластьПодвалНиз.Параметры.ПрилТендер=Отмечено;
			Иначе
				ОбластьПодвалНиз.Параметры.ПрилТендер=НеОтмечено;
			КонецЕсли;
			//
			Если ЕстьЮР = Ложь и ЕстьТД = Ложь Тогда
				ОбластьПодвалНиз.Параметры.ПрилДР=Отмечено;
			Иначе
				ОбластьПодвалНиз.Параметры.ПрилДР=НеОтмечено;
			КонецЕсли; 
			//
			ОбластьШапка.Параметры.ДругиеДоговоры="";
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	аДокументооборотКорпоративныйДокумент.Ссылка
			|ИЗ
			|	Документ.аДокументооборотКорпоративныйДокумент КАК аДокументооборотКорпоративныйДокумент
			|ГДЕ
			|	аДокументооборотКорпоративныйДокумент.ОсновнойКонтрагент = &ОсновнойКонтрагент
			|	И аДокументооборотКорпоративныйДокумент.ВидДокумента.Код = ""Вх""";
			Запрос.УстановитьПараметр("ОсновнойКонтрагент",Ссылка.ОсновнойКонтрагент);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбластьШапка.Параметры.ДругиеДоговоры=ОбластьШапка.Параметры.ДругиеДоговоры + Выборка.Номер +" ";
			КонецЦикла;
			//
			ОбластьШапка.Параметры.СуммаДоговора = ОбходПоРецензентам.СуммаДоговора;
			//
			
			ВРамкахБюджета = pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(Ссылка,"ВРамкахБюджета");
			Если не ЗначениеЗаполнено(ВРамкахБюджета)  Тогда
				ВРамкахБюджета = Ложь;
			КонецЕсли; 
			Если ВРамкахБюджета Тогда
				ОбластьШапка.Параметры.ВРамкахБюджета=Отмечено+" YES – department:    "+НеОтмечено+"   NO";
			Иначе
				ОбластьШапка.Параметры.ВРамкахБюджета=НеОтмечено+" YES – department:    "+Отмечено+"   NO";
			КонецЕсли; 
			//
			Если ОбходПоРецензентам.ПодразделениеКод = "FD" Тогда
				ОбластьШапка.Параметры.Фин=Отмечено;
			КонецЕсли; 
			//
			Если ОбходПоРецензентам.ПодразделениеКод = "CEO" Тогда
				ОбластьШапка.Параметры.Ген=Отмечено;
			КонецЕсли; 
			//
			Если ОбходПоРецензентам.ПодразделениеКод = "LSD" Тогда
				ОбластьШапка.Параметры.Юр=Отмечено;
			КонецЕсли; 
			//
			ОбластьШапка.Параметры.Бит_ПояснительнаяЗаписка=СокрЛП(ОбходПоРецензентам.Комментарий);
		КонецЦикла; 
		ТабДокумент.Вывести(ОбластьШапка);
		ОбходПоРецензентам.Сбросить();
		Пока  ОбходПоРецензентам.Следующий() Цикл
			//Если ОбходПоРецензентам.Рецензент = Справочники.Пользователи.НайтиПоНаименованию("Oleg Venediktov") Тогда
			//	ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
			//	ОбластьСтрока.Параметры.Подразделение="CEO";	
			//	ОбластьСтрока.Параметры.Рецензент="Nadezhda Yarova";		
			//	ОбластьСтрока.Параметры.Должность="Assistant of CEO"; 
			//	//ОбластьСтрока.Параметры.Рецензия=аДОДопПроцедуры.ОчиститьТекстОтHTML(РезультатСогласование.ОтчетОВыполнении);	
			//	Если ОбходПоРецензентам.Результат <> "Согласовано" Тогда
			//		Сообщить("Документ не Согласован!");
			//		Возврат;
			//	КонецЕсли; 
			//	ОбластьСтрока.Параметры.Результат="Согласовано"; 
			//	ОбластьСтрока.Параметры.ДатаВыполнения=ОбходПоРецензентам.ДатаВыполнения;
			//	ТабДокумент.Вывести(ОбластьСтрока);
			//КонецЕсли; 
			ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
			//ОбластьСтрока.Параметры.НомерЦикла=РезультатСогласование.ЦиклСогласования ;	ОбластьСтрока.Параметры.Подразделение=ОбходПоРецензентам.Подразделение;	
			ОбластьСтрока.Параметры.Рецензент=ОбходПоРецензентам.Рецензент;		
			ОбластьСтрока.Параметры.Должность=ОбходПоРецензентам.РецензентДолжность; 
			//ОбластьСтрока.Параметры.Рецензия=аДОДопПроцедуры.ОчиститьТекстОтHTML(РезультатСогласование.ОтчетОВыполнении);	
			Если ОбходПоРецензентам.Результат <> "Согласовано" Тогда
				
				Сообщить("Документ не Согласован!");
				Возврат;
				
			КонецЕсли; 
			ОбластьСтрока.Параметры.Результат=ОбходПоРецензентам.Результат; 
			ОбластьСтрока.Параметры.ДатаВыполнения=ОбходПоРецензентам.ДатаВыполнения;
			//ОбластьСтрока.Параметры.ПримечаниеИнициатора=ОбходПоРецензентам.ПримечаниеИнициатора;
			ТабДокумент.Вывести(ОбластьСтрока);
		КонецЦикла; 
		ТабДокумент.Вывести(ОбластьПодвалНиз);
		ТабДокумент.ОтображатьГруппировки=Ложь;
		ТабДокумент.ОтображатьЗаголовки=Ложь;
		ТабДокумент.ОтображатьСетку=Ложь;
		//		ТабДокумент.Показать("Согласование документа "+СокрЛП(Ссылка));	
	Иначе
		Сообщить("Документ не согласован");
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокаПодключенияЗуп() Экспорт
	Возврат "srvr='RUSPBPACC01'; ref='1c_zup'; usr='User'; pwd='1Cadmin';"; 
	// pcru_БизнесПроцессы.СтрокаПодключенияЗуп()
КонецФункции // ПолучитьЗначениеДопРеквизита()

Функция СтрокаПодключенияУМФО() Экспорт
	Возврат "srvr='RUSPBPACC01'; ref='bp_corp_test1'; usr='user'; pwd='1Cadmin';"; 
	// pcru_БизнесПроцессы.СтрокаПодключенияУМФО()
КонецФункции // ПолучитьЗначениеДопРеквизита()

Функция ПолучитьПользователейДокумента(Документ)Экспорт
	ТЗ = Документ.pcru_Исполнители;
	ТЗ.Очистить();
	Для каждого СтрСпП Из pcru_РаботаСДокументами.ПолучитьМассивПользователей(Документ) Цикл
		СтрТЗ = 	ТЗ.Добавить();
		СтрТЗ.Исполнитель = СтрСпП;
	КонецЦикла; 
	 
КонецФункции


//ссылка на объекты передается в аргументах
//СсылкаНаПроцесс
//ИсполнительЗадачи
//ЗадачаОбъект - созданная, но еще не записанная задача
//Возможно непосредственное изменение реквизитов задачи:
// ЗадачаОбъект.ДатаВыполненияПлан
// ЗадачаОбъект.ХранилищеТекстаЗадания и т.д.
//доступ к данным осуществляется в виде:
//СтруктураРеквизитовПроцесса.<ИмяРеквизита>
//СтруктураПараметровПроцесса.<ИмяПараметра>
//при необходимости можно изменить данные присвоив значения структуре
//СтруктураРеквизитовПроцесса.<ИмяРеквизита>=<ЗначениеРеквизита>
Функция СозданиеЗадачи(СсылкаНаПроцесс,ЗадачаОбъект,ИсполнительЗадачи,СтруктураРеквизитовПроцесса,СтруктураПараметровПроцесса,СписокОбъектов,СтруктураОтчетаИсполнителя,СтруктураПараметровЗадачи)Экспорт
	ВОзврат 0;
	//НЗ = РегистрыСведений.pcru_ПараметрыВыданныхЗадач.СоздатьНаборЗаписей();
	//НЗ.Отбор.Документ.Установить(СписокОбъектов[0].Значение, Истина);
	//НЗ.Отбор.БизнесПроцесс.Установить(СсылкаНаПроцесс, Истина);
	//НЗ.Отбор.Исполнитель.Установить(ИсполнительЗадачи, Истина);
	//НЗ.Прочитать();
	//Нашли_исполнителя = Ложь;
	//Для каждого Запись  Из НЗ Цикл
	//	Если Запись.Исполнитель = ИсполнительЗадачи Тогда
	//		Запись.Задача = ЗадачаОбъект.Ссылка;                                               
	//		Запись.Согласовано = "Не выполнена";
	//		Запись.СостояниеДокумента = Справочники.аДокументооборотСостояниеДокументов.НаСогласовании;
	//		Запись.ТекстовыйРезультат = "Не выполнена";
	//		Запись.ДатаВыполненияПлан = ЗадачаОбъект.ДатаВыполненияПлан;
	//		Запись.ТипЗадач = Перечисления.аГруппировкиЗадач.НаходятсяВРаботе;
	//		Нашли_исполнителя = Истина;
	//	КонецЕсли;   	 
	//КонецЦикла; 
	//Если не Нашли_исполнителя Тогда
	//	Запись = НЗ.Добавить();
	//	Запись.БизнесПроцесс =  СсылкаНаПроцесс;
	//	Запись.ТипЗадач = Перечисления.аГруппировкиЗадач.ОжидаютВыполнения;
	//	Запись.Документ = СписокОбъектов[0].Значение;
	//	Запись.Согласовано = "Не выполнена";
	//	Запись.СостояниеДокумента = Справочники.аДокументооборотСостояниеДокументов.НаСогласовании;
	//	Запись.ТекстовыйРезультат = "Не выполнена";
	//	Запись.ДатаВыполненияПлан = ЗадачаОбъект.ДатаВыполненияПлан;
	//	Запись.Исполнитель = ЗадачаОбъект.Исполнитель;
	//	Если  СписокОбъектов[0].Значение.КонтрагентыДоговоры.Количество() > 0 Тогда
	//		Запись.ДоговорКонтрагента =  СписокОбъектов[0].Значение.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//		Запись.Контрагент  =  СписокОбъектов[0].Значение.КонтрагентыДоговоры[0].Контрагент;
	//	КонецЕсли; 
	//	Если  СписокОбъектов[0].Значение.ОрганизацииПодразделения.Количество() > 0 Тогда
	//		Запись.Подразделение  = СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение;
	//	КонецЕсли; 
	//	Запись.Сумма =  СписокОбъектов[0].Значение.СуммаДокумента;
	//	Запись.Инициатор   =  ЗадачаОбъект.Автор;
	//	Запись.Выполнена = ЗадачаОбъект.Выполнена;	//
	//	Запрос1 = Новый Запрос;
	//	Запрос1.Текст = "ВЫБРАТЬ
	//	|	аДокументооборотСостояниеДокументов.СостояниеДокумента
	//	|ИЗ
	//	|	РегистрСведений.аДокументооборотСостояниеДокументов КАК аДокументооборотСостояниеДокументов
	//	|ГДЕ
	//	|	аДокументооборотСостояниеДокументов.КорпоративныйДокумент = &КорпоративныйДокумент";
	//	Запрос1.УстановитьПараметр("КорпоративныйДокумент",СписокОбъектов[0].Значение );
	//	Выборка1 = Запрос1.Выполнить().Выбрать();
	//	Пока Выборка1.Следующий() Цикл
	//		Запись.СостояниеДокумента  =  Выборка1.СостояниеДокумента;
	//	КонецЦикла;
	//	Запись.ДатаВыполненияПлан =    ЗадачаОбъект.ДатаВыполненияПлан;
	//КонецЕсли; 
	//
	//НЗ.Записать(Истина);
	//Возврат 0;
КонецФункции

//ссылка на объекты передается в аргументах
//СсылкаНаПроцесс
//СсылкаНаЗадачу
//ИсполнительЗадачи
//доступ к данным осуществляется в виде:
//СтруктураОтчетаИсполнителя.<ВидОтчета>
//СтруктураРеквизитовПроцесса.<ИмяРеквизита>
//СтруктураПараметровПроцесса.<ИмяПараметра>
//СтруктураПараметровЗадачи.<ИмяПараметра>
//при необходимости можно изменить данные присвоив значения элементам структуры
//СтруктураРеквизитовПроцесса.<ИмяРеквизита>=<ЗначениеРеквизита>
Функция ЗаписьЗадачи(СсылкаНаПроцесс,СсылкаНаЗадачу,ИсполнительЗадачи,СтруктураРеквизитовПроцесса,СтруктураПараметровПроцесса,СписокОбъектов,СтруктураОтчетаИсполнителя,СтруктураПараметровЗадачи)Экспорт
	ВОзврат 0;
	//НЗ = РегистрыСведений.pcru_ПараметрыВыданныхЗадач.СоздатьНаборЗаписей();
	//НЗ.Отбор.Документ.Установить(СписокОбъектов[0].Значение, Истина);
	//НЗ.Отбор.БизнесПроцесс.Установить(СсылкаНаПроцесс, Истина);
	//НЗ.Отбор.Задача.Установить(СсылкаНаЗадачу, Истина);
	//НЗ.Прочитать();
	//Индекс = 0;
	//Для каждого Запись  Из НЗ Цикл
	//	
	//	Запись.БизнесПроцесс =  СсылкаНаЗадачу.БизнесПроцесс;
	//	
	//	Запись.Документ = СписокОбъектов[0].Значение;
	//	
	//	Запись.Задача =  СсылкаНаЗадачу.Ссылка;
	//	
	//	Запись.Исполнитель = СсылкаНаЗадачу.Исполнитель;
	//	
	//	Если  СписокОбъектов[0].Значение.КонтрагентыДоговоры.Количество() > 0 Тогда
	//		
	//		Запись.ДоговорКонтрагента =  СписокОбъектов[0].Значение.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//		
	//		Запись.Контрагент  =  СписокОбъектов[0].Значение.КонтрагентыДоговоры[0].Контрагент;
	//		
	//	КонецЕсли; 
	//	
	//	Если  СписокОбъектов[0].Значение.ОрганизацииПодразделения.Количество() > 0 Тогда
	//		
	//		Запись.Подразделение  = СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение;
	//		
	//	КонецЕсли; 
	//	
	//	Запись.Сумма =  СписокОбъектов[0].Значение.СуммаДокумента;
	//	
	//	Запись.Инициатор   =  СсылкаНаЗадачу.Автор;
	//	
	//	Запись.Выполнена = СсылкаНаЗадачу.Выполнена;
	//	//
	//	Запрос1 = Новый Запрос;
	//	Запрос1.Текст = "ВЫБРАТЬ
	//	|	аДокументооборотСостояниеДокументов.СостояниеДокумента
	//	|ИЗ
	//	|	РегистрСведений.аДокументооборотСостояниеДокументов КАК аДокументооборотСостояниеДокументов
	//	|ГДЕ
	//	|	аДокументооборотСостояниеДокументов.КорпоративныйДокумент = &КорпоративныйДокумент";
	//	Запрос1.УстановитьПараметр("КорпоративныйДокумент",СписокОбъектов[0].Значение );
	//	Выборка1 = Запрос1.Выполнить().Выбрать();
	//	Пока Выборка1.Следующий() Цикл
	//		Запись.СостояниеДокумента  =  Выборка1.СостояниеДокумента;
	//	КонецЦикла;
	//	
	//	Запись.ДатаВыполненияПлан =    СсылкаНаЗадачу.ДатаВыполненияПлан;
	//	
	//	Если СсылкаНаЗадачу.Выполнена Тогда
	//		ЗапросРез = Новый Запрос;
	//		ЗапросРез.Текст = "ВЫБРАТЬ
	//		|	аДокументооборотРезультатыИсполнителейЗадачСрезПоследних.ПараметрРезультата.Наименование as Наименование,
	//		|	аДокументооборотРезультатыИсполнителейЗадачСрезПоследних.ЗначениеПараметра
	//		|ИЗ
	//		|	РегистрСведений.аДокументооборотРезультатыИсполнителейЗадач.СрезПоследних КАК аДокументооборотРезультатыИсполнителейЗадачСрезПоследних
	//		|ГДЕ
	//		|	аДокументооборотРезультатыИсполнителейЗадачСрезПоследних.Задача = &Задача";
	//		ЗапросРез.УстановитьПараметр("Задача",СсылкаНаЗадачу );
	//		ВыборкаРез = ЗапросРез.Выполнить().Выбрать();
	//		Пока ВыборкаРез.Следующий() Цикл
	//			Если ВыборкаРез.Наименование = "Выбор кнопками панели" Тогда
	//				Запись.Согласовано =   ВыборкаРез.ЗначениеПараметра;
	//			КонецЕсли;
	//			//
	//			Если ВыборкаРез.Наименование = "Текстовое сообщение" Тогда
	//				Запись.ТекстовыйРезультат =   ВыборкаРез.ЗначениеПараметра;
	//			КонецЕсли;
	//		КонецЦикла;
	//		Запись.ТипЗадач = Перечисления.аГруппировкиЗадач.ВыполненныеЗадачи;
	//		Запись.ДатаВыполненияФакт   =    СсылкаНаЗадачу.ДатаВыполненияФакт;
	//		//
	//	Иначе
	//		Запись.Согласовано =   "Не выполнена";
	//		Запись.ТипЗадач = Перечисления.аГруппировкиЗадач.НаходятсяВРаботе;
	//		Запись.ТекстовыйРезультат =   "Не выполнена";
	//		//
	//		ЗапросЗамена = Новый Запрос;
	//		ЗапросЗамена.Текст = "ВЫБРАТЬ
	//		|	аДокументооборотЗаменыИсполнителейВТочекПроцесса.ИсходныйИсполнитель,
	//		|	аДокументооборотЗаменыИсполнителейВТочекПроцесса.ДействующийИсполнитель
	//		|ИЗ
	//		|	РегистрСведений.аДокументооборотЗаменыИсполнителейВТочекПроцесса КАК аДокументооборотЗаменыИсполнителейВТочекПроцесса
	//		|ГДЕ
	//		|	аДокументооборотЗаменыИсполнителейВТочекПроцесса.БизнесПроцесс = &БизнесПроцесс
	//		|	И аДокументооборотЗаменыИсполнителейВТочекПроцесса.ТочкаКБП = &ТочкаКБП";
	//		ЗапросЗамена.УстановитьПараметр("БизнесПроцесс",СсылкаНаЗадачу.БизнесПроцесс);
	//		ЗапросЗамена.УстановитьПараметр("ТочкаКБП",СсылкаНаЗадачу.ТочкаКБП);
	//		ВыборкаЗамена = ЗапросЗамена.Выполнить().Выбрать();
	//		Пока ВыборкаЗамена.Следующий() Цикл
	//			
	//			Запись.ПереадресованоДругому  = Истина;
	//			
	//			МЗ1 = Нз.Добавить();	
	//			
	//			ЗаполнитьЗначенияСвойств(МЗ1,Запись);
	//			
	//			МЗ1.Исполнитель = ВыборкаЗамена.ИсходныйИсполнитель;
	//			МЗ1.Переадресант  = ВыборкаЗамена.ДействующийИсполнитель;
	//			
	//			Запрос1 = Новый Запрос;
	//			Запрос1.Текст = "ВЫБРАТЬ
	//			|	аДокументооборотМатрицаЗаместителейСрезПоследних.ПричинаЗамены
	//			|ИЗ
	//			|	РегистрСведений.аДокументооборотМатрицаЗаместителей.СрезПоследних КАК аДокументооборотМатрицаЗаместителейСрезПоследних
	//			|ГДЕ
	//			|	аДокументооборотМатрицаЗаместителейСрезПоследних.ЗамещаемыйСотрудник = &ЗамещаемыйСотрудник";
	//			Запрос1.УстановитьПараметр("ЗамещаемыйСотрудник",ВыборкаЗамена.ИсходныйИсполнитель);
	//			Выборка1 = Запрос1.Выполнить().Выбрать();
	//			Если Выборка1.Следующий()  Тогда
	//				МЗ1.Согласовано =  Выборка1.ПричинаЗамены ;
	//				МЗ1.ТекстовыйРезультат =   "Заместитель " + ВыборкаЗамена.ДействующийИсполнитель;
	//				МЗ1.ПричинаПереадресации  =  Выборка1.ПричинаЗамены;
	//			Иначе
	//				МЗ1.Согласовано =  "Переадресовано";
	//				МЗ1.ТекстовыйРезультат =   ВыборкаЗамена.ДействующийИсполнитель;
	//				МЗ1.ПричинаПереадресации  =  "Перенаправлено исполнителем " + ВыборкаЗамена.ИсходныйИсполнитель;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли; 
	//	
	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	аДокументооборотЗаменыИсполнителейВТочекПроцесса.ИсходныйИсполнитель КАК ИсходныйИсполнитель
	//|ИЗ
	//|	РегистрСведений.аДокументооборотЗаменыИсполнителейВТочекПроцесса КАК аДокументооборотЗаменыИсполнителейВТочекПроцесса
	//|ГДЕ
	//|	аДокументооборотЗаменыИсполнителейВТочекПроцесса.ДействующийИсполнитель = &ДействующийИсполнитель
	//|	И аДокументооборотЗаменыИсполнителейВТочекПроцесса.БизнесПроцесс = &БизнесПроцесс";
	//Запрос.УстановитьПараметр("ДействующийИсполнитель",ИсполнительЗадачи );
	//Запрос.УстановитьПараметр("БизнесПроцесс",СсылкаНаПроцесс );
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Запись.Исполнитель = ИсполнительЗадачи;                                               
	//	Запись_о_замене = НЗ.Вставить(Индекс + 1 );
	//	Запись_о_замене.Документ = СписокОбъектов[0].Значение;
	//	Запись_о_замене.Задача = СсылкаНаЗадачу;
	//	Запись_о_замене.Исполнитель = Выборка.ИсходныйИсполнитель;
	//	Запись_о_замене.БизнесПроцесс = СсылкаНаПроцесс;
	//	Запись_о_замене.Согласовано = "Переадресована ";
	//	Запись_о_замене.ПереадресованоДругому = Истина;
	//	Запись_о_замене.ТекстовыйРезультат = ИсполнительЗадачи;
	//	Индекс = Индекс + 1;
	//КонецЕсли;   	 
	//Индекс = Индекс + 1;
	//КонецЦикла; 
	//НЗ.Записать(Истина);
	Возврат 0;
КонецФункции

//ссылка на объект передается в переменной
//ДокументОбъект
//доступ к данным осуществляется в виде:
//СтруктураРеквизитов.<ИмяРеквизита>
//где ИмяРеквизита - имя дополнительного реквизита, как оно задано при его настройке
//при необходимости можно изменить данные присвоив значения структуре
//СтруктураРеквизитов.<ИмяРеквизита>=<ЗначениеРеквизита>
//можно выполнить запись в журнал процесса:
//аДОКорпоративныеПроцессы.ЗаписатьВЖурналПроцесса(<текст>, ДокументОбъект.Ссылка, , ТекущаяДата(), <пиктограмма>);
//где <пиктограмма> может принимать значения: 0-нет пиктограммы, 1-информация, 2-предупреждение, 3-ошибка
//pcru_БизнесПроцессы.СозданиеДокумента(ДокументОбъект,СтруктураРеквизитов);
Функция СозданиеДокумента(ДокументОбъект,СтруктураРеквизитов)Экспорт
	ВОзврат 0;
	//НЗ = РегистрыСведений.pcru_ПараметрыВыданныхЗадач.СоздатьНаборЗаписей();
	//НЗ.Отбор.Документ.Установить(ДокументОбъект.Ссылка, Истина);
	//НЗ.Прочитать();
	//Если НЗ.Количество() = 0 Тогда
	//	НЗ.Очистить();
	//	#Область ЗНО
	//	Если ДокументОбъект.ВидДокумента.Наименование = "Заявка на оплату" Тогда
	//		ТаблицаЗначений = Новый ТаблицаЗначений;
	//		ТаблицаЗначений.Колонки.Добавить("Исполнитель",,"Исполнитель");
	//		Если ДокументОбъект.СписокПолучателей.Количество()>0 Тогда
	//			Для каждого СтрСпП Из ДокументОбъект.СписокПолучателей Цикл
	//				СтрТЗ = 	ТаблицаЗначений.Добавить();
	//				СтрТЗ.Исполнитель = СтрСпП.Получатель;
	//			КонецЦикла; 
	//		Иначе	
	//			//Office coordinator
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"13112") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1312") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1313") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1314") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1315") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1316") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1319") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1321") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1322") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1323") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1324") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1325") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1331") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1332") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1333") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1334") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1361") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1362") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1363") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1364") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1365") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1381") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1382") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1383") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1385") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1394") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1396") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1397") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1404") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1411") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1412") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Sergey V. Ivanov");
	//				КонецЕсли;  	
	//			КонецЦикла;
	//			//CEO's assistant
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если  СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1341") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1342") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1343") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1386") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Daria I. Gorodetskaya");
	//				КонецЕсли; 
	//			КонецЦикла; 	
	//			AddCEO = False;
	//			Если  ДокументОбъект.СуммаДокумента>=250000 Тогда
	//				AddCEO = Истина;
	//			КонецЕсли; 
	//			//2.00.00
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.00.00") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Daria I. Gorodetskaya");
	//					AddCEO = Истина;
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			AddCM = False; 
	//			//2.00.01
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.00.01") > 0 Тогда
	//					AddCM = Истина; 
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			//
	//			//	//2.01.00
	//			//Для каждого РаспределениеЗатрат Из СписокОбъектов[0].Значение.пкру_РаспределениеЗатрат Цикл
	//			//	Возврат СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.01.00") > 0;
	//			//КонецЦикла; 	
	//			//2.02
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.02") > 0 Тогда
	//					Если  ДокументОбъект.СуммаДокумента<300000 Тогда
	//						СтрТЗ = 	ТаблицаЗначений.Добавить();
	//						СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Stanislav U. Nikitin");
	//					КонецЕсли; 
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Dmitriy Kopunov");
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			//HoIT
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"13113") > 0
	//					или  СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1317") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1392") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"13921") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"13922") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"13923") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1393") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1398") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Dmitriy Kopunov");
	//				КонецЕсли;  
	//			КонецЦикла; 	
	//			//2.03.00
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.03.00") > 0 Тогда
	//					//			СтрТЗ = 	НЗ.Добавить(); 			СтрТЗ.Документ =  ДокументОбъект; 			СтрТЗ.Согласовано = "Согласование не запущено"; 			СтрТЗ.ТекстовыйРезультат = "Согласование не запущено"; 
	//					//СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Ludmila Ischenko");
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Viktor Gaibadullin");
	//				КонецЕсли; 
	//			КонецЦикла; 	
	//			//HoHR
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1114") > 0 
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1115") > 0 
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1117") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1118") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1121") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1121") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1122") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1123") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1124") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1128") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1129") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1131") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1132") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1133") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1134") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1135") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1141") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1142") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1143") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1384") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1406") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Viktor Gaibadullin");
	//				КонецЕсли;  
	//			КонецЦикла; 	
	//			//2.10.00
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.10.00") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Artem V. Oleynikov");
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Ilshat Fakhritdinov");
	//					AddCM = Истина;
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			//2.05
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.05") > 0 Тогда
	//					//Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1214") > 0 Тогда
	//					//				СтрТЗ = 	НЗ.Добавить(); 			СтрТЗ.Документ =  ДокументОбъект; 			СтрТЗ.Согласовано = "Согласование не запущено"; 			СтрТЗ.ТекстовыйРезультат = "Согласование не запущено"; 
	//					//	СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Elena E. Ivanova");
	//					//Иначе
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Natalya Leykovskaya");
	//					//КонецЕсли;
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Ilshat Fakhritdinov");
	//					AddCM = Истина;
	//				КонецЕсли;	
	//			КонецЦикла; 	
	//			// HoSD
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1214") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12141") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12142") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12143") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1318") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Ilshat Fakhritdinov");
	//					AddCM = Истина;
	//				КонецЕсли;
	//			КонецЦикла; 	
	//			//2.07  			//2.11.02
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.07") > 0 или СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.11.02") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Aleksey Volkovnichenko");
	//				КонецЕсли; 
	//			КонецЦикла; 
	//			//2.07  			
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.08.00") > 0  Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Irina M. Glushchenya");
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Radoslaw Kukuczka");
	//					AddCM = Истина;
	//				КонецЕсли; 
	//			КонецЦикла; 
	//			//2.11.01
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если  СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.11.01") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Aleksandr A. Demidenko");
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Radoslaw Kukuczka");
	//					AddCM = Истина;
	//				КонецЕсли; 
	//			КонецЦикла; 
	//			// HoMKT
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1211") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12111") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12112") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12113") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12114") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12115") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12116") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12117") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1212") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1213") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1215") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1216") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1217") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1221") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1222") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1405") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Radoslaw Kukuczka");
	//				КонецЕсли;	
	//			КонецЦикла; 	
	//			//2.09
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.09") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Yulia Yaroshenko");
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Bogdan O. Chekomasov");
	//					AddCM = Истина;
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			//	//2.13.00
	//			//	Для каждого РаспределениеЗатрат Из СписокОбъектов[0].Значение.пкру_РаспределениеЗатрат Цикл
	//			//		Возврат СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.13.00") > 0;
	//			//	КонецЦикла; 
	//			//Возврат Ложь;
	//			//2.16
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если  СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.16") > 0 Тогда
	//					//			СтрТЗ = 	НЗ.Добавить(); 			СтрТЗ.Документ =  ДокументОбъект; 			СтрТЗ.Согласовано = "Согласование не запущено"; 			СтрТЗ.ТекстовыйРезультат = "Согласование не запущено"; 
	//					//СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Dmitriy Y. Mishukov");
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Margarita V. Petukhova");
	//					AddCM = Истина;
	//				КонецЕсли;
	//			КонецЦикла; 
	//			//2.14.00
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.14.00") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Margarita V. Petukhova");
	//					AddCM = Истина;
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			//HoRD
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1395") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Margarita V. Petukhova");
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			//2.04.00
	//			//HoIC&LSD
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1371") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1372") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1375") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1379") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1399") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1408") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1409") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1441") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1442") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.04.00") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Yuriy Mamulin");
	//				КонецЕсли;
	//			КонецЦикла; 	
	//			//Chief accountant
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1401") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"14010") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"14012") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"14013") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1402") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1403") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Irina Matveenko");
	//				КонецЕсли; 
	//			КонецЦикла; 	
	//			//
	//			Если AddCM Тогда
	//				СтрТЗ             = ТаблицаЗначений.Добавить();
	//				СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Piotr Winiarczyk");
	//			КонецЕсли;
	//			//CFO
	//			СтрТЗ              = ТаблицаЗначений.Добавить();
	//			СтрТЗ.Исполнитель  = Справочники.Пользователи.НайтиПоНаименованию("Irina Efimova");
	//			//
	//			Если AddCEO Тогда
	//				СтрТЗ             = ТаблицаЗначений.Добавить();
	//				СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Oleg Venediktov");
	//			КонецЕсли;
	//			//
	//			СтрТЗ              = ТаблицаЗначений.Добавить();
	//			СтрТЗ.Исполнитель  = Справочники.Пользователи.НайтиПоНаименованию("Mariya O. Chumakova");
	//			
	//		КонецЕсли; 
	//		//
	//		Попытка
	//			ТаблицаЗначений.Свернуть("Исполнитель");	
	//		Исключение
	//		КонецПопытки; 
	//		//		
	//		Для каждого СтрокаТЧ Из ТаблицаЗначений Цикл
	//			СтрТЗ                    = НЗ.Добавить();
	//			СтрТЗ.Исполнитель        = СтрокаТЧ.Исполнитель;
	//			СтрТЗ.Документ           = ДокументОбъект.Ссылка;
	//			СтрТЗ.Сумма              = ДокументОбъект.СуммаДокумента;
	//			СтрТЗ.ДоговорКонтрагента = ДокументОбъект.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//			СтрТЗ.Контрагент         = ДокументОбъект.КонтрагентыДоговоры[0].Контрагент;
	//			СтрТЗ.Подразделение      = ДокументОбъект.ОрганизацииПодразделения[0].Подразделение;
	//			СтрТЗ.Согласовано        = "Согласование не запущено";
	//			СтрТЗ.ТекстовыйРезультат = "Согласование не запущено";
	//			
	//		КонецЦикла; 
	//	КонецЕсли; 
	//	#КонецОбласти
	//	
	//	#Область Договор_контрагента
	//	Если ДокументОбъект.ВидДокумента.Наименование = "Входящий" Тогда
	//		
	//		ТаблицаЗначений = Новый ТаблицаЗначений;
	//		ТаблицаЗначений.Колонки.Добавить("Исполнитель",,"Исполнитель");
	//		
	//		Для каждого СтрокаПроизвольнойТаблицы Из ДокументОбъект.ПроизвольнаяТаблица Цикл
	//			Если ТипЗнч(СтрокаПроизвольнойТаблицы.КолонкаСсылка1) = Тип("СправочникСсылка.Подразделения") Тогда
	//				СтрТЗ             = ТаблицаЗначений.Добавить();
	//				СтрТЗ.Исполнитель = СтрокаПроизвольнойТаблицы.КолонкаСсылка1.Руководитель;
	//			КонецЕсли; 
	//		КонецЦикла; 
	//		
	//		
	//		СтрТЗ = 	ТаблицаЗначений.Добавить();
	//		СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Yuriy Mamulin");
	//		
	//		СтрТЗ              = ТаблицаЗначений.Добавить();
	//		СтрТЗ.Исполнитель  = Справочники.Пользователи.НайтиПоНаименованию("Irina Efimova");
	//		//
	//		
	//		СтрТЗ = 	ТаблицаЗначений.Добавить();
	//		СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Daria I. Gorodetskaya");
	//		
	//		СтрТЗ             = ТаблицаЗначений.Добавить();
	//		СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Oleg Venediktov");
	//		
	//		
	//		
	//		Попытка
	//			ТаблицаЗначений.Свернуть("Исполнитель");	
	//		Исключение
	//		КонецПопытки; 
	//		//		
	//		
	//		Для каждого СтрокаТЧ Из ТаблицаЗначений Цикл
	//			СтрТЗ                    = НЗ.Добавить();
	//			СтрТЗ.Исполнитель        = СтрокаТЧ.Исполнитель;
	//			СтрТЗ.Документ           = ДокументОбъект.Ссылка;
	//			СтрТЗ.Сумма              = ДокументОбъект.СуммаДокумента;
	//			СтрТЗ.ДоговорКонтрагента = ДокументОбъект.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//			СтрТЗ.Контрагент         = ДокументОбъект.КонтрагентыДоговоры[0].Контрагент;
	//			СтрТЗ.Подразделение      = ДокументОбъект.ОрганизацииПодразделения[0].Подразделение;
	//			СтрТЗ.Согласовано        = "Согласование не запущено";
	//			СтрТЗ.ТекстовыйРезультат = "Согласование не запущено";
	//		КонецЦикла; 
	//		
	//	КонецЕсли; 
	//	#КонецОбласти
	//	
	//	#Область Процедура_Приказ_Директива
	//	Если ДокументОбъект.ВидДокумента.Наименование = "Процедура" 
	//		или ДокументОбъект.ВидДокумента.Наименование = "Приказ" 
	//		или ДокументОбъект.ВидДокумента.Наименование = "Директива" Тогда
	//		ТаблицаЗначений = Новый ТаблицаЗначений;
	//		ТаблицаЗначений.Колонки.Добавить("Исполнитель",,"Исполнитель");
	//		//
	//		СтрТЗ = 	ТаблицаЗначений.Добавить();
	//		СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Yulia Yaroshenko");
	//		//	 
	//		Попытка
	//			ТаблицаЗначений.Свернуть("Исполнитель");	
	//		Исключение
	//		КонецПопытки; 
	//		//		
	//		Для каждого СтрокаТЧ Из ТаблицаЗначений Цикл
	//			СтрТЗ                    = НЗ.Добавить();
	//			СтрТЗ.Исполнитель        = СтрокаТЧ.Исполнитель;
	//			СтрТЗ.Документ           = ДокументОбъект.Ссылка;
	//			СтрТЗ.Сумма              = ДокументОбъект.СуммаДокумента;
	//			СтрТЗ.ДоговорКонтрагента = ДокументОбъект.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//			СтрТЗ.Контрагент         = ДокументОбъект.КонтрагентыДоговоры[0].Контрагент;
	//			СтрТЗ.Подразделение      = ДокументОбъект.ОрганизацииПодразделения[0].Подразделение;
	//			СтрТЗ.Согласовано        = "Согласование не запущено";
	//			СтрТЗ.ТекстовыйРезультат = "Согласование не запущено";
	//		КонецЦикла; 
	//	КонецЕсли; 
	//	#КонецОбласти
	//	НЗ.Записать(ИСТИНА);
	//	
	//КонецЕсли;
	//Возврат 0;
	//
	//
КонецФункции

//ссылка на объект передается в переменной
//ДокументОбъект
//доступ к данным осуществляется в виде:
//СтруктураРеквизитов.<ИмяРеквизита>
//где ИмяРеквизита - имя дополнительного реквизита, как оно задано при его настройке
//при необходимости можно изменить данные присвоив значения структуре
//СтруктураРеквизитов.<ИмяРеквизита>=<ЗначениеРеквизита>
//можно выполнить запись в журнал процесса:
//аДОКорпоративныеПроцессы.ЗаписатьВЖурналПроцесса(<текст>, ДокументОбъект.Ссылка, , ТекущаяДата(), <пиктограмма>);
//где <пиктограмма> может принимать значения: 0-нет пиктограммы, 1-информация, 2-предупреждение, 3-ошибка
Функция ЗаписьДокумента(ДокументОбъект,СтруктураРеквизитов)Экспорт
	ВОзврат 0;
	//НЗ = РегистрыСведений.pcru_ПараметрыВыданныхЗадач.СоздатьНаборЗаписей();
	//НЗ.Отбор.Документ.Установить(ДокументОбъект.Ссылка, Истина);
	//НЗ.Прочитать();
	//Для каждого СтрТЗ Из НЗ Цикл
	//	СтрТЗ.Сумма              = ДокументОбъект.СуммаДокумента;
	//	СтрТЗ.ДоговорКонтрагента = ДокументОбъект.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//	СтрТЗ.Контрагент         = ДокументОбъект.КонтрагентыДоговоры[0].Контрагент;
	//	СтрТЗ.Подразделение      = ДокументОбъект.ОрганизацииПодразделения[0].Подразделение;
	//КонецЦикла; 
	//НЗ.Записать(ИСТИНА);
	//Возврат 0;
КонецФункции


//ссылка на процесс передается в аргументе
//СсылкаНаПроцесс
//доступ к данным осуществляется в виде:
//СтруктураРеквизитовПроцесса.<ИмяРеквизита>
//СтруктураПараметровПроцесса.<ИмяПараметра>
//Можно получить данные из прилагаемых к процессу объектов (документов), используя:
//СписокОбъектов[0].Значение;
//при необходимости можно изменить данные присвоив значения элементам структуры
//СтруктураРеквизитовПроцесса.<ИмяРеквизита>=<ЗначениеРеквизита>
//СтруктураПараметровПроцесса.<ИмяПараметра>=<ЗначениеРеквизита>
//ЗавершитьПроцесс=Истина; //при необходимости можно полностью завершить бизнес-процесс (вне зависимости от дальнейшего маршрута процесса)
//можно выполнить запись в журнал процесса:
//аДОКорпоративныеПроцессы.ЗаписатьВЖурналПроцесса(<текст>, СсылкаНаПроцесс, , ТекущаяДата(), <пиктограмма>);
//где <пиктограмма> может принимать значения: 0-нет пиктограммы, 1-информация, 2-предупреждение, 3-ошибка
//pcru_БизнесПроцессы.СозданиеБП(СсылкаНаПроцесс,СсылкаНаЗадачу,СтруктураРеквизитовПроцесса,СтруктураПараметровПроцесса,СписокОбъектов,СтруктураОтчетаИсполнителя);
Функция СозданиеБП(СсылкаНаПроцесс,СсылкаНаЗадачу,СтруктураРеквизитовПроцесса,СтруктураПараметровПроцесса,СписокОбъектов,СтруктураОтчетаИсполнителя)Экспорт
	ВОзврат 0;
	//Если СписокОбъектов.Количество() =0 Тогда
	//	Возврат 0;
	//КонецЕсли; 
	//НЗ = РегистрыСведений.pcru_ПараметрыВыданныхЗадач.СоздатьНаборЗаписей();
	//НЗ.Отбор.Документ.Установить(СписокОбъектов[0].Значение, Истина);
	//НЗ.Прочитать();
	//ДокументОбъект  =  СписокОбъектов[0].Значение;
	//Индекс = 0;
	//Если НЗ.Количество() = 0 Тогда
	//	#Область ЗНО
	//	Если ДокументОбъект.ВидДокумента.Наименование = "Заявка на оплату" Тогда
	//		ТаблицаЗначений = Новый ТаблицаЗначений;
	//		ТаблицаЗначений.Колонки.Добавить("Исполнитель",,"Исполнитель");
	//		Если ДокументОбъект.СписокПолучателей.Количество()>0 Тогда
	//			Для каждого СтрСпП Из ДокументОбъект.СписокПолучателей Цикл
	//				СтрТЗ = 	ТаблицаЗначений.Добавить();
	//				СтрТЗ.Исполнитель = СтрСпП.Получатель;
	//			КонецЦикла; 
	//		Иначе	
	//			//Office coordinator
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"13112") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1312") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1313") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1314") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1315") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1316") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1319") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1321") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1322") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1323") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1324") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1325") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1331") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1332") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1333") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1334") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1361") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1362") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1363") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1364") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1365") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1381") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1382") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1383") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1385") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1394") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1396") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1397") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1404") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1411") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1412") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Sergey V. Ivanov");
	//				КонецЕсли;  	
	//			КонецЦикла;
	//			//CEO's assistant
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если  СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1341") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1342") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1343") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1386") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Daria I. Gorodetskaya");
	//				КонецЕсли; 
	//			КонецЦикла; 	
	//			AddCEO = False;
	//			Если  ДокументОбъект.СуммаДокумента>=250000 Тогда
	//				AddCEO = Истина;
	//			КонецЕсли; 
	//			//2.00.00
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.00.00") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Daria I. Gorodetskaya");
	//					AddCEO = Истина;
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			AddCM = False; 
	//			//2.00.01
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.00.01") > 0 Тогда
	//					AddCM = Истина; 
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			//
	//			//	//2.01.00
	//			//Для каждого РаспределениеЗатрат Из СписокОбъектов[0].Значение.пкру_РаспределениеЗатрат Цикл
	//			//	Возврат СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.01.00") > 0;
	//			//КонецЦикла; 	
	//			//2.02
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.02") > 0 Тогда
	//					Если  ДокументОбъект.СуммаДокумента<300000 Тогда
	//						СтрТЗ = 	ТаблицаЗначений.Добавить();
	//						СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Stanislav U. Nikitin");
	//					КонецЕсли; 
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Dmitriy Kopunov");
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			//HoIT
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"13113") > 0
	//					или  СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1317") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1392") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"13921") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"13922") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"13923") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1393") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1398") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Dmitriy Kopunov");
	//				КонецЕсли;  
	//			КонецЦикла; 	
	//			//2.03.00
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.03.00") > 0 Тогда
	//					//			СтрТЗ = 	НЗ.Добавить(); 			СтрТЗ.Документ =  ДокументОбъект; 			СтрТЗ.Согласовано = "Согласование не запущено"; 			СтрТЗ.ТекстовыйРезультат = "Согласование не запущено"; 
	//					//СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Ludmila Ischenko");
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Viktor Gaibadullin");
	//				КонецЕсли; 
	//			КонецЦикла; 	
	//			//HoHR
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1114") > 0 
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1115") > 0 
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1117") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1118") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1121") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1121") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1122") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1123") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1124") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1128") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1129") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1131") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1132") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1133") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1134") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1135") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1141") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1142") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1143") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1384") > 0
	//					or СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1406") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Viktor Gaibadullin");
	//				КонецЕсли;  
	//			КонецЦикла; 	
	//			//2.10.00
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.10.00") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Artem V. Oleynikov");
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Ilshat Fakhritdinov");
	//					AddCM = Истина;
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			//2.05
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.05") > 0 Тогда
	//					//Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1214") > 0 Тогда
	//					//				СтрТЗ = 	НЗ.Добавить(); 			СтрТЗ.Документ =  ДокументОбъект; 			СтрТЗ.Согласовано = "Согласование не запущено"; 			СтрТЗ.ТекстовыйРезультат = "Согласование не запущено"; 
	//					//	СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Elena E. Ivanova");
	//					//Иначе
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Natalya Leykovskaya");
	//					//КонецЕсли;
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Ilshat Fakhritdinov");
	//					AddCM = Истина;
	//				КонецЕсли;	
	//			КонецЦикла; 	
	//			// HoSD
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1214") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12141") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12142") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12143") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1318") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Ilshat Fakhritdinov");
	//					AddCM = Истина;
	//				КонецЕсли;
	//			КонецЦикла; 	
	//			//2.07  			//2.11.02
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.07") > 0 или СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.11.02") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Aleksey Volkovnichenko");
	//				КонецЕсли; 
	//			КонецЦикла; 
	//			//2.07  			
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.08.00") > 0  Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Irina M. Glushchenya");
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Radoslaw Kukuczka");
	//					AddCM = Истина;
	//				КонецЕсли; 
	//			КонецЦикла; 
	//			//2.11.01
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если  СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.11.01") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Aleksandr A. Demidenko");
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Radoslaw Kukuczka");
	//					AddCM = Истина;
	//				КонецЕсли; 
	//			КонецЦикла; 
	//			// HoMKT
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1211") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12111") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12112") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12113") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12114") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12115") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12116") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"12117") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1212") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1213") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1215") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1216") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1217") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1221") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1222") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1405") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Radoslaw Kukuczka");
	//				КонецЕсли;	
	//			КонецЦикла; 	
	//			//2.09
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.09") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Yulia Yaroshenko");
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Bogdan O. Chekomasov");
	//					AddCM = Истина;
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			//	//2.13.00
	//			//	Для каждого РаспределениеЗатрат Из СписокОбъектов[0].Значение.пкру_РаспределениеЗатрат Цикл
	//			//		Возврат СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.13.00") > 0;
	//			//	КонецЦикла; 
	//			//Возврат Ложь;
	//			//2.16
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если  СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.16") > 0 Тогда
	//					//			СтрТЗ = 	НЗ.Добавить(); 			СтрТЗ.Документ =  ДокументОбъект; 			СтрТЗ.Согласовано = "Согласование не запущено"; 			СтрТЗ.ТекстовыйРезультат = "Согласование не запущено"; 
	//					//СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Dmitriy Y. Mishukov");
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Margarita V. Petukhova");
	//					AddCM = Истина;
	//				КонецЕсли;
	//			КонецЦикла; 
	//			//2.14.00
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.14.00") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Margarita V. Petukhova");
	//					AddCM = Истина;
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			//HoRD
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1395") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Margarita V. Petukhova");
	//				КонецЕсли;  
	//			КонецЦикла; 
	//			//2.04.00
	//			//HoIC&LSD
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1371") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1372") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1375") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1379") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1399") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1408") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1409") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1441") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1442") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_CostCentr,"2.04.00") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Yuriy Mamulin");
	//				КонецЕсли;
	//			КонецЦикла; 	
	//			//Chief accountant
	//			Для каждого РаспределениеЗатрат Из ДокументОбъект.пкру_РаспределениеЗатрат Цикл
	//				Если СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1401") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"14010") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"14012") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"14013") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1402") > 0
	//					или СтрЧислоВхождений(РаспределениеЗатрат.пкру_СтатьяРасходов,"1403") > 0 Тогда
	//					СтрТЗ = 	ТаблицаЗначений.Добавить();
	//					СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Irina Matveenko");
	//				КонецЕсли; 
	//			КонецЦикла; 	
	//			//
	//			Если AddCM Тогда
	//				СтрТЗ             = ТаблицаЗначений.Добавить();
	//				СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Piotr Winiarczyk");
	//			КонецЕсли;
	//			//CFO
	//			СтрТЗ              = ТаблицаЗначений.Добавить();
	//			СтрТЗ.Исполнитель  = Справочники.Пользователи.НайтиПоНаименованию("Irina Efimova");
	//			//
	//			Если AddCEO Тогда
	//				СтрТЗ             = ТаблицаЗначений.Добавить();
	//				СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Oleg Venediktov");
	//			КонецЕсли;
	//			//
	//			СтрТЗ              = ТаблицаЗначений.Добавить();
	//			СтрТЗ.Исполнитель  = Справочники.Пользователи.НайтиПоНаименованию("Mariya O. Chumakova");
	//			
	//		КонецЕсли; 
	//		//
	//		Попытка
	//			ТаблицаЗначений.Свернуть("Исполнитель");	
	//		Исключение
	//		КонецПопытки; 
	//		//		
	//		Для каждого СтрокаТЧ Из ТаблицаЗначений Цикл
	//			СтрТЗ                    = НЗ.Добавить();
	//			СтрТЗ.Исполнитель        = СтрокаТЧ.Исполнитель;
	//			СтрТЗ.Документ           = ДокументОбъект.Ссылка;
	//			СтрТЗ.Сумма              = ДокументОбъект.СуммаДокумента;
	//			СтрТЗ.БизнесПроцесс      = СсылкаНаПроцесс;
	//			СтрТЗ.ДоговорКонтрагента = ДокументОбъект.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//			СтрТЗ.Контрагент         = ДокументОбъект.КонтрагентыДоговоры[0].Контрагент;
	//			СтрТЗ.Подразделение      = ДокументОбъект.ОрганизацииПодразделения[0].Подразделение;
	//			СтрТЗ.Согласовано        = "Согласование не запущено";
	//			СтрТЗ.ТекстовыйРезультат = "Согласование не запущено";
	//			
	//		КонецЦикла; 
	//	КонецЕсли; 
	//	#КонецОбласти
	//	#Область Договор_контрагента
	//	Если ДокументОбъект.ВидДокумента.Наименование = "Входящий" Тогда
	//		
	//		ТаблицаЗначений = Новый ТаблицаЗначений;
	//		ТаблицаЗначений.Колонки.Добавить("Исполнитель",,"Исполнитель");
	//		
	//		Для каждого СтрокаПроизвольнойТаблицы Из ДокументОбъект.ПроизвольнаяТаблица Цикл
	//			Если ТипЗнч(СтрокаПроизвольнойТаблицы.КолонкаСсылка1) = Тип("СправочникСсылка.Подразделения") Тогда
	//				СтрТЗ             = ТаблицаЗначений.Добавить();
	//				СтрТЗ.Исполнитель = СтрокаПроизвольнойТаблицы.КолонкаСсылка1.Руководитель;
	//			КонецЕсли; 
	//		КонецЦикла; 
	//		
	//		
	//		СтрТЗ = 	ТаблицаЗначений.Добавить();
	//		СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Yuriy Mamulin");
	//		
	//		СтрТЗ              = ТаблицаЗначений.Добавить();
	//		СтрТЗ.Исполнитель  = Справочники.Пользователи.НайтиПоНаименованию("Irina Efimova");
	//		//
	//		
	//		СтрТЗ = 	ТаблицаЗначений.Добавить();
	//		СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Daria I. Gorodetskaya");
	//		
	//		СтрТЗ             = ТаблицаЗначений.Добавить();
	//		СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Oleg Venediktov");
	//		
	//		
	//		
	//		Попытка
	//			ТаблицаЗначений.Свернуть("Исполнитель");	
	//		Исключение
	//		КонецПопытки; 
	//		//		
	//		
	//		Для каждого СтрокаТЧ Из ТаблицаЗначений Цикл
	//			СтрТЗ                    = НЗ.Добавить();
	//			СтрТЗ.Исполнитель        = СтрокаТЧ.Исполнитель;
	//			СтрТЗ.Документ           = ДокументОбъект.Ссылка;
	//			СтрТЗ.Сумма              = ДокументОбъект.СуммаДокумента;
	//			СтрТЗ.БизнесПроцесс      = СсылкаНаПроцесс;
	//			СтрТЗ.ДоговорКонтрагента = ДокументОбъект.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//			СтрТЗ.Контрагент         = ДокументОбъект.КонтрагентыДоговоры[0].Контрагент;
	//			СтрТЗ.Подразделение      = ДокументОбъект.ОрганизацииПодразделения[0].Подразделение;
	//			СтрТЗ.Согласовано        = "Согласование не запущено";
	//			СтрТЗ.ТекстовыйРезультат = "Согласование не запущено";
	//		КонецЦикла; 
	//		
	//	КонецЕсли; 
	//	#КонецОбласти
	//	#Область Процедура_Приказ_Директива
	//	Если ДокументОбъект.ВидДокумента.Наименование = "Процедура" 
	//		или ДокументОбъект.ВидДокумента.Наименование = "Приказ" 
	//		или ДокументОбъект.ВидДокумента.Наименование = "Директива" Тогда
	//		ТаблицаЗначений = Новый ТаблицаЗначений;
	//		ТаблицаЗначений.Колонки.Добавить("Исполнитель",,"Исполнитель");
	//		//
	//		СтрТЗ = 	ТаблицаЗначений.Добавить();
	//		СтрТЗ.Исполнитель = Справочники.Пользователи.НайтиПоНаименованию("Yulia Yaroshenko");
	//		//	 
	//		Попытка
	//			ТаблицаЗначений.Свернуть("Исполнитель");	
	//		Исключение
	//		КонецПопытки; 
	//		//		
	//		Для каждого СтрокаТЧ Из ТаблицаЗначений Цикл
	//			СтрТЗ                    = НЗ.Добавить();
	//			СтрТЗ.Исполнитель        = СтрокаТЧ.Исполнитель;
	//			СтрТЗ.Документ           = ДокументОбъект.Ссылка;
	//			СтрТЗ.Сумма              = ДокументОбъект.СуммаДокумента;
	//			СтрТЗ.ДоговорКонтрагента = ДокументОбъект.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//			СтрТЗ.БизнесПроцесс      = СсылкаНаПроцесс;
	//			СтрТЗ.Контрагент         = ДокументОбъект.КонтрагентыДоговоры[0].Контрагент;
	//			СтрТЗ.Подразделение      = ДокументОбъект.ОрганизацииПодразделения[0].Подразделение;
	//			СтрТЗ.Согласовано        = "Согласование не запущено";
	//			СтрТЗ.ТекстовыйРезультат = "Согласование не запущено";
	//		КонецЦикла; 
	//	КонецЕсли; 
	//	#КонецОбласти
	//Иначе	
	//	Для каждого Запись  Из НЗ Цикл
	//		Запись.БизнесПроцесс = СсылкаНаПроцесс;
	//		Запись.Инициатор =  СсылкаНаПроцесс.Автор;
	//		Запись.Сумма = СписокОбъектов[0].Значение.СуммаДокумента;
	//		Запись.Контрагент = СписокОбъектов[0].Значение.ОсновнойКонтрагент;
	//		Запись.ТипЗадач =  Перечисления.аГруппировкиЗадач.ОжидаютВыполнения;
	//		Запись.БизнесПроцесс = СсылкаНаПроцесс;                                               
	//		Запись.ВидБизнесПроцесса = СсылкаНаПроцесс.ВидПроцесса;
	//		//
	//		Если СписокОбъектов[0].Значение.КонтрагентыДоговоры.количество() > 0 Тогда
	//			
	//			Запись.ДоговорКонтрагента = СписокОбъектов[0].Значение.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//			
	//			
	//		КонецЕсли; 
	//		Если СписокОбъектов[0].Значение.ОрганизацииПодразделения.количество() > 0 Тогда
	//			
	//			Запись.Подразделение = СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение;
	//			
	//			
	//			
	//		КонецЕсли; 
	//		Запрос = Новый Запрос;
	//		Запрос.Текст = "ВЫБРАТЬ
	//		|	аДокументооборотМатрицаЗаместителейСрезПоследних.Заместитель КАК Заместитель,
	//		|	аДокументооборотМатрицаЗаместителейСрезПоследних.ПричинаЗамены КАК ПричинаЗамены
	//		|ИЗ
	//		|	РегистрСведений.аДокументооборотМатрицаЗаместителей.СрезПоследних КАК аДокументооборотМатрицаЗаместителейСрезПоследних
	//		|ГДЕ
	//		|	аДокументооборотМатрицаЗаместителейСрезПоследних.Период <= &Дата
	//		|	И аДокументооборотМатрицаЗаместителейСрезПоследних.ЗамещаемыйСотрудник = &ЗамещаемыйСотрудник
	//		|	И аДокументооборотМатрицаЗаместителейСрезПоследних.ДатаОкончания >= &Дата";
	//		Запрос.УстановитьПараметр("Дата",ТекущаяДата() );
	//		Запрос.УстановитьПараметр("ЗамещаемыйСотрудник",Запись.Исполнитель );
	//		Выборка = Запрос.Выполнить().Выбрать();
	//		Если Выборка.Следующий() Тогда
	//			Запись.Согласовано = Выборка.ПричинаЗамены;
	//			Запись.ТекстовыйРезультат = "Заместитель " + Выборка.Заместитель;
	//			//
	//			Запись_о_замене = НЗ.Вставить(Индекс + 1 );
	//			Запись_о_замене.Исполнитель = Выборка.Заместитель;
	//			Запись_о_замене.Документ = СписокОбъектов[0].Значение;
	//			Запись_о_замене.БизнесПроцесс = СсылкаНаПроцесс;
	//			Запись_о_замене.ТипЗадач = Перечисления.аГруппировкиЗадач.Переадресовано;
	//			Запись_о_замене.ВидБизнесПроцесса = СсылкаНаПроцесс.ВидПроцесса;
	//			Запись_о_замене.Согласовано = "Не выдано";
	//			Запись_о_замене.ТекстовыйРезультат = "Не выдано";
	//			Индекс = Индекс + 1;
	//		Иначе	
	//			Запись.БизнесПроцесс = СсылкаНаПроцесс;
	//			Запись.ВидБизнесПроцесса = СсылкаНаПроцесс.ВидПроцесса;
	//			Запись.Согласовано = "Не выдано";
	//			Запись.ТекстовыйРезультат = "Не выдано";
	//		КонецЕсли;   	 
	//		Индекс = Индекс + 1;
	//	КонецЦикла; 
	//КонецЕсли; 
	//
	//НЗ.Записать(Истина);
	//Возврат 0;
	//
	
КонецФункции

//pcru_БизнесПроцессы.ВыполнениеЗадачи(СсылкаНаПроцесс,СсылкаНаЗадачу,ИсполнительЗадачи,СтруктураРеквизитовПроцесса,СтруктураПараметровПроцесса,СписокОбъектов,СтруктураОтчетаИсполнителя,СтруктураПараметровЗадачи)
//СтруктураОтчетаИсполнителя.<ВидОтчета>
//СтруктураРеквизитовПроцесса.<ИмяРеквизита>
//СтруктураПараметровПроцесса.<ИмяПараметра>
//СтруктураПараметровЗадачи
Функция ВыполнениеЗадачи(СсылкаНаПроцесс,СсылкаНаЗадачу,ИсполнительЗадачи,СтруктураРеквизитовПроцесса,СтруктураПараметровПроцесса,СписокОбъектов,СтруктураОтчетаИсполнителя,СтруктураПараметровЗадачи)Экспорт
	
	МЗ = РегистрыСведений.pcru_СогласованиеДокументов.СоздатьМенеджерЗаписи();
	МЗ.БизнесПроцесс =  СсылкаНаПроцесс;
	МЗ.Документ = СписокОбъектов[0].Значение;
	МЗ.Задача =  СсылкаНаЗадачу;
	МЗ.Исполнитель = ИсполнительЗадачи;
	МЗ.ТекстовыйРезультат = СтруктураОтчетаИсполнителя.ТекстовоеСообщение;
	МЗ.Согласовано = СтруктураОтчетаИсполнителя.ВыборКнопками;
	Попытка
		МЗ.ЦиклСогласования = СтруктураРеквизитовПроцесса.ЦиклСогласования;
	Исключение
		МЗ.ЦиклСогласования = 1;
	КонецПопытки; 
	МЗ.Записать(Истина);
	
	//НЗ = РегистрыСведений.pcru_ПараметрыВыданныхЗадач.СоздатьНаборЗаписей();
	//НЗ.Отбор.Документ.Установить(СписокОбъектов[0].Значение, Истина);
	//НЗ.Отбор.БизнесПроцесс.Установить(СсылкаНаПроцесс, Истина);
	//НЗ.Отбор.Задача.Установить(СсылкаНаЗадачу, Истина);
	//НЗ.Прочитать();
	//Для каждого Запись  Из НЗ Цикл
	//	Запись.Исполнитель = ИсполнительЗадачи;                                               
	//	Запись.Выполнена = Истина;
	//	Запись.ДатаВыполненияФакт = ТекущаяДата();
	//	Запись.Согласовано = СтруктураОтчетаИсполнителя.ВыборКнопками;
	//	Запись.ТекстовыйРезультат =СтруктураОтчетаИсполнителя.ТекстовоеСообщение;
	//КонецЦикла; 
	//
	//  НЗ.Записать();
	//
	//Попытка
	//	Блокировка = Новый БлокировкаДанных;
	//	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.pcru_ПараметрыВыданныхЗадач");
	//	ЭлементБлокировки.УстановитьЗначение("Задача", СсылкаНаЗадачу);
	//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//	Блокировка.Заблокировать();
	//Исключение
	//КонецПопытки;
	////
	//Попытка
	//	НЗ = РегистрыСведений.pcru_ПараметрыВыданныхЗадач.СоздатьНаборЗаписей();
	//	НЗ.Отбор.Документ.Установить(СписокОбъектов[0].Значение, Истина);
	//	//НЗ.Отбор.БизнесПроцесс.Установить(СсылкаНаПроцесс, Истина);
	//	//НЗ.Отбор.Задача.Установить(СсылкаНаЗадачу, Истина);
	//	НЗ.Прочитать();
	//Исключение
	//		Возврат 0;
	//КонецПопытки;
	////
	//Индекс = 0;
	//	НетЗаписей = Ложь;
	//	Если НЗ.Количество() = 0 Тогда
	//		НетЗаписей = Истина;
	//	Иначе 
	//		Для каждого Запись  Из НЗ Цикл
	//			
	//			Запись.БизнесПроцесс =  СсылкаНаЗадачу.БизнесПроцесс;
	//			
	//			Запись.ВидБизнесПроцесса =  СсылкаНаЗадачу.БизнесПроцесс.ВидПроцесса;
	//			
	//			Запись.Документ = СписокОбъектов[0].Значение;
	//			
	//			Запись.Задача =  СсылкаНаЗадачу.Ссылка;
	//			
	//			Запись.Исполнитель = СсылкаНаЗадачу.Исполнитель;
	//			
	//			Если  СписокОбъектов[0].Значение.КонтрагентыДоговоры.Количество() > 0 Тогда
	//				
	//				Запись.ДоговорКонтрагента =  СписокОбъектов[0].Значение.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//				
	//				Запись.Контрагент  =  СписокОбъектов[0].Значение.КонтрагентыДоговоры[0].Контрагент;
	//				
	//			КонецЕсли; 
	//			
	//			Если  СписокОбъектов[0].Значение.ОрганизацииПодразделения.Количество() > 0 Тогда
	//				
	//				Запись.Подразделение  = СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение;
	//				
	//			КонецЕсли; 
	//			
	//			Запись.Сумма =  СписокОбъектов[0].Значение.СуммаДокумента;
	//			
	//			Запись.Инициатор   =  СсылкаНаЗадачу.Автор;
	//			
	//			Запись.Выполнена = СсылкаНаЗадачу.Выполнена;
	//			//
	//			Запрос1 = Новый Запрос;
	//			Запрос1.Текст = "ВЫБРАТЬ
	//			|	аДокументооборотСостояниеДокументов.СостояниеДокумента
	//			|ИЗ
	//			|	РегистрСведений.аДокументооборотСостояниеДокументов КАК аДокументооборотСостояниеДокументов
	//			|ГДЕ
	//			|	аДокументооборотСостояниеДокументов.КорпоративныйДокумент = &КорпоративныйДокумент";
	//			Запрос1.УстановитьПараметр("КорпоративныйДокумент",СписокОбъектов[0].Значение );
	//			Выборка1 = Запрос1.Выполнить().Выбрать();
	//			Пока Выборка1.Следующий() Цикл
	//				Запись.СостояниеДокумента  =  Выборка1.СостояниеДокумента;
	//			КонецЦикла;
	//			
	//			Запись.ДатаВыполненияПлан =    СсылкаНаЗадачу.ДатаВыполненияПлан;
	//			
	//			Если СсылкаНаЗадачу.Выполнена Тогда
	//				ЗапросРез = Новый Запрос;
	//				ЗапросРез.Текст = "ВЫБРАТЬ
	//				|	аДокументооборотРезультатыИсполнителейЗадачСрезПоследних.ПараметрРезультата.Наименование as Наименование,
	//				|	аДокументооборотРезультатыИсполнителейЗадачСрезПоследних.ЗначениеПараметра
	//				|ИЗ
	//				|	РегистрСведений.аДокументооборотРезультатыИсполнителейЗадач.СрезПоследних КАК аДокументооборотРезультатыИсполнителейЗадачСрезПоследних
	//				|ГДЕ
	//				|	аДокументооборотРезультатыИсполнителейЗадачСрезПоследних.Задача = &Задача";
	//				ЗапросРез.УстановитьПараметр("Задача",СсылкаНаЗадачу );
	//				ВыборкаРез = ЗапросРез.Выполнить().Выбрать();
	//				Пока ВыборкаРез.Следующий() Цикл
	//					Если ВыборкаРез.Наименование = "Выбор кнопками панели" Тогда
	//						Запись.Согласовано =   ВыборкаРез.ЗначениеПараметра;
	//					КонецЕсли;
	//					//
	//					Если ВыборкаРез.Наименование = "Текстовое сообщение" Тогда
	//						Запись.ТекстовыйРезультат =   ВыборкаРез.ЗначениеПараметра;
	//					КонецЕсли;
	//				КонецЦикла;
	//				Запись.ТипЗадач = Перечисления.аГруппировкиЗадач.ВыполненныеЗадачи;
	//				Запись.ДатаВыполненияФакт   =    СсылкаНаЗадачу.ДатаВыполненияФакт;
	//				//
	//			Иначе
	//				Запись.Согласовано =   "Не выполнена";
	//				Запись.ТипЗадач = Перечисления.аГруппировкиЗадач.НаходятсяВРаботе;
	//				Запись.ТекстовыйРезультат =   "Не выполнена";
	//				//
	//			КонецЕсли; 
	//		КонецЦикла; 
	//	КонецЕсли; 
	//	НЗ.Записать(Истина);
	//Попытка
	//	Если НетЗаписей Тогда
	//		НЗ = РегистрыСведений.pcru_ПараметрыВыданныхЗадач.СоздатьНаборЗаписей();
	//		НЗ.Отбор.Документ.Установить(СписокОбъектов[0].Значение, Истина);
	//		НЗ.Отбор.БизнесПроцесс.Установить(СсылкаНаПроцесс, Истина);
	//		НЗ.Отбор.Исполнитель.Установить(СсылкаНаЗадачу.Исполнитель, Истина);
	//		НЗ.Прочитать();
	//		Нашли_исполнителя = Ложь;
	//		Для каждого Запись  Из НЗ Цикл
	//			Если Запись.Исполнитель = СсылкаНаЗадачу.Исполнитель Тогда
	//				Запись = НЗ.Добавить();
	//				Запись.Задача = СсылкаНаЗадачу;
	//				Запись.ВидБизнесПроцесса =  СсылкаНаЗадачу.БизнесПроцесс.ВидПроцесса;
	//				Запись.БизнесПроцесс =  СсылкаНаЗадачу.БизнесПроцесс;
	//				Запись.ТипЗадач = Перечисления.аГруппировкиЗадач.НаходятсяВРаботе;
	//				Запись.Документ = СписокОбъектов[0].Значение;
	//				Запись.Выполнена =  СсылкаНаЗадачу.Выполнена;
	//				Запись.Согласовано = "Не выполнена";
	//				Запись.СостояниеДокумента = Справочники.аДокументооборотСостояниеДокументов.НаСогласовании;
	//				Запись.ТекстовыйРезультат = "Не выполнена";
	//				Запись.ДатаВыполненияПлан = СсылкаНаЗадачу.ДатаВыполненияПлан;
	//				Запись.Исполнитель = СсылкаНаЗадачу.Исполнитель;
	//				Если  СписокОбъектов[0].Значение.КонтрагентыДоговоры.Количество() > 0 Тогда
	//					Запись.ДоговорКонтрагента =  СписокОбъектов[0].Значение.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//					Запись.Контрагент  =  СписокОбъектов[0].Значение.КонтрагентыДоговоры[0].Контрагент;
	//				КонецЕсли; 
	//				Если  СписокОбъектов[0].Значение.ОрганизацииПодразделения.Количество() > 0 Тогда
	//					Запись.Подразделение  = СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение;
	//				КонецЕсли; 
	//				Запись.Сумма =  СписокОбъектов[0].Значение.СуммаДокумента;
	//				Запись.Инициатор   =  СсылкаНаЗадачу.Автор;
	//				Запись.Выполнена = СсылкаНаЗадачу.Выполнена;	//
	//				Запрос1 = Новый Запрос;
	//				Запрос1.Текст = "ВЫБРАТЬ
	//				|	аДокументооборотСостояниеДокументов.СостояниеДокумента
	//				|ИЗ
	//				|	РегистрСведений.аДокументооборотСостояниеДокументов КАК аДокументооборотСостояниеДокументов
	//				|ГДЕ
	//				|	аДокументооборотСостояниеДокументов.КорпоративныйДокумент = &КорпоративныйДокумент";
	//				Запрос1.УстановитьПараметр("КорпоративныйДокумент",СписокОбъектов[0].Значение );
	//				Выборка1 = Запрос1.Выполнить().Выбрать();
	//				Пока Выборка1.Следующий() Цикл
	//					Запись.СостояниеДокумента  =  Выборка1.СостояниеДокумента;
	//				КонецЦикла;
	//				Запись.ДатаВыполненияПлан =    СсылкаНаЗадачу.ДатаВыполненияПлан;
	//				Нашли_исполнителя = Истина;
	//			КонецЕсли;   	
	//		КонецЦикла; 
	//		Если не Нашли_исполнителя Тогда
	//			Запись = НЗ.Добавить();
	//			Запись.Задача = СсылкаНаЗадачу;
	//			Запись.ВидБизнесПроцесса =  СсылкаНаЗадачу.БизнесПроцесс.ВидПроцесса;
	//			Запись.БизнесПроцесс =  СсылкаНаЗадачу.БизнесПроцесс;
	//			Запись.ТипЗадач = Перечисления.аГруппировкиЗадач.НаходятсяВРаботе;
	//			Запись.Документ = СписокОбъектов[0].Значение;
	//			Запись.Выполнена =  СсылкаНаЗадачу.Выполнена;
	//			Запись.Согласовано = "Не выполнена";
	//			Запись.СостояниеДокумента = Справочники.аДокументооборотСостояниеДокументов.НаСогласовании;
	//			Запись.ТекстовыйРезультат = "Не выполнена";
	//			Запись.ДатаВыполненияПлан = СсылкаНаЗадачу.ДатаВыполненияПлан;
	//			Запись.Исполнитель = СсылкаНаЗадачу.Исполнитель;
	//			Если  СписокОбъектов[0].Значение.КонтрагентыДоговоры.Количество() > 0 Тогда
	//				Запись.ДоговорКонтрагента =  СписокОбъектов[0].Значение.КонтрагентыДоговоры[0].ДоговорКонтрагента;
	//				Запись.Контрагент  =  СписокОбъектов[0].Значение.КонтрагентыДоговоры[0].Контрагент;
	//			КонецЕсли; 
	//			Если  СписокОбъектов[0].Значение.ОрганизацииПодразделения.Количество() > 0 Тогда
	//				Запись.Подразделение  = СписокОбъектов[0].Значение.ОрганизацииПодразделения[0].Подразделение;
	//			КонецЕсли; 
	//			Запись.Сумма =  СписокОбъектов[0].Значение.СуммаДокумента;
	//			Запись.Инициатор   =  СсылкаНаЗадачу.Автор;
	//			Запись.Выполнена = СсылкаНаЗадачу.Выполнена;	//
	//			Запрос1 = Новый Запрос;
	//			Запрос1.Текст = "ВЫБРАТЬ
	//			|	аДокументооборотСостояниеДокументов.СостояниеДокумента
	//			|ИЗ
	//			|	РегистрСведений.аДокументооборотСостояниеДокументов КАК аДокументооборотСостояниеДокументов
	//			|ГДЕ
	//			|	аДокументооборотСостояниеДокументов.КорпоративныйДокумент = &КорпоративныйДокумент";
	//			Запрос1.УстановитьПараметр("КорпоративныйДокумент",СписокОбъектов[0].Значение );
	//			Выборка1 = Запрос1.Выполнить().Выбрать();
	//			Пока Выборка1.Следующий() Цикл
	//				Запись.СостояниеДокумента  =  Выборка1.СостояниеДокумента;
	//			КонецЦикла;
	//			Запись.ДатаВыполненияПлан =    СсылкаНаЗадачу.ДатаВыполненияПлан;
	//		КонецЕсли; 
	//		НЗ.Записать(Истина);
	//	КонецЕсли; 	
	//Исключение
	//КонецПопытки;
	//
	
	
	Возврат 0;
	
	
КонецФункции

Процедура ПриОтменеСогласования(Документ) Экспорт
	НЗ = РегистрыСведений.pcru_ПараметрыВыданныхЗадач.СоздатьНаборЗаписей();
	НЗ.Отбор.Документ.Установить(Документ, Истина);
	НЗ.Прочитать();
	НЗ.Очистить();
	НЗ.Записать();
КонецПроцедуры // ЗапускСогласования()
