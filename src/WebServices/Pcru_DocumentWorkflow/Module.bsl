

Функция NewDocument(ParamsStruct)
	УстановитьПривилегированныйРежим(Истина);
	ЧтениеJSON = Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку(ParamsStruct); 
	СтруктураДокумента= ПрочитатьJSON(ЧтениеJSON); 
	ЧтениеJSON.Закрыть();
	//СтруктураДокумента  = Новый Структура;
	Если не СтруктураДокумента.Свойство("DocumentId") Тогда
		Возврат "1:Нет Идентификатора";
	КонецЕсли;   
	Если не ЗначениеЗаполнено(СтруктураДокумента.DocumentId) Тогда
		Возврат "1:Нет Идентификатора";
	КонецЕсли; 
	сс = Документы.аДокументооборотКорпоративныйДокумент.НайтиПоРеквизиту("PCRU_ИдентификаторДиадок",СтруктураДокумента.DocumentId);	
	Если ЗначениеЗаполнено(сс) Тогда
		Возврат "2:Документ уже создан";
	КонецЕсли; 	
	Попытка
		НовДок = Документы.аДокументооборотКорпоративныйДокумент.СоздатьДокумент(); 
		Если не СтруктураДокумента.Свойство("Дата") Тогда
			НовДок.Дата = ТекущаяДата();
		Иначе
			Если СтруктураДокумента.Дата  =  "0001-01-01T00:00:00" Тогда
			
				 СтруктураДокумента.Дата  = СтруктураДокумента.ДатаУчета;
			
			КонецЕсли; 
			
			
			ДатаНорм =  СтруктураДокумента.Дата;
			ДатаНорм = СтрЗаменить(ДатаНорм,"-","");
			ДатаНорм = СтрЗаменить(ДатаНорм,":","");
			ДатаНорм = СтрЗаменить(ДатаНорм," ","");
			ДатаНорм = СтрЗаменить(ДатаНорм,"T","");
			ДатаНорм = Дата(ДатаНорм);
			//
			НовДок.ДатаОкончанияДействияДокумента= ДатаНорм;
			НовДок.Дата = ДатаНорм;
			//
		КонецЕсли; 
		//
		НовДок.PCRU_ИдентификаторДиадок = СтруктураДокумента.DocumentId;
		//
		Если не СтруктураДокумента.Свойство("Автор") Тогда
			НовДок.Автор = Справочники.Пользователи.НайтиПоНаименованию("USER");
		Иначе
			НовДок.Автор = Справочники.Пользователи.НайтиПоНаименованию(СтруктураДокумента.Автор);
		КонецЕсли; 
		//
		Если не СтруктураДокумента.Свойство("ВажностьДокумента") Тогда
			НовДок.ВажностьДокумента = Справочники.аДокументооборотВажностьОбъекта.НайтиПоНаименованию("Средняя");
		Иначе
			НовДок.ВажностьДокумента = Справочники.аДокументооборотВажностьОбъекта.НайтиПоНаименованию(СтруктураДокумента.ВажностьДокумента);
		КонецЕсли; 
		//
		Если не СтруктураДокумента.Свойство("ВидДокумента") Тогда
			НовДок.ВидДокумента = Справочники.аДокументооборотВидыДокументов.НайтиПоНаименованию("Заявка на оплату");
		Иначе
			НовДок.ВидДокумента = Справочники.аДокументооборотВидыДокументов.НайтиПоНаименованию(СтруктураДокумента.ВидДокумента);
		КонецЕсли;	
		//
		//Если не СтруктураДокумента.Свойство("ВидДокумента") Тогда
		//	НовДок.ВидДокумента = Справочники.аДокументооборотВидыДокументов.НайтиПоНаименованию("Заявка на оплату");
		//Иначе
		//	НовДок.ВидДокумента = Справочники.аДокументооборотВидыДокументов.НайтиПоНаименованию(СтруктураДокумента.ВидДокумента);
		//КонецЕсли;	
		НовДок.ГрифДоступа = Справочники.аДокументооборотГрифыДоступа.НайтиПоНаименованию("Стандартный");
		НовДок.КорпоративнаяПапка= Справочники.аДокументооборотКорпоративныеПапки.НайтиПоНаименованию("01. Документы организации");
		Если  СтруктураДокумента.Свойство("НаименованиеДокумента") Тогда
			НовДок.НаименованиеДокумента= СтруктураДокумента.НаименованиеДокумента;
		КонецЕсли;	
		Если  СтруктураДокумента.Свойство("Подразделение") Тогда
			НовДок.ОсновноеПодразделение= Справочники.Подразделения.НайтиПоНаименованию(СтруктураДокумента.Подразделение);
			НовСтр = НовДок.ОрганизацииПодразделения.Добавить();
			НовСтр.Подразделение = НовДок.ОсновноеПодразделение;
		КонецЕсли;	
		Если  СтруктураДокумента.Свойство("ИНН") Тогда
			НовДок.ОсновнойКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СтруктураДокумента.ИНН);
			НовСтрКД = НовДок.КонтрагентыДоговоры.Добавить();
			НовСтрКД.Контрагент =НовДок.ОсновнойКонтрагент;
			Если  СтруктураДокумента.Свойство("ДоговорКонтрагента") Тогда
				НовСтрКД.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(СтруктураДокумента.ДоговорКонтрагента);
			КонецЕсли;	
		КонецЕсли;	
		//
		Если  СтруктураДокумента.Свойство("Номер") Тогда
			НовДок.РегистрационныйНомер = СтруктураДокумента.Номер;
		КонецЕсли;
		//
		Если  СтруктураДокумента.Свойство("СодержаниеДокумента") Тогда
			НовДок.СодержаниеДокумента= СтруктураДокумента.СодержаниеДокумента;
		КонецЕсли;
		//
		Если  СтруктураДокумента.Свойство("СуммаДокументаЗначение") Тогда
			НовДок.СуммаДокумента= СтруктураДокумента.СуммаДокументаЗначение;
		КонецЕсли;
		//
		НовДок.ОткрыватьВПростомРежиме= Ложь;
		НовДок.ПрисутствуютПолучатели = Истина;
		НовДок.РазрешитьИзмененияТолькоАвтором = Ложь;
		НовДок.ДокументВАрхиве = Ложь;
		НовДок.Резолюция= "";
		НовДок.ТипДокумента= Справочники.аДокументооборотТипыНосителейДокументов.НайтиПоНаименованию("Оригинал документа");
		НовДок.ТипХраненияФайлов= Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		Если НовДок.ВидДокумента.Наименование = "Заявка на оплату" Тогда
			НовДок.пкру_РаспределениеЗатрат.очистить();
			Если ЗначениеЗаполнено(НовДок.ОсновнойКонтрагент)  Тогда
				Для каждого СтрокаТЧ Из НовДок.ОсновнойКонтрагент.пкру_РаспределениеЗатрат Цикл
					НоваяСтрока = 	НовДок.пкру_РаспределениеЗатрат.Добавить();
					НоваяСтрока.пкру_CostCentr = СтрокаТЧ.пкру_CostCentr;
					НоваяСтрока.пкру_СтатьяРасходов = СтрокаТЧ.пкру_СтатьяРасходов;	
					НоваяСтрока.Сумма = НовДок.СуммаДокумента/НовДок.ОсновнойКонтрагент.пкру_РаспределениеЗатрат.Количество();
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;   
		//
		Если  СтруктураДокумента.Свойство("Комментарий") Тогда
			НовДок.Комментарий = СтруктураДокумента.Комментарий;
		Иначе
			НовДок.Комментарий = "Загружено из внешней программы";
		КонецЕсли;
        //
		НовДок.Записать(РежимЗаписиДокумента.Запись);	
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки; 
	//
	СтруктураНомера=аДОРаботаСДокументами.СформироватьНомерДокумента(НовДок.Ссылка, Ложь); //НомерЧисло, СтрокаНомера, ВидДокументаНумератора, ОрганизацияНумератора
	НовДок.Номер=СтруктураНомера.СтрокаНомера;
	НовДок.Записать(РежимЗаписиДокумента.Запись);	
	//
	МЗ = РегистрыСведений.аДокументооборотСостояниеДокументов.СоздатьМенеджерЗаписи();
	МЗ.КорпоративныйДокумент = НовДок.Ссылка;
	МЗ.СостояниеДокумента = Справочники.аДокументооборотСостояниеДокументов.НайтиПоНаименованию("Новый");
	МЗ.Записать(Истина);
	//
	Если  СтруктураДокумента.Свойство("СписокПолучателей") Тогда
		НовДок.СписокПолучателей.очистить();
		Для каждого СтрокаТЧ Из СтруктураДокумента.СписокПолучателей Цикл
			МЗ = РегистрыСведений.аДОПользователиОбъектов.СоздатьМенеджерЗаписи();
			МЗ.Объект = НовДок.Ссылка;
			МЗ.Пользователь = Справочники.Пользователи.НайтиПоНаименованию(СтрокаТЧ.Получатель);
			МЗ.Записать(Истина);
			//
			НоваяСтрока = НовДок.СписокПолучателей.Добавить();
			НоваяСтрока.Получатель = Справочники.Пользователи.НайтиПоНаименованию(СтрокаТЧ.Получатель);
		КонецЦикла;  
		НовДок.Записать(РежимЗаписиДокумента.Запись);	
	КонецЕсли;
	//Добавляем файл - он в свойстве данные закодирован Base64
	Попытка
		ИмяФ = КаталогВременныхФайлов()+СтруктураДокумента.FileName; 
		ДД = Base64Значение(СтруктураДокумента.Данные);
		ДД.Записать( ИмяФ);
		СсылкаНаФайл = аДОРаботаСФайлами.СоздатьФайлВладельца(ИмяФ, НовДок.Ссылка); 
		НовДок.СсылкиНаФайлы.Очистить();
		СтркаФайл = НовДок.СсылкиНаФайлы.Добавить();
		СтркаФайл.Файл = СсылкаНаФайл;
		СтркаФайл.Статус = Справочники.аДокументооборотСтатусыФайловДокументов.Основной;
		УдалитьФайлы(ИмяФ);
		НовДок.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Pcru_СоответствиеДокументовЗапускаемыхПроцессов.ВидПроцесса КАК ВидПроцесса
	               |ИЗ
	               |	РегистрСведений.Pcru_СоответствиеДокументовЗапускаемыхПроцессов КАК Pcru_СоответствиеДокументовЗапускаемыхПроцессов
	               |ГДЕ
	               |	Pcru_СоответствиеДокументовЗапускаемыхПроцессов.ВидДокумента = &ВидДокумента";
	Запрос.УстановитьПараметр("ВидДокумента",НовДок.ВидДокумента );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			аДОКорпоративныеПроцессы.СтартоватьБизнесПроцессПоДокументуИШаблону(НовДок.Ссылка, Выборка.ВидПроцесса);
		Исключение
			Возврат ОписаниеОшибки();
		КонецПопытки; 
	КонецЦикла;
	 
	//Если НовДок.ВидДокумента.Наименование = "Заявка на оплату" Тогда
	//		Попытка
	//		аДОКорпоративныеПроцессы.СтартоватьБизнесПроцессПоДокументуИШаблону(НовДок.Ссылка, Справочники.аДокументооборотВидыПроцессов.НайтиПоНаименованию("Согласование заявки на оплату"));
	//	Исключение
	//		Возврат ОписаниеОшибки();
	//	КонецПопытки; 
	//
	//КонецЕсли;
	//Если НовДок.ВидДокумента.Наименование = "Входящий" Тогда
	//	Попытка
	//		аДОКорпоративныеПроцессы.СтартоватьБизнесПроцессПоДокументуИШаблону(НовДок.Ссылка, Справочники.аДокументооборотВидыПроцессов.НайтиПоНаименованию("Согласование заявки на оплату"));
	//	Исключение
	//		Возврат ОписаниеОшибки();
	//	КонецПопытки; 
	//КонецЕсли;
	Возврат "OK";
КонецФункции


Функция GetDocStatus(ID)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	аДокументооборотСостояниеДокументов.СостояниеДокумента.Наименование КАК СостояниеДокументаНаименование
	|ИЗ
	|	РегистрСведений.аДокументооборотСостояниеДокументов КАК аДокументооборотСостояниеДокументов
	|ГДЕ
	|	аДокументооборотСостояниеДокументов.КорпоративныйДокумент.PCRU_ИдентификаторДиадок = &PCRU_ИдентификаторДиадок";
	Запрос.УстановитьПараметр("PCRU_ИдентификаторДиадок",ID );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.СостояниеДокументаНаименование;
	КонецЦикла;
	Возврат "Документ не существует";	
КонецФункции


Функция NewContragent(JsonStr) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ЧтениеJSON = Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку(JsonStr); 
	СтруктураКонтрагента= ПрочитатьJSON(ЧтениеJSON); 
	ЧтениеJSON.Закрыть();
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = "ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И Контрагенты.Наименование = &Наименование";
	Запрос1.УстановитьПараметр("ИНН", СтруктураКонтрагента.ИНН);
	Запрос1.УстановитьПараметр("КПП", СтруктураКонтрагента.КПП);
	Запрос1.УстановитьПараметр("Наименование", СтруктураКонтрагента.Наименование);
	Результат1 = Запрос1.Выполнить();
	Выборка1 = Результат1.Выбрать();
	
	Если Выборка1.Следующий() тогда
		СпрОб = Выборка1.Ссылка.ПолучитьОбъект();
	Иначе	
		СпрОб = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;
	//	
	//	
	//	{
	//"Код": "00-015707",
	//"ИНН": "9717012581",
	//"КПП": "771701001",
	//"РодительКод": "         ",
	//"Наименование": "ОНЛАЙН РЕГИОНЫ ООО",
	//"НаименованиеПолное": "ООО \"ОНЛАЙН РЕГИОНЫ\" 1",
	//"Комментарий": " ",
	//"ЮридическоеФизическоеЛицо": "ЮридическоеЛицо",
	//"КИ": [
	//{
	//"Тип": "Адрес",
	//"Регион": "129164",
	//"Вид": "ЮрАдресКонтрагента",
	//"Представление": "129164, Москва г, Ракетный б-р, дом № 16, этаж 7, помещение Хххi, помещение 23"
	//},
	//{
	//"Тип": "Адрес",
	//"Регион": "129164",
	//"Вид": "ФактАдресКонтрагента",
	//"Представление": "129164, Москва г, Ракетный б-р, дом № 16, этаж 7, помещение Хххi, помещение 23"
	//},
	//{
	//"Тип": "Адрес",
	//"Регион": "129164",
	//"Вид": "ПочтовыйАдресКонтрагента",
	//"Представление": "129164, Москва г, Ракетный б-р, дом № 16, этаж 7, помещение Хххi, помещение 23"
	//}
	//],
	//"БанкКод": "044525593",
	//"БанкНаименование": "АО \"АЛЬФА-БАНК\"",
	//"БанкКоррСчет": "30101810200000000593",
	//"БанкГород": "г. Москва",
	//"БанкАдрес": "ул Каланчёвская, 27",
	//"БанкТелефоны": "(495) 620-91-91",
	//"СчетНаименование": "40702810301600004715, АО \"АЛЬФА-БАНК\"",
	//"НомерСчета": "40702810301600004715",
	//"ТекстКорреспондента": "",
	//"ДатаОткрытия": "0001-01-01T00:00:00",
	//"ДатаЗакрытия": "0001-01-01T00:00:00",
	//"ТекстНазначенияПлатежа": ""
	//}
	//}
	Если СтруктураКонтрагента.РодительКод <> "" тогда
		СпрОб.Родитель = Справочники.Контрагенты.НайтиПоКоду(СтруктураКонтрагента.РодительКод);
	КонецЕсли;
	СпрОб.Наименование = СтруктураКонтрагента.Наименование;  //СтруктураКонтрагента.Наименование = "КПД ООО"
	Если Не ЗначениеЗаполнено(Справочники.Контрагенты.НайтиПоКоду(СтруктураКонтрагента.Код)) Тогда 
		СпрОб.Код = СтруктураКонтрагента.Код;
	КонецЕсли;
	СпрОб.НаименованиеПолное = СтруктураКонтрагента.НаименованиеПолное;
	СпрОб.КПП = СтруктураКонтрагента.КПП;
	СпрОб.ИНН = СтруктураКонтрагента.ИНН;
	СпрОб.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо[СтруктураКонтрагента.ЮридическоеФизическоеЛицо]; 
	//?(СтруктураКонтрагента.ЮридическоеФизическоеЛицо="ЮридическоеЛицо",Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	Если  СтрЧислоВхождений(СпрОб.Комментарий,СтруктураКонтрагента.Комментарий) = 0 тогда 
		СпрОб.Комментарий = СпрОб.Комментарий +" "+ СтруктураКонтрагента.Комментарий;
	КонецЕсли;
	//
	Для каждого СтрокаКИ Из СтруктураКонтрагента.КИ Цикл
		СтрокаКИНов = СпрОб.КонтактнаяИнформация.Добавить();
		Попытка
			СтрокаКИНов.Тип = Перечисления.ТипыКонтактнойИнформации[СтрокаКИ.Тип];
		Исключение
		КонецПопытки; 
		Попытка
			СтрокаКИНов.Вид = Справочники.ВидыКонтактнойИнформации[СтрокаКИ.Вид];
		Исключение
		КонецПопытки; 
		СтрокаКИНов.Представление = СтрокаКИ.Представление;
		//
		СтрокаКИ.Свойство("Регион",СтрокаКИНов.Регион);
		СтрокаКИ.Свойство("НомерТелефона",СтрокаКИНов.НомерТелефона);
	КонецЦикла; 
	СпрОб.Записать();
	//
	//Банк =  Справочники.КлассификаторБанковРФ.НайтиПоКоду(СтруктураКонтрагента.БанкКод);
	//Если не ЗначениеЗаполнено(Банк)  Тогда
	//	БанкОбъект = Справочники.КлассификаторБанковРФ.СоздатьЭлемент();
	//	БанкОбъект.КоррСчет = СтруктураКонтрагента.БанкКоррСчет;
	//	БанкОбъект.Город = СтруктураКонтрагента.БанкГород;
	//	БанкОбъект.Адрес = СтруктураКонтрагента.БанкАдрес
	//	БанкОбъект.Телефоны = СтруктураКонтрагента.БанкТелефоны;
	//	БанкОбъект.Код = СтруктураКонтрагента.БанкКод;
	//	БанкОбъект.Наименование = СтруктураКонтрагента.БанкНаименование;
	//	БанкОбъект.Записать();
	//	Банк =	БанкОбъект.Ссылка;
	//КонецЕсли; 
	////
	БанковскийСчет	=	Справочники.БанковскиеСчета.СоздатьЭлемент();
	//	БанковскийСчет.Банк = Банк;
	//	БанковскийСчет.БанкДляРасчетов = Банк;
	Попытка
		БанковскийСчет.Наименование = СтруктураКонтрагента.БанкНаименование;
		БанковскийСчет.НаименованиеБанка = СтруктураКонтрагента.БанкНаименование;
		БанковскийСчет.КоррСчетБанка = СтруктураКонтрагента.БанкКоррСчет;
		БанковскийСчет.ГородБанка = СтруктураКонтрагента.БанкГород;
		БанковскийСчет.ТелефоныБанка = СтруктураКонтрагента.БанкТелефоны;
		БанковскийСчет.АдресБанка = СтруктураКонтрагента.БанкАдрес;
		БанковскийСчет.БИКБанкаДляРасчетов = СтруктураКонтрагента.БанкКод;
		БанковскийСчет.ТекстКорреспондента = СтруктураКонтрагента.ТекстКорреспондента;
		БанковскийСчет.КоррСчетБанкаДляРасчетов = СтруктураКонтрагента.БанкКоррСчет;
		БанковскийСчет.ГородБанкаДляРасчетов = СтруктураКонтрагента.БанкГород;
		БанковскийСчет.АдресБанкаДляРасчетов = СтруктураКонтрагента.БанкАдрес;
		БанковскийСчет.ТелефоныБанкаДляРасчетов = СтруктураКонтрагента.БанкТелефоны;
		БанковскийСчет.ТекстНазначенияПлатежа = СтруктураКонтрагента.ТекстНазначенияПлатежа;
		БанковскийСчет.ДатаОткрытия = СтруктураКонтрагента.ДатаОткрытия;
		БанковскийСчет.ДатаЗакрытия = СтруктураКонтрагента.ДатаЗакрытия;
		БанковскийСчет.НомерСчета = СтруктураКонтрагента.НомерСчета;
	Исключение
		БанковскийСчет.Наименование = "";
		БанковскийСчет.НаименованиеБанка = "";
		БанковскийСчет.КоррСчетБанка = "";
		БанковскийСчет.ГородБанка = "";
		БанковскийСчет.ТелефоныБанка = "";
		БанковскийСчет.АдресБанка = "";
		БанковскийСчет.БИКБанкаДляРасчетов = "";
		БанковскийСчет.ТекстКорреспондента = "";
		БанковскийСчет.КоррСчетБанкаДляРасчетов ="";
		БанковскийСчет.ГородБанкаДляРасчетов = "";
		БанковскийСчет.АдресБанкаДляРасчетов = "";
		БанковскийСчет.ТелефоныБанкаДляРасчетов = "";
		БанковскийСчет.ТекстНазначенияПлатежа = "";
		БанковскийСчет.ДатаОткрытия = "";
		БанковскийСчет.ДатаЗакрытия = "";
		БанковскийСчет.НомерСчета = "";
	КонецПопытки;
	БанковскийСчет.Владелец = СпрОб.Ссылка;
	БанковскийСчет.Записать();
	//
	//ОбъектКонтактныеЛицаКонтрагентов = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
	//ОбъектКонтактныеЛицаКонтрагентов.Владелец = СпрОб.Ссылка;
	//ОбъектКонтактныеЛицаКонтрагентов.Наименование =  СтруктураКонтрагента.КонтактныеДанные;
	//ОбъектКонтактныеЛицаКонтрагентов.КонтактныеДанные =  СтруктураКонтрагента.КонтактныеДанные;
	//ОбъектКонтактныеЛицаКонтрагентов.Записать();
	
	СпрОб = Неопределено;
	
	Return  "OK";
КонецФункции

Функция GetCostCentrList()
	Стр = Новый Структура;
	Массив =  Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	пкру_CostCentr.Наименование КАК Наименование
	|ИЗ
	|	Справочник.пкру_CostCentr КАК пкру_CostCentr";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	       Массив.Добавить(Выборка.Наименование);
	КонецЦикла;
	Стр.Вставить("CostCenters",Массив);
	Массив = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	пкру_СтатьиРасходов.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.пкру_СтатьиРасходов КАК пкру_СтатьиРасходов";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	       Массив.Добавить(Выборка.Наименование);
	КонецЦикла;
	Стр.Вставить("CostItem",Массив);
	Возврат Pcru_WSWORKS.СтруктуруВСтрокуJSON(Стр);
КонецФункции


Функция NewCostCentr(Name)
	УстановитьПривилегированныйРежим(Истина);
	СпрОб = Справочники.пкру_CostCentr.СоздатьЭлемент();
	СпрОб.Наименование = Name;
	СпрОб.Записать();
	Возврат "ОК";
КонецФункции

Функция NewCostItem(Name)
	УстановитьПривилегированныйРежим(Истина);
	СпрОб = Справочники.пкру_СтатьиРасходов.СоздатьЭлемент();
	СпрОб.Наименование = Name;
	СпрОб.Записать();
	Возврат "ОК";
КонецФункции

Функция GetUnitList()
	СтрJSON = "";
	Масс = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Подразделения.Код КАК Код,
	|	Подразделения.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Стр = Новый Структура;
		Стр.Вставить("Код",Выборка.Код);
		Стр.Вставить("Наименование",Выборка.Наименование);
		Масс.Добавить(Стр);
	КонецЦикла;
	Стр = Новый Структура;
	Стр.Вставить("Массив",Масс);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Стр ); 
	СтрJSON = ЗаписьJSON.Закрыть();
	Возврат СтрJSON; 
		
		
КонецФункции

Функция LoadContragent(JsonStr)
	ЧтениеJSON = Новый ЧтениеJSON(); 
	ЧтениеJSON.УстановитьСтроку(JsonStr); 
	СтруктураКонтрагента= ПрочитатьJSON(ЧтениеJSON); 
	ЧтениеJSON.Закрыть();
	
	Возврат  "0";	
	
	//Запрос1 = Новый Запрос;
	//		Запрос1.Текст = "ВЫБРАТЬ
	//		|	Контрагенты.Ссылка КАК Ссылка
	//		|ИЗ
	//		|	Справочник.Контрагенты КАК Контрагенты
	//		|ГДЕ
	//		|	Контрагенты.ИНН = &ИНН
	//		|	И Контрагенты.КПП = &КПП
	//		|	И Контрагенты.Наименование = &Наименование";
	//		Запрос1.УстановитьПараметр("ИНН", Выборка.ИНН);
	//		Запрос1.УстановитьПараметр("КПП", Выборка.КПП);
	//		Запрос1.УстановитьПараметр("Наименование", Выборка.Наименование);
	//		Результат1 = Запрос1.Выполнить();
	//		РезультатВыборка = Результат1.Выбрать();

	//		Если РезультатВыборка.Следующий() тогда
	//			СпрОб = РезультатВыборка.Ссылка.ПолучитьОбъект();
	//		Иначе	
	//			СпрОб = Справочники.Контрагенты.СоздатьЭлемент();
	//		КонецЕсли;
	//		
	//		Если Выборка.РодительКод <> "" тогда
	//			СпрОб.Родитель = Справочники.Контрагенты.НайтиПоКоду(Выборка.РодительКод);
	//		КонецЕсли;
	//		СпрОб.Наименование = Выборка.Наименование;  //Выборка.Наименование = "КПД ООО"
	//		Если Не ЗначениеЗаполнено(Справочники.Контрагенты.НайтиПоКоду(Выборка.Код)) Тогда 
	//			СпрОб.Код = Выборка.Код;
	//		КонецЕсли;
	//		СпрОб.НаименованиеПолное = Выборка.НаименованиеПолное;
	//		/////////////////////////////////////////////////////
	//		СтрокаКИ = СпрОб.КонтактнаяИнформация.Добавить();
	//		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	//		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	//		СтрокаКИ.Представление = Выборка.АдресДоставки;
	//		СтрокаКИ.Регион = Выборка.АдресДоставкиИндекс;
	//		//////////////////////////////////////////////////////////			
	//		СтрокаКИ = СпрОб.КонтактнаяИнформация.Добавить();
	//		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	//		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	//		СтрокаКИ.Представление = Выборка.ЮридическийАдрес;
	//		СтрокаКИ.Регион = Выборка.ЮридическийАдресИндекс;
	//		//////////////////////////////////////////////////////////			
	//		СтрокаКИ = СпрОб.КонтактнаяИнформация.Добавить();
	//		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	//		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента ;
	//		СтрокаКИ.Представление = Выборка.Телефон;
	//		СтрокаКИ.НомерТелефона = Выборка.Телефон;
	//		
	//		
	//		
	//		СпрОб.КПП = Выборка.КПП;
	//		СпрОб.ИНН = Выборка.ИНН;
	//		
	//		
	//		Если  СтрЧислоВхождений(СпрОб.Комментарий,Выборка.Коментарий) = 0 тогда 
	//			СпрОб.Комментарий = СпрОб.Комментарий +" "+ Выборка.Коментарий;
	//		КонецЕсли;
	//		
	//		СпрОб.ЮридическоеФизическоеЛицо = ?(Выборка.ЮрФизЛицо="Физ",Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	//		СпрОб.Записать();
	//		
	//		БанковскийСчет	=	Справочники.БанковскиеСчета.СоздатьЭлемент();
	//		БанковскийСчет.Наименование = Выборка.НомерСчета;
	//		БанковскийСчет.НомерСчета = Выборка.НомерСчета;
	//		БанковскийСчет.Владелец = СпрОб.Ссылка;
	//		БанковскийСчет.Записать();
	//		
	//		//ОбъектКонтактныеЛицаКонтрагентов = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
	//		//ОбъектКонтактныеЛицаКонтрагентов.Владелец = СпрОб.Ссылка;
	//		//ОбъектКонтактныеЛицаКонтрагентов.Наименование =  Выборка.КонтактныеДанные;
	//		//ОбъектКонтактныеЛицаКонтрагентов.КонтактныеДанные =  Выборка.КонтактныеДанные;
	//		//ОбъектКонтактныеЛицаКонтрагентов.Записать();
	//		
	//		СпрОб = Неопределено;

КонецФункции

//	Для каждого СтрокаТЧ Из Выборка.пкру_РаспределениеЗатрат.Unload() Цикл
//		НоваяСтрока = 	НовДок.пкру_РаспределениеЗатрат.Добавить();
//		НоваяСтрока.пкру_CostCentr = Справочники.пкру_CostCentr.НайтиПоНаименованию(СтрокаТЧ.пкру_CostCentr.Description);
//		Если не ЗначениеЗаполнено(НоваяСтрока.пкру_CostCentr) Тогда
//			НКЦ =  Справочники.пкру_CostCentr.СоздатьЭлемент();
//			НКЦ.Наименование = СтрокаТЧ.пкру_CostCentr.Description;
//			НКЦ.Записать();
//			НоваяСтрока.пкру_CostCentr =  НКЦ.Ссылка;
//		КонецЕсли; 
//		НоваяСтрока.пкру_СтатьяРасходов = Справочники.пкру_СтатьиРасходов.НайтиПоНаименованию(СтрокаТЧ.пкру_СтатьяРасходов.Description);
//		Если не ЗначениеЗаполнено(НоваяСтрока.пкру_СтатьяРасходов) Тогда
//			НКЦ =  Справочники.пкру_СтатьиРасходов.СоздатьЭлемент();
//			НКЦ.Наименование = СтрокаТЧ.пкру_СтатьяРасходов.Description;
//			НКЦ.Записать();
//			НоваяСтрока.пкру_СтатьяРасходов =  НКЦ.Ссылка;
//		КонецЕсли; 
//		НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
//	КонецЦикла;