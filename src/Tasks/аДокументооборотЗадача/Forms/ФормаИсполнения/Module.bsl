
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция НаименованиеВидаДокумента()
	Попытка
		СписокДокументов=аДОКорпоративныеПроцессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Истина);
		Если СписокДокументов.Количество()=0 Тогда
			Возврат "";
		Иначе
			Возврат СписокДокументов[0].Значение.ВидДокумента.Наименование;
		КонецЕсли;
	Исключение
		Возврат "";
	КонецПопытки; 	
КонецФункции // НаименованиеВидаДокумента()

&НаКлиенте
Процедура Pcru_ПриОткрытииПеред(Отказ)
	//Если НаименованиеВидаДокумента() = "Заявка на оплату" Тогда
	//	ПараметрыФормы=Новый Структура; 
	//	ПараметрыФормы.Вставить("Ключ",Объект.Ссылка); 
	//	ОткрытьФорму("Задача.аДокументооборотЗадача.Форма.ФормаИсполнения1",ПараметрыФормы); 
	//	ЭтаФорма.Закрыть(); 
	//КонецЕсли;
	//
	//Если НаименованиеВидаДокумента() = "Список задач для Глав Отделов" Тогда
	//	ПараметрыФормы=Новый Структура; 
	//	ПараметрыФормы.Вставить("Ключ",Объект.Ссылка); 
	//	ОткрытьФорму("Документ.аДокументооборотКорпоративныйДокумент.Форма.ФормаДокументаПоручение",ПараметрыФормы); 
	//	ЭтаФорма.Закрыть(); 
	//КонецЕсли;
	//
	//
	//Если НаименованиеВидаДокумента() = "Входящий" Тогда
	//	ПараметрыФормы=Новый Структура; 
	//	ПараметрыФормы.Вставить("Ключ",Объект.Ссылка); 
	//	ОткрытьФорму("Документ.аДокументооборотКорпоративныйДокумент.Форма.ФормаДокумента2",ПараметрыФормы); 
	//	ЭтаФорма.Закрыть(); 
	//КонецЕсли;
	Если СТрока(Объект.Исполнитель) = "Sergey V. Ivanov" Тогда
		НШ = Новый Шрифт(Элементы.ТекстЗаданияФорматированный.Шрифт,,40);
		Элементы.ТекстЗаданияФорматированный.Шрифт = НШ;
		Элементы.ТекстЗаданияФорматированный.ЦветТекста = Новый Цвет(255,69,0);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура Pcru_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	УстановитьПривилегированныйРежим(Истина);
	СписокДокументов=аДОКорпоративныеПроцессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Истина);
	Если СписокДокументов.Количество() = 0 Тогда
		СписокЗадачПоДокументу3.Параметры.УстановитьЗначениеПараметра("Документ", Документы.аДокументооборотКорпоративныйДокумент.ПустаяСсылка());
		СписокЗадачПоДокументу3.Параметры.УстановитьЗначениеПараметра("Дата1", ТекущаяДата());
		СписокЗадачПоДокументу3.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Выбор кнопками панели"));
		СписокЗадачПоДокументу3.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата2", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Текстовое сообщение"));
		СписокЗадачПоДокументу1.Параметры.УстановитьЗначениеПараметра("Документ",Документы.аДокументооборотКорпоративныйДокумент.ПустаяСсылка());
		СписокЗадачПоДокументу1.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Выбор кнопками панели"));
		Возврат;
	Иначе
		Попытка
			ПервыйДокумент                    = СписокДокументов[0].Значение;
			Если ПервыйДокумент.КонтрагентыДоговоры.Количество() > 0 Тогда
				ЭтаФорма.pcru_договорКонтрагента = ПервыйДокумент.КонтрагентыДоговоры[0].ДоговорКонтрагента;
				ЭтаФорма.pcru_Контрагент         = ПервыйДокумент.КонтрагентыДоговоры[0].Контрагент;
			КонецЕсли;
			Если ПервыйДокумент.ОрганизацииПодразделения.Количество() > 0 Тогда
				ЭтаФорма.PCRU_Подразделение      = ПервыйДокумент.ОрганизацииПодразделения[0].Подразделение;
			КонецЕсли;
			ЭтаФорма.pcru_Комментарий         = ПервыйДокумент.Комментарий;
		Исключение
		КонецПопытки; 
		// выяснить для чего сей бред*****************************************
		//Попытка
		//	ПервыйДокумент.ПолучитьОбъект.Записать(РежимЗаписиДокумента.Запись);
		//Исключение
		//КонецПопытки; 
		Элементы.пкру_РаспределениеЗатрат.ТолькоПросмотр = (ЭтаФорма.Объект.Наименование <> "ЗаполнениеРеквизитов");
		Элементы.ТабКнопки.Видимость                     = (ЭтаФорма.Объект.Наименование = "ЗаполнениеРеквизитов");
		ЭтаФорма.pcru_ОкончательныйСчет                  = pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(ПервыйДокумент, "ОкончательныйСчет");
		ЭтаФорма.pcru_ОписаниеТендера                    = pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(ПервыйДокумент, "ОписаниеТендера");
		ЭтаФорма.pcru_Предоплата                         = pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(ПервыйДокумент, "Предоплата");
		ЭтаФорма.pcru_ЧастичныйПлатеж                    = pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(ПервыйДокумент, "ЧастичныйПлатеж");
		ЭтаФорма.pcru_ЭтоТендер                          = pcru_БизнесПроцессы.ПолучитьЗначениеДопРеквизита(ПервыйДокумент, "ЭтоТендер");
		ЭтаФорма.pcru_ОплатитьДо                         = ПервыйДокумент.ДатаОкончанияДействияДокумента;
		Для каждого СтрокаРаспред Из ПервыйДокумент.пкру_РаспределениеЗатрат Цикл
			ЭтаФорма.pcru_Сумма             = ЭтаФорма.pcru_Сумма + СтрокаРаспред.Сумма;
			//
			НоваяСтрока                     = ЭтаФорма.пкру_РаспределениеЗатрат.Добавить();
			НоваяСтрока.ТипЗатрат           = СтрокаРаспред.ТипЗатрат;
			НоваяСтрока.пкру_CostCentr      = СтрокаРаспред.пкру_CostCentr;
			НоваяСтрока.пкру_СтатьяРасходов = СтрокаРаспред.пкру_СтатьяРасходов;
			НоваяСтрока.Сумма               = СтрокаРаспред.Сумма;
		КонецЦикла; 
		СписокЗадачПоДокументу.Параметры.УстановитьЗначениеПараметра("Документ", ПервыйДокумент);
		//СписокЗадачПоДокументу3.Параметры.УстановитьЗначениеПараметра("Дата1", ТекущаяДата());
		//СписокЗадачПоДокументу.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Выбор кнопками панели"));
		//СписокЗадачПоДокументу.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата2", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Текстовое сообщение"));
		//
		//		СписокЗадачПоДокументу1.Параметры.УстановитьЗначениеПараметра("Документ", ПервыйДокумент);
		//СписокЗадачПоДокументу1.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Выбор кнопками панели"));
	КонецЕсли;
	//СписокДокументов=аДОКорпоративныеПроцессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Истина);
	//Если СписокДокументов.Количество()=0 Тогда
	//	СписокЗадачПоДокументу.Параметры.УстановитьЗначениеПараметра("Документ",Документы.аДокументооборотКорпоративныйДокумент.ПустаяСсылка());
	//	СписокЗадачПоДокументу.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Выбор кнопками панели"));
	//	Возврат;
	//Иначе
	//	Попытка
	//		ПервыйДокумент=СписокДокументов[0].Значение;
	//	Исключение
	//	КонецПопытки; 
	//	
	//	Попытка
	//		ПервыйДокумент.ПолучитьОбъект.Записать(РежимЗаписиДокумента.Запись);
	//	Исключение
	//	КонецПопытки; 
	//КонецЕсли;
	СписокЗадачПоДокументу3.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", БизнесПроцесс);
	//    СписокЗадачПоДокументу.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата1", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Текстовое сообщение"));
	//    СписокЗадачПоДокументу.Параметры.УстановитьЗначениеПараметра("ПараметрРезультата2", ПланыВидовХарактеристик.аДокументооборотРезультатыИсполнителейЗадач.НайтиПоНаименованию("Выбор кнопками панели"));
	///******************************************************************************************************************************
	Если Врег(СокрЛП(БизнесПроцесс.ВидПроцесса.Наименование)) =  Врег(СокрЛП("Согласование заявки на оплату")) Тогда
		Элементы.ГруппаЗНО.Видимость = Истина;
		Элементы.ГруппаДокумент.Видимость = Ложь;
	Иначе
		Элементы.ГруппаЗНО.Видимость = Ложь;
		Элементы.ГруппаДокумент.Видимость = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Pcru_ПриЗакрытииВместо(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли; 
	
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаВыполнения) И НЕ Параметры.Ключ.Пустая() Тогда
		//первая запись новой задачи
		ДатаНачалаВыполнения=ДатаВремяОткрытияФормы;
		СтруктураПараметровЗадачи=Новый Структура("ДатаНачалаВыполнения", ДатаНачалаВыполнения);
		аДОЗадачиПроцессов.СохранитьСтруктуруПараметровЗадачи(СтруктураПараметровЗадачи, Объект.Ссылка);
		
	КонецЕсли;
	
	Если БылаНеВыполненной Тогда
		//обновляем метрику только для невыполненных задач
		ЗаписатьМетрикуЗадачи();
	Иначе
		//задача на момент открытия уже была выполнена
		
	КонецЕсли;
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция УсловиеКоличества1(СписокДокументов)
	
	Возврат СписокДокументов[0].Значение.СсылкиНаФайлы.Количество() > 0;
	
КонецФункции // УсловиеКоличества()

Функция ПолучитьПервыйЛокумент(СписокДокументов)
	Возврат СписокДокументов[0].Значение.СсылкиНаФайлы[0].Файл;
КонецФункции 

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	//**
	Если КоличествоСсылокНаОбъекты=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В списке нет объектов.';en='List contains no items.'"));
		Возврат;
	ИначеЕсли КоличествоСсылокНаОбъекты=1 Тогда
		//откроем документ
		СписокДокументов=аДОКорпоративныеПроцессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Истина);
		Если СписокДокументов.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В списке нет объектов.';en='List contains no items.'"));
			Возврат;
		Иначе
			Если УсловиеКоличества1(СписокДокументов) Тогда
				ПервыйДокумент = ПолучитьПервыйЛокумент(СписокДокументов);
				//
				ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ПервыйДокумент, Неопределено, ЭтаФорма.УникальныйИдентификатор);
				РаботаСФайламиКлиент.Открыть(ДанныеФайла);
			КонецЕсли; 
			//
		КонецЕсли;
	Иначе
		//количество больше единицы
		ФлагСписокДокументовРаскрыт=НЕ ФлагСписокДокументовРаскрыт;
		Элементы.ТаблицаСсылокПроцесса.Видимость=ФлагСписокДокументовРаскрыт;
	КонецЕсли;
	ДекорацияОбъектыНажатиеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура Pcru_пкру_РаспределениеЗатратпкру_CostCentrПриИзмененииВместо(Элемент)
	Pcru_пкру_РаспределениеЗатратпкру_CostCentrПриИзмененииВместоСервер();
КонецПроцедуры

&НаСервере
Процедура Pcru_пкру_РаспределениеЗатратпкру_CostCentrПриИзмененииВместоСервер() 
	СписокДокументов=аДОКорпоративныеПроцессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Истина);
	Если СписокДокументов.Количество()<>0 Тогда
		КорДокСсылка = СписокДокументов[0].Значение;
		Если ТипЗнч(КорДокСсылка) = Тип("ДокументСсылка.аДокументооборотКорпоративныйДокумент") Тогда
			КорДок = 	КорДокСсылка.ПолучитьоБъект(); 
			КорДок.пкру_РаспределениеЗатрат.Очистить();
			СуммаСтрок = 0;
			Для каждого СтрокаР Из ЭтаФорма.пкру_РаспределениеЗатрат Цикл
				СуммаСтрок = СуммаСтрок + СтрокаР.Сумма;
				СтрокаКорДок =  КорДок.пкру_РаспределениеЗатрат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКорДок,СтрокаР);
			КонецЦикла;
			КорДок.СуммаДокумента = СуммаСтрок;
			ЭтаФорма.pcru_Сумма = СуммаСтрок;
			КорДок.ДополнительныеСвойства.Вставить("НеПроверятьТипЗатрат",Истина);
			КорДок.Записать();
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Pcru_pcru_КонтрагентПриИзмененииВместо(Элемент)
	СписокДокументов=аДОКорпоративныеПроцессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Истина);
	Если СписокДокументов.Количество()<>0 Тогда
		КорДокСсылка = СписокДокументов[0].Значение;
		Если ТипЗнч(КорДокСсылка) = Тип("ДокументСсылка.аДокументооборотКорпоративныйДокумент") Тогда
			КорДок = 	КорДокСсылка.ПолучитьоБъект(); 
			КорДок.ОсновнойКонтрагент = ЭтаФорма.pcru_Контрагент;
			КорДок.КонтрагентыДоговоры[0].Контрагент = ЭтаФорма.pcru_Контрагент;
			КорДок.ДополнительныеСвойства.Вставить("НеПроверятьТипЗатрат",Истина);
			КорДок.Записать();
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Pcru_pcru_договорКонтрагентаПриИзмененииВместо(Элемент)
	СписокДокументов=аДОКорпоративныеПроцессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Истина);
	Если СписокДокументов.Количество()<>0 Тогда
		КорДокСсылка = СписокДокументов[0].Значение;
		Если ТипЗнч(КорДокСсылка) = Тип("ДокументСсылка.аДокументооборотКорпоративныйДокумент") Тогда
			КорДок = 	КорДокСсылка.ПолучитьоБъект(); 
		    КорДок.КонтрагентыДоговоры[0].ДоговорКонтрагента = ЭтаФорма.pcru_договорКонтрагента;
			КорДок.ДополнительныеСвойства.Вставить("НеПроверятьТипЗатрат",Истина);
			КорДок.Записать();
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

